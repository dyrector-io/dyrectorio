generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "darwin-arm64"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique @db.VarChar(70)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  createdBy String    @db.Uuid
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  updatedBy String?   @db.Uuid

  registries    Registry[]
  products      Product[]
  nodes         Node[]
  users         UsersOnTeams[]
  invitations   UserInvitation[]
  auditLog      AuditLog[]
  notifications Notification[]
}

enum UserInvitationStatusEnum {
  pending
  expired
  declined
}

model UserInvitation {
  userId          String                   @db.Uuid
  teamId          String                   @db.Uuid
  email           String
  status          UserInvitationStatusEnum @default(pending)
  createdAt       DateTime                 @default(now()) @db.Timestamptz(6)
  team            Team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@unique([userId, teamId, email])
}

model UsersOnTeams {
  userId String       @db.Uuid
  active Boolean      @default(false)
  role   UserRoleEnum
  teamId String       @db.Uuid
  team   Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Node {
  id             String        @id @default(uuid()) @db.Uuid
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  createdBy      String        @db.Uuid
  updatedAt      DateTime?     @updatedAt @db.Timestamptz(6)
  updatedBy      String?       @db.Uuid
  name           String        @db.VarChar(70)
  type           NodeTypeEnum? @default(docker)
  description    String?
  icon           String?
  token          String?
  address        String?
  connectedAt    DateTime?     @db.Timestamptz(6)
  disconnectedAt DateTime?     @db.Timestamptz(6)
  team           Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId         String        @db.Uuid

  deployments Deployment[]

  @@unique([name, teamId])
}

model Registry {
  id              String                 @id @default(uuid()) @db.Uuid
  createdAt       DateTime               @default(now()) @db.Timestamptz(6)
  createdBy       String                 @db.Uuid
  updatedAt       DateTime?              @updatedAt @db.Timestamptz(6)
  updatedBy       String?                @db.Uuid
  name            String                 @db.VarChar(70)
  description     String?
  icon            String?
  url             String
  user            String?
  token           String?
  type            RegistryTypeEnum
  namespace       RegistryNamespaceEnum?
  imageNamePrefix String?
  apiUrl          String?

  images Image[]
  team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String  @db.Uuid

  @@unique([name, teamId])
}

model Product {
  id          String          @id @default(uuid()) @db.Uuid
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  createdBy   String          @db.Uuid
  updatedAt   DateTime?       @updatedAt @db.Timestamptz(6)
  updatedBy   String?         @db.Uuid
  name        String          @db.VarChar(70)
  description String?
  type        ProductTypeEnum @default(simple)

  versions Version[]
  team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String    @db.Uuid

  @@unique([name, teamId])
}

model Version {
  id        String          @id @default(uuid()) @db.Uuid
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  createdBy String          @db.Uuid
  updatedAt DateTime?       @updatedAt @db.Timestamptz(6)
  updatedBy String?         @db.Uuid
  name      String          @db.VarChar(70)
  changelog String?
  default   Boolean         @default(false)
  type      VersionTypeEnum @default(incremental)
  productId String          @db.Uuid

  product     Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  images      Image[]
  deployments Deployment[]
  parent      VersionsOnParentVersion?  @relation("child")
  children    VersionsOnParentVersion[] @relation("parent")

  @@unique([productId, name])
}

model VersionsOnParentVersion {
  versionId       String @unique @db.Uuid
  parentVersionId String @unique @db.Uuid

  child  Version @relation(name: "child", fields: [versionId], references: [id], onDelete: Cascade)
  parent Version @relation(name: "parent", fields: [parentVersionId], references: [id], onDelete: Cascade)

  @@id([versionId, parentVersionId])
}

model Image {
  id         String           @id @default(uuid()) @db.Uuid
  name       String
  tag        String?
  order      Int
  versionId  String           @db.Uuid
  registryId String           @db.Uuid
  config     ContainerConfig?
  instances  Instance[]
  createdAt  DateTime         @default(now()) @db.Timestamptz(6)
  createdBy  String           @db.Uuid
  updatedAt  DateTime?        @updatedAt @db.Timestamptz(6)
  updatedBy  String?          @db.Uuid

  registry Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  version  Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

enum NetworkMode {
  none
  host
  bridge
  overlay
  ipvlan
  macvlan
}

enum DeploymentStrategy {
  recreate
  rolling
}

enum RestartPolicy {
  always
  unlessStopped
  no
  onFailure
}

enum ExposeStrategy {
  none
  expose
  exposeWithTls
}

model ContainerConfig {
  id String @id @default(uuid()) @db.Uuid

  //Common
  name            String
  environment     Json?
  secrets         Json?
  capabilities    Json?
  expose          ExposeStrategy
  ingress         Json?
  configContainer Json?
  importContainer Json?
  user            Int?
  tty             Boolean
  ports           Json?
  portRanges      Json?
  volumes         Json?
  commands        Json?
  args            Json?
  initContainers  Json?

  //Dagent
  logConfig     Json?
  restartPolicy RestartPolicy
  networkMode   NetworkMode
  networks      Json?
  dockerLabels  Json?

  //Crane
  deploymentStrategy DeploymentStrategy
  healthCheckConfig  Json?
  resourceConfig     Json?
  proxyHeaders       Boolean
  useLoadBalancer    Boolean
  extraLBAnnotations Json?
  customHeaders      Json?
  annotations        Json?
  labels             Json?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @unique @db.Uuid
}

model Deployment {
  id          String               @id @default(uuid()) @db.Uuid
  createdAt   DateTime             @default(now()) @db.Timestamptz(6)
  createdBy   String               @db.Uuid
  updatedAt   DateTime?            @updatedAt @db.Timestamptz(6)
  updatedBy   String?              @db.Uuid
  note        String?
  prefix      String?
  status      DeploymentStatusEnum
  environment Json?
  versionId   String               @db.Uuid
  nodeId      String               @db.Uuid

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  node    Node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  instances Instance[]
  events    DeploymentEvent[]
}

model Instance {
  id           String              @id @default(uuid()) @db.Uuid
  updatedAt    DateTime            @updatedAt @db.Timestamptz(6)
  state        ContainerStateEnum?
  deploymentId String              @db.Uuid
  imageId      String              @db.Uuid

  deployment Deployment               @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  image      Image                    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  config     InstanceContainerConfig?
}

model InstanceContainerConfig {
  id         String @id @default(uuid()) @db.Uuid
  instanceId String @unique @db.Uuid

  //Common
  name            String?
  environment     Json?
  secrets         Json?
  capabilities    Json?
  expose          ExposeStrategy?
  ingress         Json?
  configContainer Json?
  importContainer Json?
  user            Int?
  tty             Boolean?
  ports           Json?
  portRanges      Json?
  volumes         Json?
  commands        Json?
  args            Json?
  initContainers  Json?

  //Dagent
  logConfig     Json?
  restartPolicy RestartPolicy?
  networkMode   NetworkMode?
  networks      Json?
  dockerLabels  Json?

  //Crane
  deploymentStrategy DeploymentStrategy?
  healthCheckConfig  Json?
  resourceConfig     Json?
  proxyHeaders       Boolean?
  useLoadBalancer    Boolean?
  extraLBAnnotations Json?
  customHeaders      Json?
  annotations        Json?
  labels             Json?

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

model DeploymentEvent {
  id           String                  @id @default(uuid()) @db.Uuid
  createdAt    DateTime                @default(now()) @db.Timestamptz(6)
  type         DeploymentEventTypeEnum
  value        Json
  deploymentId String                  @db.Uuid

  deployment Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  userId      String   @db.Uuid
  teamId      String   @db.Uuid
  serviceCall String
  data        Json?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum UserRoleEnum {
  owner
  admin
  user
}

model Notification {
  id        String               @id @default(uuid()) @db.Uuid
  createdAt DateTime             @default(now()) @db.Timestamptz(6)
  createdBy String               @db.Uuid
  updatedAt DateTime?            @updatedAt @db.Timestamptz(6)
  updatedBy String?              @db.Uuid
  name      String               @db.VarChar(70)
  url       String
  type      NotificationTypeEnum
  active    Boolean              @default(false)
  teamId    String               @db.Uuid

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  events NotificationEvent[]

  @@unique([name, teamId])
}

model NotificationEvent {
  id             String                    @id @default(uuid()) @db.Uuid
  event          NotificationEventTypeEnum
  notificationId String                    @db.Uuid

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([event, notificationId])
}

enum ProductTypeEnum {
  simple
  complex
}

enum VersionTypeEnum {
  incremental
  rolling
}

enum ContainerStateEnum {
  created
  restarting
  running
  removing
  paused
  exited
  dead
}

enum DeploymentStatusEnum {
  preparing
  inProgress
  successful
  failed
  obsolate
  downgraded
}

enum DeploymentEventTypeEnum {
  log
  deploymentStatus
  containerStatus
}

enum RegistryTypeEnum {
  v2
  hub
  gitlab
  github
  google
}

enum RegistryNamespaceEnum {
  organization
  user
  group
  project
}

enum NodeTypeEnum {
  docker
  k8s
}

enum NotificationTypeEnum {
  discord
  slack
  teams
}

enum NotificationEventTypeEnum {
  deploymentCreated
  versionCreated
  nodeAdded
  userInvited
}
