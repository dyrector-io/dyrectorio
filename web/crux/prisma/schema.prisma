generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(70)
  slug      String   @unique @db.VarChar(16)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String   @db.Uuid
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid

  registries    Registry[]
  projects      Project[]
  nodes         Node[]
  users         UsersOnTeams[]
  invitations   UserInvitation[]
  auditLog      AuditLog[]
  notifications Notification[]
  storages      Storage[]
  configBundles ConfigBundle[]
}

model Token {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  name      String    @db.VarChar(70)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt DateTime? @db.Timestamptz(6)
  nonce     String    @db.Uuid

  @@unique([userId, name, nonce])
}

enum UserInvitationStatusEnum {
  pending
  expired
  declined
}

model UserInvitation {
  userId    String                   @db.Uuid
  teamId    String                   @db.Uuid
  email     String
  status    UserInvitationStatusEnum @default(pending)
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)
  team      Team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@unique([userId, teamId, email])
}

model UsersOnTeams {
  userId String       @db.Uuid
  role   UserRoleEnum
  teamId String       @db.Uuid
  team   Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Node {
  id             String        @id @default(uuid()) @db.Uuid
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  createdBy      String        @db.Uuid
  updatedAt      DateTime      @updatedAt @db.Timestamptz(6)
  updatedBy      String?       @db.Uuid
  name           String        @db.VarChar(70)
  type           NodeTypeEnum? @default(docker)
  description    String?
  icon           String?
  address        String?
  connectedAt    DateTime?     @db.Timestamptz(6)
  disconnectedAt DateTime?     @db.Timestamptz(6)
  team           Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId         String        @db.Uuid

  deployments Deployment[]
  events      NodeEvent[]
  token       NodeToken?

  @@unique([name, teamId])
}

model NodeToken {
  nodeId    String @id @unique @db.Uuid
  nonce     String
  createdBy String @db.Uuid

  node Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model Registry {
  id              String                 @id @default(uuid()) @db.Uuid
  createdAt       DateTime               @default(now()) @db.Timestamptz(6)
  createdBy       String                 @db.Uuid
  updatedAt       DateTime               @updatedAt @db.Timestamptz(6)
  updatedBy       String?                @db.Uuid
  name            String                 @db.VarChar(70)
  description     String?
  icon            String?
  url             String
  user            String?
  token           String?
  type            RegistryTypeEnum
  namespace       RegistryNamespaceEnum?
  imageNamePrefix String?
  apiUrl          String?

  images Image[]
  team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String  @db.Uuid

  @@unique([name, teamId])
}

model Project {
  id          String          @id @default(uuid()) @db.Uuid
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  createdBy   String          @db.Uuid
  updatedAt   DateTime        @updatedAt @db.Timestamptz(6)
  updatedBy   String?         @db.Uuid
  name        String          @db.VarChar(70)
  description String?
  type        ProjectTypeEnum

  versions Version[]
  team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String    @db.Uuid

  @@unique([name, teamId])
}

model Version {
  id        String          @id @default(uuid()) @db.Uuid
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  createdBy String          @db.Uuid
  updatedAt DateTime        @updatedAt @db.Timestamptz(6)
  updatedBy String?         @db.Uuid
  name      String          @db.VarChar(70)
  changelog String?
  default   Boolean         @default(false)
  type      VersionTypeEnum @default(incremental)
  projectId String          @db.Uuid

  project     Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  images      Image[]
  deployments Deployment[]
  parent      VersionsOnParentVersion?  @relation("child")
  children    VersionsOnParentVersion[] @relation("parent")

  @@unique([projectId, name])
}

model VersionsOnParentVersion {
  versionId       String @unique @db.Uuid
  parentVersionId String @unique @db.Uuid

  child  Version @relation(name: "child", fields: [versionId], references: [id], onDelete: Cascade)
  parent Version @relation(name: "parent", fields: [parentVersionId], references: [id], onDelete: Cascade)

  @@id([versionId, parentVersionId])
}

model Image {
  id         String           @id @default(uuid()) @db.Uuid
  name       String
  tag        String?
  order      Int
  versionId  String           @db.Uuid
  registryId String           @db.Uuid
  config     ContainerConfig?
  instances  Instance[]
  createdAt  DateTime         @default(now()) @db.Timestamptz(6)
  createdBy  String           @db.Uuid
  updatedAt  DateTime         @updatedAt @db.Timestamptz(6)
  updatedBy  String?          @db.Uuid
  labels     Json?

  registry Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  version  Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

enum NetworkMode {
  none
  host
  bridge
}

enum DeploymentStrategy {
  recreate
  rolling
}

enum RestartPolicy {
  always
  unlessStopped
  no
  onFailure
}

enum ExposeStrategy {
  none
  expose
  exposeWithTls
}

model ContainerConfig {
  id String @id @default(uuid()) @db.Uuid

  //Common
  name             String
  environment      Json?
  secrets          Json?
  capabilities     Json?
  expose           ExposeStrategy
  routing          Json?
  configContainer  Json?
  user             Int            @default(-1)
  workingDirectory String?
  tty              Boolean
  ports            Json?
  portRanges       Json?
  volumes          Json?
  commands         Json?
  args             Json?
  initContainers   Json?
  storageSet       Boolean?
  storageId        String?        @db.Uuid
  storageConfig    Json?

  //Dagent
  logConfig     Json?
  restartPolicy RestartPolicy
  networkMode   NetworkMode
  networks      Json?
  dockerLabels  Json?

  //Crane
  deploymentStrategy DeploymentStrategy
  healthCheckConfig  Json?
  resourceConfig     Json?
  proxyHeaders       Boolean
  useLoadBalancer    Boolean
  extraLBAnnotations Json?
  customHeaders      Json?
  annotations        Json?
  labels             Json?
  metrics            Json?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @unique @db.Uuid

  storage Storage? @relation(fields: [storageId], references: [id], onDelete: Cascade)
}

model Deployment {
  id          String               @id @default(uuid()) @db.Uuid
  createdAt   DateTime             @default(now()) @db.Timestamptz(6)
  createdBy   String               @db.Uuid
  updatedAt   DateTime             @updatedAt @db.Timestamptz(6)
  updatedBy   String?              @db.Uuid
  note        String?
  prefix      String?
  status      DeploymentStatusEnum
  environment Json?
  versionId   String               @db.Uuid
  nodeId      String               @db.Uuid
  tries       Int                  @default(0)
  protected   Boolean              @default(false)

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  node    Node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  instances     Instance[]
  events        DeploymentEvent[]
  tokens        DeploymentToken[]
  configBundles ConfigBundleOnDeployments[]
}

model DeploymentToken {
  id           String    @id @default(uuid()) @db.Uuid
  deploymentId String    @db.Uuid
  createdBy    String    @db.Uuid
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  name         String
  expiresAt    DateTime? @db.Timestamptz(6)
  nonce        String    @db.Uuid

  deployment Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  AuditLog   AuditLog[]

  @@unique([deploymentId])
  @@unique([deploymentId, nonce])
}

model Instance {
  id           String   @id @default(uuid()) @db.Uuid
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)
  deploymentId String   @db.Uuid
  imageId      String   @db.Uuid

  deployment Deployment               @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  image      Image                    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  config     InstanceContainerConfig?
}

model InstanceContainerConfig {
  id         String @id @default(uuid()) @db.Uuid
  instanceId String @unique @db.Uuid

  //Common
  name            String?
  environment     Json?
  secrets         Json?
  capabilities    Json?
  expose          ExposeStrategy?
  routing         Json?
  configContainer Json?
  user            Int?
  workingDirectory String?
  tty             Boolean?
  ports           Json?
  portRanges      Json?
  volumes         Json?
  commands        Json?
  args            Json?
  initContainers  Json?
  storageSet      Boolean?
  storageId       String?         @unique @db.Uuid
  storageConfig   Json?

  //Dagent
  logConfig     Json?
  restartPolicy RestartPolicy?
  networkMode   NetworkMode?
  networks      Json?
  dockerLabels  Json?

  //Crane
  deploymentStrategy DeploymentStrategy?
  healthCheckConfig  Json?
  resourceConfig     Json?
  proxyHeaders       Boolean?
  useLoadBalancer    Boolean?
  extraLBAnnotations Json?
  customHeaders      Json?
  annotations        Json?
  labels             Json?
  metrics            Json?

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  storage  Storage? @relation(fields: [storageId], references: [id], onDelete: Cascade)
}

model DeploymentEvent {
  id           String                  @id @default(uuid()) @db.Uuid
  createdAt    DateTime                @default(now()) @db.Timestamptz(6)
  type         DeploymentEventTypeEnum
  value        Json
  deploymentId String                  @db.Uuid
  tryCount     Int                     @default(0)

  deployment Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
}

enum AuditLogContextEnum {
  http
  ws
  rpc
}

enum AuditLogRequestMethodEnum {
  get
  post
  put
  patch
  delete
}

enum AuditLogActorTypeEnum {
  user
  deploymentToken
}

model AuditLog {
  id                String                     @id @default(uuid()) @db.Uuid
  createdAt         DateTime                   @default(now()) @db.Timestamptz(6)
  actorType         AuditLogActorTypeEnum
  userId            String?                    @db.Uuid
  deploymentTokenId String?                    @db.Uuid
  teamId            String                     @db.Uuid
  context           AuditLogContextEnum
  method            AuditLogRequestMethodEnum?
  event             String
  data              Json?

  team            Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  deploymentToken DeploymentToken? @relation(fields: [deploymentTokenId], references: [id], onDelete: SetNull) // is it ok on SetNull
}

enum UserRoleEnum {
  owner
  admin
  user
}

model Notification {
  id        String               @id @default(uuid()) @db.Uuid
  createdAt DateTime             @default(now()) @db.Timestamptz(6)
  createdBy String               @db.Uuid
  updatedAt DateTime             @updatedAt @db.Timestamptz(6)
  updatedBy String?              @db.Uuid
  name      String               @db.VarChar(70)
  url       String
  type      NotificationTypeEnum
  active    Boolean              @default(false)
  teamId    String               @db.Uuid

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  events NotificationEvent[]

  @@unique([name, teamId])
}

model NotificationEvent {
  id             String                    @id @default(uuid()) @db.Uuid
  event          NotificationEventTypeEnum
  notificationId String                    @db.Uuid

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([event, notificationId])
}

model NodeEvent {
  id        String            @id @default(uuid()) @db.Uuid
  nodeId    String            @db.Uuid
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  event     NodeEventTypeEnum
  data      Json?

  node Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("NodeEvent")
}

enum ProjectTypeEnum {
  versionless
  versioned
}

enum VersionTypeEnum {
  incremental
  rolling
}

enum DeploymentStatusEnum {
  preparing
  inProgress
  successful
  failed
  obsolete
  downgraded
}

enum DeploymentEventTypeEnum {
  log
  deploymentStatus
  containerState
}

enum RegistryTypeEnum {
  v2
  hub
  gitlab
  github
  google
  unchecked
}

enum RegistryNamespaceEnum {
  organization
  user
  group
  project
}

enum NodeTypeEnum {
  docker
  k8s
}

enum NotificationTypeEnum {
  discord
  slack
  teams
  rocket
  mattermost
}

enum NotificationEventTypeEnum {
  deploymentCreated
  versionCreated
  nodeAdded
  userInvited
}

enum NodeEventTypeEnum {
  installed
  connected
  left
  kicked
  update
  updateCompleted
  containerCommand
  tokenReplaced
}

model Storage {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String   @db.Uuid
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  name        String   @db.VarChar(70)
  description String?
  icon        String?
  url         String
  accessKey   String?
  secretKey   String?

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.Uuid

  containerConfigs ContainerConfig[]
  instanceConfigs  InstanceContainerConfig[]

  @@unique([name, teamId])
}

model ConfigBundle {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  data        Json
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String   @db.Uuid
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.Uuid

  deployments ConfigBundleOnDeployments[]

  @@unique([name, teamId])
}

model ConfigBundleOnDeployments {
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  deploymentId String     @db.Uuid

  configBundle   ConfigBundle @relation(fields: [configBundleId], references: [id], onDelete: Cascade)
  configBundleId String       @db.Uuid

  @@id([deploymentId, configBundleId])
}

model QualityAssuranceConfig {
  id String  @id @default(uuid()) @db.Uuid
  name    String?
}
