syntax = "proto3";

package common;
option go_package = "github.com/dyrector-io/dyrectorio/protobuf/go/common";

import "google/protobuf/timestamp.proto";

message Empty {}

// Deployment
enum ContainerState {
  CONTAINER_STATE_UNSPECIFIED = 0;
  RUNNING = 1;
  WAITING = 2;
  EXITED = 3;
  REMOVED = 4;
}

enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  PREPARING = 1;
  IN_PROGRESS = 2;
  SUCCESSFUL = 3;
  FAILED = 4;
  OBSOLETE = 5;
  DOWNGRADED = 6;
}

message InstanceDeploymentItem {
  string instanceId = 100;
  ContainerState state = 101;
  string reason = 102;
}

message DeploymentStatusMessage {
  oneof data {
    InstanceDeploymentItem instance = 200;
    DeploymentStatus deploymentStatus = 201;
  }

  repeated string log = 1000;
}

message ContainerStateItemPort {
  int32 internal = 100;
  int32 external = 101;
}

message ContainerStateListMessage {
  optional string prefix = 100;
  repeated common.ContainerStateItem data = 1000;
}

message ContainerStateItem {
  common.ContainerIdentifier id = 100;
  string command = 101;
  google.protobuf.Timestamp createdAt = 102;
  /* The 'State' of the container (Created, Running, etc) */
  ContainerState state = 103;
  /* The 'reason' behind 'state'. */
  string reason = 107;

  /*
   * The 'Status' of the container ("Created 1min ago", "Exited with code 123",
   * etc). Unused but left here for reverse compatibility with the legacy
   * version.
   */
  string status = 104;
  string imageName = 105;
  string imageTag = 106;

  repeated ContainerStateItemPort ports = 1000;
  map<string, string> labels = 1001;
}

message ContainerLogMessage {
  string log = 100;
}

message ContainerInspectMessage {
  string prefix = 1;
  string name = 2;
  string inspection = 3;
}

enum NetworkMode {
  NETWORK_MODE_UNSPECIFIED = 0;
  BRIDGE = 1;
  HOST = 2;
  NONE = 6;
}

enum RestartPolicy {
  POLICY_UNSPECIFIED = 0;
  UNDEFINED = 1;
  NO = 2;
  ON_FAILURE = 3;
  ALWAYS = 4;
  UNLESS_STOPPED = 5;
}

enum DeploymentStrategy {
  DEPLOYMENT_STRATEGY_UNSPECIFIED = 0;
  RECREATE = 1;
  ROLLING_UPDATE = 2;
}

enum VolumeType {
  VOLUME_TYPE_UNSPECIFIED = 0;
  RO = 1;
  RWO = 2;
  RWX = 3;
  MEM = 4;
  TMP = 5;
}

enum DriverType {
  DRIVER_TYPE_UNSPECIFIED = 0;
  NODE_DEFAULT = 1;
  DRIVER_TYPE_NONE = 2;
  GCPLOGS = 3;
  LOCAL = 4;
  JSON_FILE = 5;
  SYSLOG = 6;
  JOURNALD = 7;
  GELF = 8;
  FLUENTD = 9;
  AWSLOGS = 10;
  SPLUNK = 11;
  ETWLOGS = 12;
  LOGENTRIES = 13;
}

enum ExposeStrategy {
  EXPOSE_STRATEGY_UNSPECIFIED = 0;
  NONE_ES = 1;
  EXPOSE = 2;
  EXPOSE_WITH_TLS = 3;
}

message Routing {
  optional string domain = 100;
  optional string path = 101;
  optional bool stripPath = 102;
  optional string uploadLimit = 103;
  optional uint32 port = 104;
}

message ConfigContainer {
  string image = 100;
  string volume = 101;
  string path = 102;
  bool keepFiles = 103;
}

message HealthCheckConfig {
  optional int32 port = 100;
  optional string livenessProbe = 101;
  optional string readinessProbe = 102;
  optional string startupProbe = 103;
}

message Resource {
  optional string cpu = 100;
  optional string memory = 101;
}

message ResourceConfig {
  optional Resource limits = 100;
  optional Resource requests = 101;
}

message KeyValue {
  string key = 100;
  string value = 101;
}

message ListSecretsResponse {
  string prefix = 1;
  string name = 2;
  string publicKey = 3;
  bool hasKeys = 4;
  repeated string keys = 5;
}

message UniqueKey {
  string id = 100;
  string key = 101;
}

message ContainerIdentifier {
  string prefix = 1;
  string name = 2;
}

enum ContainerOperation {
  CONTAINER_OPERATION_UNSPECIFIED = 0;
  START_CONTAINER = 1;
  STOP_CONTAINER = 2;
  RESTART_CONTAINER = 3;
}

message ContainerCommandRequest {
  common.ContainerIdentifier container = 100;
  common.ContainerOperation operation = 101;
}

message DeleteContainersRequest {
  oneof target {
    common.ContainerIdentifier container = 201;
    string prefix = 202;
  }
}
