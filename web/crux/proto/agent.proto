/**
 * Container agent interface messages and service definitions
 * Logs, statuses, deployments
 *
 */
syntax = "proto3";

package agent;
option go_package = "github.com/dyrector-io/dyrectorio/protobuf/go/agent";

import "protobuf/proto/common.proto";

/**
 * Service handling deployment of containers and fetching statuses
 */
service Agent {
  /**
   * Subscribe with pre-assigned AgentID, waiting for incoming
   * deploy requests and prefix status requests.
   * In both cases, separate, shorter-living channels are opened.
   * For deployment status reports, closed when ended.
   * For prefix state reports, should be closed by the server.
   */
  rpc Connect(AgentInfo) returns (stream AgentCommand);

  rpc DeploymentStatus(stream common.DeploymentStatusMessage) returns (Empty);
  rpc ContainerState(stream common.ContainerStateListMessage) returns (Empty);
  rpc SecretsList(common.ListSecretsResponse) returns (Empty);
}

message Empty {}

/**
 *
 *
 */
message AgentInfo {
  string id = 1;
  string version = 2;
  string publicKey = 3;
}

message AgentCommand {
  oneof command {
    VersionDeployRequest deploy = 1;
    ContainerStateRequest containerState = 2;
    ContainerDeleteRequest containerDelete = 3;
    DeployRequestLegacy deployLegacy = 4;
    ListSecretsRequest listSecrets = 5;
  }
}

/*
 * This is more of a placeholder, we could include more, or return this
 * instantly after validation success.
 */
message DeployResponse { bool started = 1; }

message VersionDeployRequest {
  string id = 1;
  string versionName = 2;
  string releaseNotes = 3;

  repeated DeployRequest requests = 4;
}
/*
 * Request for a keys of existing secrets in a prefix, eg. namespace
 */
message ListSecretsRequest { 
  string prefix = 1;
  string name = 2;
}

/**
 * Deploys a single container
 *
 */
message DeployRequest {

  string id = 1;
  string containerName = 2;

  message InstanceConfig {
    /*
    containerPreName, mapped into host folder structure,
    used as namespace id
    */
    string prefix = 1;
    optional string mountPath = 2; // mount path of instance (docker only)
    message Environment { repeated string env = 1; }
    optional Environment environment = 3; // environment variable map (piped)
    optional string repositoryPrefix = 4; // registry repo prefix
  }
  /* InstanceConfig is set for multiple containers */
  InstanceConfig instanceConfig = 3;

  /* Runtime info and requirements of a container */
  common.ExplicitContainerConfig containerConfig = 4;
  optional string runtimeConfig = 5;
  optional string registry = 6;
  string imageName = 7;
  string tag = 8;
  message RegistryAuth {
    string name = 1;
    string url = 2;
    string user = 3;
    string password = 4;
  }
  optional RegistryAuth registryAuth = 9;
}

message ContainerStateRequest {
  optional string prefix = 1;
  optional bool oneShot = 2;
}

message ContainerDeleteRequest {
  string prefix = 1;
  string name = 2;
}

message DeployRequestLegacy {
  string requestId = 1; // for early dogger logging
  string json = 2;
}
