/**
 * CRUX Protobuf definitions
 *
 */
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "protobuf/proto/common.proto";

package crux;
option go_package = "github.com/dyrector-io/dyrectorio/protobuf/go/crux";

/**
 *
 * Services
 *
 */
service CruxNode {
  // CRUD
  rpc GetNodes(common.Empty) returns (NodeListResponse);
  rpc CreateNode(CreateNodeRequest) returns (CreateEntityResponse);
  rpc UpdateNode(UpdateNodeRequest) returns (common.Empty);
  rpc DeleteNode(IdRequest) returns (common.Empty);
  rpc GetNodeDetails(IdRequest) returns (NodeDetailsResponse);
  rpc GenerateScript(GenerateScriptRequest) returns (NodeInstallResponse);
  rpc GetScript(ServiceIdRequest) returns (NodeScriptResponse);
  rpc DiscardScript(IdRequest) returns (common.Empty);
  rpc RevokeToken(IdRequest) returns (common.Empty);
  rpc UpdateNodeAgent(IdRequest) returns (common.Empty);
  rpc SendContainerCommand(NodeContainerCommandRequest) returns (common.Empty);
  rpc DeleteContainers(NodeDeleteContainersRequest) returns (common.Empty);

  rpc SubscribeNodeEventChannel(ServiceIdRequest)
      returns (stream NodeEventMessage);
  rpc WatchContainerState(WatchContainerStateRequest)
      returns (stream common.ContainerStateListMessage);
  rpc SubscribeContainerLogChannel(WatchContainerLogRequest)
      returns (stream common.ContainerLogMessage);
}

service CruxDeployment {
  rpc SubscribeToDeploymentEvents(IdRequest)
      returns (stream DeploymentProgressMessage);
  rpc SubscribeToDeploymentEditEvents(ServiceIdRequest)
      returns (stream DeploymentEditEventMessage);
}

service CruxTeam {
  rpc CreateTeam(CreateTeamRequest) returns (CreateEntityResponse);
  rpc GetActiveTeamByUser(common.Empty) returns (ActiveTeamDetailsResponse);
  rpc UpdateTeam(UpdateTeamRequest) returns (common.Empty);
  rpc DeleteTeam(IdRequest) returns (common.Empty);
  rpc UpdateUserRole(UpdateUserRoleInTeamRequest) returns (common.Empty);

  rpc InviteUserToTeam(InviteUserRequest) returns (CreateEntityResponse);
  rpc ReinviteUserToTeam(ReinviteUserRequest) returns (CreateEntityResponse);
  rpc DeleteUserFromTeam(DeleteUserFromTeamRequest) returns (common.Empty);
  rpc AcceptTeamInvitation(IdRequest) returns (common.Empty);
  rpc DeclineTeamInvitation(IdRequest) returns (common.Empty);
  rpc SelectTeam(IdRequest) returns (common.Empty);

  rpc GetUserMeta(common.Empty) returns (UserMetaResponse);
  rpc GetAllTeams(common.Empty) returns (AllTeamsResponse);
  rpc GetTeamById(IdRequest) returns (TeamDetailsResponse);
}

service CruxHealth { rpc getHealth(common.Empty) returns (HealthResponse); }

/**
 *
 * Common messages
 *
 */

message ServiceIdRequest { string id = 1; }

message IdRequest { string id = 1; }

message AuditResponse {
  string createdBy = 100;
  google.protobuf.Timestamp createdAt = 101;
  optional string updatedBy = 102;
  optional google.protobuf.Timestamp updatedAt = 103;
}

message CreateEntityResponse {
  string id = 1;

  google.protobuf.Timestamp createdAt = 100;
}

message UpdateEntityResponse { google.protobuf.Timestamp updatedAt = 100; }

/*
 *
 * Custom messages, please use comment if you add a new entity
 *
 */

// TEAM
message CreateTeamRequest { string name = 100; }

message UpdateTeamRequest {
  string id = 1;

  string name = 100;
}

message UpdateUserRoleInTeamRequest {
  string id = 1;

  string userId = 100;
  UserRole role = 101;
}

message InviteUserRequest {
  string id = 1;

  string email = 100;
  string firstName = 101;
  optional string lastName = 102;
}

message ReinviteUserRequest {
  string id = 1;

  string userId = 100;
}

message DeleteUserFromTeamRequest {
  string id = 1;

  string userId = 100;
}

message UserMetaResponse {
  ActiveTeamUser user = 100;

  repeated TeamResponse teams = 1000;
  repeated TeamResponse invitations = 1001;
}

message ActiveTeamUser {
  string activeTeamId = 100;
  UserRole role = 101;
  UserStatus status = 102;
}

message TeamResponse {
  string id = 1;

  string name = 100;
}

message ActiveTeamDetailsResponse {
  string id = 1;

  string name = 100;

  repeated UserResponse users = 1000;
}

message TeamStatistics {
  uint32 users = 100;
  uint32 products = 101;
  uint32 nodes = 102;
  uint32 versions = 103;
  uint32 deployments = 104;
}

message TeamWithStatsResponse {
  string id = 1;

  string name = 100;
  TeamStatistics statistics = 101;
}

message TeamDetailsResponse {
  string id = 1;

  string name = 100;
  TeamStatistics statistics = 101;

  repeated UserResponse users = 1000;
}

message AllTeamsResponse { repeated TeamWithStatsResponse data = 1000; }

enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;
  USER = 1;
  OWNER = 2;
  ADMIN = 3;
}

enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  PENDING = 1;
  VERIFIED = 2;
  EXPIRED = 3;
  DECLINED = 4;
}

message UserResponse {
  string id = 1;

  string name = 100;
  string email = 101;
  UserRole role = 102;
  UserStatus status = 103;
  optional google.protobuf.Timestamp lastLogin = 104;
}

// REGISTRY

enum RegistryType {
  REGISTRY_TYPE_UNSPECIFIED = 0;
  V2 = 1;
  HUB = 2;
  GITLAB = 3;
  GITHUB = 4;
  GOOGLE = 5;
  UNCHECKED = 6;
}

// Container

message VolumeLink {
  string id = 100;
  string name = 101;
  string path = 102;
}

message InitContainer {
  string id = 100;
  string name = 101;
  string image = 102;
  bool useParentConfig = 103;

  repeated VolumeLink volumes = 1000;
  repeated common.UniqueKey command = 1001;
  repeated common.UniqueKey args = 1002;
  repeated UniqueKeyValue environment = 1003;
}

message InitContainerList { repeated InitContainer data = 1000; }

message LogConfig {
  common.DriverType driver = 100;
  repeated UniqueKeyValue options = 1000;
}

message Port {
  string id = 100;
  int32 internal = 101;
  optional int32 external = 102;
}

message PortList { repeated Port data = 1000; }

message PortRange {
  int32 from = 100;
  int32 to = 101;
}

message PortRangeBinding {
  string id = 100;
  PortRange internal = 101;
  PortRange external = 102;
}

message PortRangeBindingList { repeated PortRangeBinding data = 1000; }

message Volume {
  string id = 100;
  string name = 101;
  string path = 102;
  optional string size = 103;
  optional common.VolumeType type = 104;
  optional string class = 105;
}

message VolumeList { repeated Volume data = 1000; }

message UniqueKeyList { repeated common.UniqueKey data = 1000; }

message UniqueKeyValue {
  string id = 100;
  string key = 101;
  string value = 102;
}

message UniqueKeyValueList { repeated UniqueKeyValue data = 1000; }

message UniqueSecretKey {
  string id = 100;
  string key = 101;
  bool required = 102;
}

message UniqueSecretKeyList { repeated UniqueSecretKey data = 1000; }

message UniqueSecretKeyValue {
  string id = 100;
  string key = 101;
  string value = 103;
  bool required = 104;
  bool encrypted = 105;
  optional string publicKey = 106;
}

message UniqueSecretKeyValueList { repeated UniqueSecretKeyValue data = 1000; }

message Marker {
  repeated UniqueKeyValue deployment = 1000;
  repeated UniqueKeyValue service = 1001;
  repeated UniqueKeyValue ingress = 1002;
}

message ContainerStorage {
  optional string storageId = 100;
  optional string path = 101;
  optional string bucket = 102;
}

message DagentContainerConfig {
  optional LogConfig logConfig = 100;
  optional common.RestartPolicy restartPolicy = 101;
  optional common.NetworkMode networkMode = 102;

  optional UniqueKeyList networks = 1000;
  optional UniqueKeyValueList labels = 1001;
}

message CraneContainerConfig {
  optional common.DeploymentStrategy deploymentStatregy = 100;
  optional common.HealthCheckConfig healthCheckConfig = 101;
  optional common.ResourceConfig resourceConfig = 102;
  optional bool proxyHeaders = 103;
  optional bool useLoadBalancer = 104;
  optional Marker annotations = 105;
  optional Marker labels = 106;

  optional UniqueKeyList customHeaders = 1000;
  optional UniqueKeyValueList extraLBAnnotations = 1001;
}

message CommonContainerConfig {
  optional string name = 101;
  optional common.ExposeStrategy expose = 102;
  optional common.Ingress ingress = 103;
  optional common.ConfigContainer configContainer = 104;
  optional int64 user = 105;
  optional bool TTY = 106;
  optional ContainerStorage storage = 107;

  optional PortList ports = 1000;
  optional PortRangeBindingList portRanges = 1001;
  optional VolumeList volumes = 1002;
  optional UniqueKeyList commands = 1003;
  optional UniqueKeyList args = 1004;
  optional UniqueKeyValueList environment = 1005;
  optional InitContainerList initContainers = 1006;
}

message ImageContainerConfig {
  optional CommonContainerConfig common = 100;
  optional DagentContainerConfig dagent = 101;
  optional CraneContainerConfig crane = 102;

  optional UniqueSecretKeyList secrets = 1000;
}

message InstanceContainerConfig {
  optional CommonContainerConfig common = 100;
  optional DagentContainerConfig dagent = 101;
  optional CraneContainerConfig crane = 102;

  optional UniqueSecretKeyValueList secrets = 1000;
}

message ImageResponse {
  string id = 1;

  string name = 100;
  string tag = 101;
  uint32 order = 102;
  string registryId = 103;
  ImageContainerConfig config = 104;
  google.protobuf.Timestamp createdAt = 105;
  string registryName = 106;
  RegistryType registryType = 107;
}

// NODE

message NodeResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
  optional string address = 103;
  NodeConnectionStatus status = 104;
  optional google.protobuf.Timestamp connectedAt = 105;
  optional string version = 106;
  NodeType type = 107;
  bool updating = 108;
}

message NodeDetailsResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
  optional string address = 103;
  NodeConnectionStatus status = 104;
  bool hasToken = 105;
  optional google.protobuf.Timestamp connectedAt = 106;
  optional NodeInstallResponse install = 107;
  optional NodeScriptResponse script = 108;
  optional string version = 109;
  NodeType type = 110;
  bool updating = 111;
}

message NodeListResponse { repeated NodeResponse data = 1000; }

message CreateNodeRequest {
  string name = 100;
  optional string description = 101;
  optional string icon = 102;
}

message UpdateNodeRequest {
  string id = 1;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
}

message DagentTraefikOptions { string acmeEmail = 100; }

message GenerateScriptRequest {
  string id = 1;
  NodeType type = 100;
  optional string rootPath = 101;
  NodeScriptType scriptType = 102;
  optional DagentTraefikOptions dagentTraefik = 103;
}

message NodeInstallResponse {
  string command = 100;
  google.protobuf.Timestamp expireAt = 101;
}

message NodeScriptResponse { string content = 100; }

message NodeContainerCommandRequest {
  string id = 1;

  common.ContainerCommandRequest command = 100;
}

message NodeDeleteContainersRequest {
  string id = 1;

  common.DeleteContainersRequest containers = 100;
}

/*
Lifecycle:
When a node connection is alive, the status is CONNECTED.
If it disconnects, the status will be UNREACHABLE.
When a node created, it is UNREACHEABLE until the user completes
the install process.
*/
enum NodeConnectionStatus {
  CONNECTION_STATUS_UNSPECIFIED = 0;
  // Node was not yet connected or became unreachable
  UNREACHABLE = 1;
  // Node is running and connected
  CONNECTED = 2;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  DOCKER = 1;
  K8S = 2;
}

enum NodeScriptType {
  NODE_SCRIPT_TYPE_UNSPECIFIED = 0;
  SHELL = 1;
  POWERSHELL = 2;
}

message NodeEventMessage {
  string id = 1;
  NodeConnectionStatus status = 100;
  optional string address = 101;
  optional string version = 102;
  optional google.protobuf.Timestamp connectedAt = 103;
  optional string error = 104;
  optional bool updating = 105;
}

message WatchContainerStateRequest {
  string nodeId = 100;
  optional string prefix = 101;
}

message WatchContainerLogRequest {
  string nodeId = 100;
  common.ContainerIdentifier container = 101;
}

// VERSION

enum VersionType {
  VERSION_TYPE_UNSPECIFIED = 0;
  INCREMENTAL = 1;
  ROLLING = 2;
}

// DEPLOYMENT

message DeploymentProgressMessage {
  string id = 1;

  optional common.DeploymentStatus status = 100;
  optional common.InstanceDeploymentItem instance = 101;

  repeated string log = 1000;
}

message InstancesCreatedEventList { repeated InstanceResponse data = 1000; }

message DeploymentEditEventMessage {
  oneof data {
    InstancesCreatedEventList instancesCreated = 200;
    string imageIdDeleted = 201;
  }
}

message InstanceResponse {
  string id = 1;
  AuditResponse audit = 2;

  ImageResponse image = 100;
  optional common.ContainerState state = 101;
  optional InstanceContainerConfig config = 102;
}

message PatchInstanceRequest {
  string id = 1;

  optional InstanceContainerConfig config = 100;
  optional string resetSection = 101;
}

enum DeploymentEventType {
  DEPLOYMENT_EVENT_TYPE_UNSPECIFIED = 0;
  DEPLOYMENT_LOG = 1;
  DEPLOYMENT_STATUS = 2;
  CONTAINER_STATUS = 3;
}

message DeploymentEventContainerState {
  string instanceId = 1;
  common.ContainerState state = 2;
}

message DeploymentEventLog { repeated string log = 1000; }

// HEALTH

enum ServiceStatus {
  SERVICE_STATUS_UNSPECIFIED = 0;
  UNAVAILABLE = 1;
  DISRUPTED = 2;
  OPERATIONAL = 3;
}

message HealthResponse {
  ServiceStatus status = 100;
  string cruxVersion = 101;
  optional string lastMigration = 102;
}
