// Code generated by MockGen. DO NOT EDIT.
// Source: protobuf/go/agent/agent_grpc.pb.go

// Package mock_agent is a generated GoMock package.
package mock_agent

import (
	context "context"
	reflect "reflect"

	agent "github.com/dyrector-io/dyrectorio/protobuf/go/agent"
	common "github.com/dyrector-io/dyrectorio/protobuf/go/common"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockAgentClient is a mock of AgentClient interface.
type MockAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentClientMockRecorder
}

// MockAgentClientMockRecorder is the mock recorder for MockAgentClient.
type MockAgentClientMockRecorder struct {
	mock *MockAgentClient
}

// NewMockAgentClient creates a new mock instance.
func NewMockAgentClient(ctrl *gomock.Controller) *MockAgentClient {
	mock := &MockAgentClient{ctrl: ctrl}
	mock.recorder = &MockAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentClient) EXPECT() *MockAgentClientMockRecorder {
	return m.recorder
}

// AbortUpdate mocks base method.
func (m *MockAgentClient) AbortUpdate(ctx context.Context, in *agent.AgentAbortUpdate, opts ...grpc.CallOption) (*common.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AbortUpdate", varargs...)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortUpdate indicates an expected call of AbortUpdate.
func (mr *MockAgentClientMockRecorder) AbortUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortUpdate", reflect.TypeOf((*MockAgentClient)(nil).AbortUpdate), varargs...)
}

// Connect mocks base method.
func (m *MockAgentClient) Connect(ctx context.Context, in *agent.AgentInfo, opts ...grpc.CallOption) (agent.Agent_ConnectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(agent.Agent_ConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockAgentClientMockRecorder) Connect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockAgentClient)(nil).Connect), varargs...)
}

// ContainerLog mocks base method.
func (m *MockAgentClient) ContainerLog(ctx context.Context, opts ...grpc.CallOption) (agent.Agent_ContainerLogClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ContainerLog", varargs...)
	ret0, _ := ret[0].(agent.Agent_ContainerLogClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerLog indicates an expected call of ContainerLog.
func (mr *MockAgentClientMockRecorder) ContainerLog(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLog", reflect.TypeOf((*MockAgentClient)(nil).ContainerLog), varargs...)
}

// ContainerState mocks base method.
func (m *MockAgentClient) ContainerState(ctx context.Context, opts ...grpc.CallOption) (agent.Agent_ContainerStateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ContainerState", varargs...)
	ret0, _ := ret[0].(agent.Agent_ContainerStateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerState indicates an expected call of ContainerState.
func (mr *MockAgentClientMockRecorder) ContainerState(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerState", reflect.TypeOf((*MockAgentClient)(nil).ContainerState), varargs...)
}

// DeleteContainers mocks base method.
func (m *MockAgentClient) DeleteContainers(ctx context.Context, in *common.DeleteContainersRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContainers", varargs...)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainers indicates an expected call of DeleteContainers.
func (mr *MockAgentClientMockRecorder) DeleteContainers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainers", reflect.TypeOf((*MockAgentClient)(nil).DeleteContainers), varargs...)
}

// DeploymentStatus mocks base method.
func (m *MockAgentClient) DeploymentStatus(ctx context.Context, opts ...grpc.CallOption) (agent.Agent_DeploymentStatusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploymentStatus", varargs...)
	ret0, _ := ret[0].(agent.Agent_DeploymentStatusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentStatus indicates an expected call of DeploymentStatus.
func (mr *MockAgentClientMockRecorder) DeploymentStatus(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentStatus", reflect.TypeOf((*MockAgentClient)(nil).DeploymentStatus), varargs...)
}

// SecretList mocks base method.
func (m *MockAgentClient) SecretList(ctx context.Context, in *common.ListSecretsResponse, opts ...grpc.CallOption) (*common.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretList", varargs...)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList.
func (mr *MockAgentClientMockRecorder) SecretList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockAgentClient)(nil).SecretList), varargs...)
}

// MockAgent_ConnectClient is a mock of Agent_ConnectClient interface.
type MockAgent_ConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_ConnectClientMockRecorder
}

// MockAgent_ConnectClientMockRecorder is the mock recorder for MockAgent_ConnectClient.
type MockAgent_ConnectClientMockRecorder struct {
	mock *MockAgent_ConnectClient
}

// NewMockAgent_ConnectClient creates a new mock instance.
func NewMockAgent_ConnectClient(ctrl *gomock.Controller) *MockAgent_ConnectClient {
	mock := &MockAgent_ConnectClient{ctrl: ctrl}
	mock.recorder = &MockAgent_ConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_ConnectClient) EXPECT() *MockAgent_ConnectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAgent_ConnectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAgent_ConnectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAgent_ConnectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAgent_ConnectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_ConnectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_ConnectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAgent_ConnectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAgent_ConnectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAgent_ConnectClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAgent_ConnectClient) Recv() (*agent.AgentCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*agent.AgentCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAgent_ConnectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAgent_ConnectClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_ConnectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_ConnectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_ConnectClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_ConnectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_ConnectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_ConnectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAgent_ConnectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAgent_ConnectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAgent_ConnectClient)(nil).Trailer))
}

// MockAgent_DeploymentStatusClient is a mock of Agent_DeploymentStatusClient interface.
type MockAgent_DeploymentStatusClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_DeploymentStatusClientMockRecorder
}

// MockAgent_DeploymentStatusClientMockRecorder is the mock recorder for MockAgent_DeploymentStatusClient.
type MockAgent_DeploymentStatusClientMockRecorder struct {
	mock *MockAgent_DeploymentStatusClient
}

// NewMockAgent_DeploymentStatusClient creates a new mock instance.
func NewMockAgent_DeploymentStatusClient(ctrl *gomock.Controller) *MockAgent_DeploymentStatusClient {
	mock := &MockAgent_DeploymentStatusClient{ctrl: ctrl}
	mock.recorder = &MockAgent_DeploymentStatusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_DeploymentStatusClient) EXPECT() *MockAgent_DeploymentStatusClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockAgent_DeploymentStatusClient) CloseAndRecv() (*common.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockAgent_DeploymentStatusClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAgent_DeploymentStatusClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAgent_DeploymentStatusClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_DeploymentStatusClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAgent_DeploymentStatusClient) Send(arg0 *common.DeploymentStatusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_DeploymentStatusClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAgent_DeploymentStatusClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAgent_DeploymentStatusClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAgent_DeploymentStatusClient)(nil).Trailer))
}

// MockAgent_ContainerStateClient is a mock of Agent_ContainerStateClient interface.
type MockAgent_ContainerStateClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_ContainerStateClientMockRecorder
}

// MockAgent_ContainerStateClientMockRecorder is the mock recorder for MockAgent_ContainerStateClient.
type MockAgent_ContainerStateClientMockRecorder struct {
	mock *MockAgent_ContainerStateClient
}

// NewMockAgent_ContainerStateClient creates a new mock instance.
func NewMockAgent_ContainerStateClient(ctrl *gomock.Controller) *MockAgent_ContainerStateClient {
	mock := &MockAgent_ContainerStateClient{ctrl: ctrl}
	mock.recorder = &MockAgent_ContainerStateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_ContainerStateClient) EXPECT() *MockAgent_ContainerStateClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockAgent_ContainerStateClient) CloseAndRecv() (*common.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockAgent_ContainerStateClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockAgent_ContainerStateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAgent_ContainerStateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAgent_ContainerStateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_ContainerStateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAgent_ContainerStateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAgent_ContainerStateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_ContainerStateClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_ContainerStateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAgent_ContainerStateClient) Send(arg0 *common.ContainerStateListMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAgent_ContainerStateClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_ContainerStateClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_ContainerStateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAgent_ContainerStateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAgent_ContainerStateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAgent_ContainerStateClient)(nil).Trailer))
}

// MockAgent_ContainerLogClient is a mock of Agent_ContainerLogClient interface.
type MockAgent_ContainerLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_ContainerLogClientMockRecorder
}

// MockAgent_ContainerLogClientMockRecorder is the mock recorder for MockAgent_ContainerLogClient.
type MockAgent_ContainerLogClientMockRecorder struct {
	mock *MockAgent_ContainerLogClient
}

// NewMockAgent_ContainerLogClient creates a new mock instance.
func NewMockAgent_ContainerLogClient(ctrl *gomock.Controller) *MockAgent_ContainerLogClient {
	mock := &MockAgent_ContainerLogClient{ctrl: ctrl}
	mock.recorder = &MockAgent_ContainerLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_ContainerLogClient) EXPECT() *MockAgent_ContainerLogClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockAgent_ContainerLogClient) CloseAndRecv() (*common.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockAgent_ContainerLogClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockAgent_ContainerLogClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAgent_ContainerLogClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAgent_ContainerLogClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_ContainerLogClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAgent_ContainerLogClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAgent_ContainerLogClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_ContainerLogClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_ContainerLogClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAgent_ContainerLogClient) Send(arg0 *common.ContainerLogMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAgent_ContainerLogClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_ContainerLogClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_ContainerLogClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAgent_ContainerLogClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAgent_ContainerLogClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAgent_ContainerLogClient)(nil).Trailer))
}

// MockAgentServer is a mock of AgentServer interface.
type MockAgentServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServerMockRecorder
}

// MockAgentServerMockRecorder is the mock recorder for MockAgentServer.
type MockAgentServerMockRecorder struct {
	mock *MockAgentServer
}

// NewMockAgentServer creates a new mock instance.
func NewMockAgentServer(ctrl *gomock.Controller) *MockAgentServer {
	mock := &MockAgentServer{ctrl: ctrl}
	mock.recorder = &MockAgentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServer) EXPECT() *MockAgentServerMockRecorder {
	return m.recorder
}

// AbortUpdate mocks base method.
func (m *MockAgentServer) AbortUpdate(arg0 context.Context, arg1 *agent.AgentAbortUpdate) (*common.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortUpdate", arg0, arg1)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortUpdate indicates an expected call of AbortUpdate.
func (mr *MockAgentServerMockRecorder) AbortUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortUpdate", reflect.TypeOf((*MockAgentServer)(nil).AbortUpdate), arg0, arg1)
}

// Connect mocks base method.
func (m *MockAgentServer) Connect(arg0 *agent.AgentInfo, arg1 agent.Agent_ConnectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockAgentServerMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockAgentServer)(nil).Connect), arg0, arg1)
}

// ContainerLog mocks base method.
func (m *MockAgentServer) ContainerLog(arg0 agent.Agent_ContainerLogServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerLog indicates an expected call of ContainerLog.
func (mr *MockAgentServerMockRecorder) ContainerLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLog", reflect.TypeOf((*MockAgentServer)(nil).ContainerLog), arg0)
}

// ContainerState mocks base method.
func (m *MockAgentServer) ContainerState(arg0 agent.Agent_ContainerStateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerState indicates an expected call of ContainerState.
func (mr *MockAgentServerMockRecorder) ContainerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerState", reflect.TypeOf((*MockAgentServer)(nil).ContainerState), arg0)
}

// DeleteContainers mocks base method.
func (m *MockAgentServer) DeleteContainers(arg0 context.Context, arg1 *common.DeleteContainersRequest) (*common.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainers", arg0, arg1)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainers indicates an expected call of DeleteContainers.
func (mr *MockAgentServerMockRecorder) DeleteContainers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainers", reflect.TypeOf((*MockAgentServer)(nil).DeleteContainers), arg0, arg1)
}

// DeploymentStatus mocks base method.
func (m *MockAgentServer) DeploymentStatus(arg0 agent.Agent_DeploymentStatusServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploymentStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeploymentStatus indicates an expected call of DeploymentStatus.
func (mr *MockAgentServerMockRecorder) DeploymentStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentStatus", reflect.TypeOf((*MockAgentServer)(nil).DeploymentStatus), arg0)
}

// SecretList mocks base method.
func (m *MockAgentServer) SecretList(arg0 context.Context, arg1 *common.ListSecretsResponse) (*common.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretList", arg0, arg1)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList.
func (mr *MockAgentServerMockRecorder) SecretList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockAgentServer)(nil).SecretList), arg0, arg1)
}

// mustEmbedUnimplementedAgentServer mocks base method.
func (m *MockAgentServer) mustEmbedUnimplementedAgentServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServer")
}

// mustEmbedUnimplementedAgentServer indicates an expected call of mustEmbedUnimplementedAgentServer.
func (mr *MockAgentServerMockRecorder) mustEmbedUnimplementedAgentServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServer", reflect.TypeOf((*MockAgentServer)(nil).mustEmbedUnimplementedAgentServer))
}

// MockUnsafeAgentServer is a mock of UnsafeAgentServer interface.
type MockUnsafeAgentServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAgentServerMockRecorder
}

// MockUnsafeAgentServerMockRecorder is the mock recorder for MockUnsafeAgentServer.
type MockUnsafeAgentServerMockRecorder struct {
	mock *MockUnsafeAgentServer
}

// NewMockUnsafeAgentServer creates a new mock instance.
func NewMockUnsafeAgentServer(ctrl *gomock.Controller) *MockUnsafeAgentServer {
	mock := &MockUnsafeAgentServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAgentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAgentServer) EXPECT() *MockUnsafeAgentServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAgentServer mocks base method.
func (m *MockUnsafeAgentServer) mustEmbedUnimplementedAgentServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServer")
}

// mustEmbedUnimplementedAgentServer indicates an expected call of mustEmbedUnimplementedAgentServer.
func (mr *MockUnsafeAgentServerMockRecorder) mustEmbedUnimplementedAgentServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServer", reflect.TypeOf((*MockUnsafeAgentServer)(nil).mustEmbedUnimplementedAgentServer))
}

// MockAgent_ConnectServer is a mock of Agent_ConnectServer interface.
type MockAgent_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_ConnectServerMockRecorder
}

// MockAgent_ConnectServerMockRecorder is the mock recorder for MockAgent_ConnectServer.
type MockAgent_ConnectServerMockRecorder struct {
	mock *MockAgent_ConnectServer
}

// NewMockAgent_ConnectServer creates a new mock instance.
func NewMockAgent_ConnectServer(ctrl *gomock.Controller) *MockAgent_ConnectServer {
	mock := &MockAgent_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockAgent_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_ConnectServer) EXPECT() *MockAgent_ConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAgent_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_ConnectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_ConnectServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_ConnectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_ConnectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_ConnectServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAgent_ConnectServer) Send(arg0 *agent.AgentCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAgent_ConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAgent_ConnectServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAgent_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAgent_ConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAgent_ConnectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_ConnectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_ConnectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_ConnectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAgent_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAgent_ConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAgent_ConnectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAgent_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAgent_ConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAgent_ConnectServer)(nil).SetTrailer), arg0)
}

// MockAgent_DeploymentStatusServer is a mock of Agent_DeploymentStatusServer interface.
type MockAgent_DeploymentStatusServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_DeploymentStatusServerMockRecorder
}

// MockAgent_DeploymentStatusServerMockRecorder is the mock recorder for MockAgent_DeploymentStatusServer.
type MockAgent_DeploymentStatusServerMockRecorder struct {
	mock *MockAgent_DeploymentStatusServer
}

// NewMockAgent_DeploymentStatusServer creates a new mock instance.
func NewMockAgent_DeploymentStatusServer(ctrl *gomock.Controller) *MockAgent_DeploymentStatusServer {
	mock := &MockAgent_DeploymentStatusServer{ctrl: ctrl}
	mock.recorder = &MockAgent_DeploymentStatusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_DeploymentStatusServer) EXPECT() *MockAgent_DeploymentStatusServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAgent_DeploymentStatusServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAgent_DeploymentStatusServer) Recv() (*common.DeploymentStatusMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.DeploymentStatusMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_DeploymentStatusServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockAgent_DeploymentStatusServer) SendAndClose(arg0 *common.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockAgent_DeploymentStatusServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_DeploymentStatusServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAgent_DeploymentStatusServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAgent_DeploymentStatusServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAgent_DeploymentStatusServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAgent_DeploymentStatusServer)(nil).SetTrailer), arg0)
}

// MockAgent_ContainerStateServer is a mock of Agent_ContainerStateServer interface.
type MockAgent_ContainerStateServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_ContainerStateServerMockRecorder
}

// MockAgent_ContainerStateServerMockRecorder is the mock recorder for MockAgent_ContainerStateServer.
type MockAgent_ContainerStateServerMockRecorder struct {
	mock *MockAgent_ContainerStateServer
}

// NewMockAgent_ContainerStateServer creates a new mock instance.
func NewMockAgent_ContainerStateServer(ctrl *gomock.Controller) *MockAgent_ContainerStateServer {
	mock := &MockAgent_ContainerStateServer{ctrl: ctrl}
	mock.recorder = &MockAgent_ContainerStateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_ContainerStateServer) EXPECT() *MockAgent_ContainerStateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAgent_ContainerStateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_ContainerStateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAgent_ContainerStateServer) Recv() (*common.ContainerStateListMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.ContainerStateListMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAgent_ContainerStateServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_ContainerStateServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_ContainerStateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockAgent_ContainerStateServer) SendAndClose(arg0 *common.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockAgent_ContainerStateServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockAgent_ContainerStateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAgent_ContainerStateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_ContainerStateServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_ContainerStateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAgent_ContainerStateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAgent_ContainerStateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAgent_ContainerStateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAgent_ContainerStateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAgent_ContainerStateServer)(nil).SetTrailer), arg0)
}

// MockAgent_ContainerLogServer is a mock of Agent_ContainerLogServer interface.
type MockAgent_ContainerLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgent_ContainerLogServerMockRecorder
}

// MockAgent_ContainerLogServerMockRecorder is the mock recorder for MockAgent_ContainerLogServer.
type MockAgent_ContainerLogServerMockRecorder struct {
	mock *MockAgent_ContainerLogServer
}

// NewMockAgent_ContainerLogServer creates a new mock instance.
func NewMockAgent_ContainerLogServer(ctrl *gomock.Controller) *MockAgent_ContainerLogServer {
	mock := &MockAgent_ContainerLogServer{ctrl: ctrl}
	mock.recorder = &MockAgent_ContainerLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent_ContainerLogServer) EXPECT() *MockAgent_ContainerLogServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAgent_ContainerLogServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgent_ContainerLogServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAgent_ContainerLogServer) Recv() (*common.ContainerLogMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.ContainerLogMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAgent_ContainerLogServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAgent_ContainerLogServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgent_ContainerLogServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockAgent_ContainerLogServer) SendAndClose(arg0 *common.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockAgent_ContainerLogServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockAgent_ContainerLogServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAgent_ContainerLogServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgent_ContainerLogServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgent_ContainerLogServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAgent_ContainerLogServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAgent_ContainerLogServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAgent_ContainerLogServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAgent_ContainerLogServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAgent_ContainerLogServer)(nil).SetTrailer), arg0)
}
