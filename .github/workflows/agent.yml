name: agent
on:
  push:
    paths:
      - agent/**
      - .github/workflows/agent.yml
  pull_request:
    paths:
      - agent/**
      - .github/workflows/agent.yml

permissions:
  contents: read
  pull-requests: read
  packages: write

env:
  # Environments
  GOFLAGS: "-buildvcs=false"

jobs:

  lint:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16
    defaults:
      run:
        working-directory: agent
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Load go mod
      run: go mod tidy
    - name: Run golangci-lint
      run: make lint

  security:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16
    defaults:
      run:
        working-directory: agent
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Load go mod
      run: go mod tidy
    - name: Run gosec
      run: make security

  test:
    runs-on: ubuntu-20.04
    needs: [security, lint]
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16
    outputs:
      tag: ${{ steps.settag.outputs.tag }}
      version: ${{ steps.settag.outputs.version }}
    defaults:
      run:
        working-directory: agent
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Load go mod
      run: go mod tidy
    
    # fixes: fatal: unsafe repository
    - name: Adding workspace
      run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Run unit tests with coverage
      run: make test-unit-with-coverage

    - name: Upload coverage reports to Codecov with GitHub Action
      uses: codecov/codecov-action@v3

    - name: Setting a buildtag
      id: settag
      working-directory: .github/workflows
      run: ./pipeline_set_output_tag.sh $GITHUB_REF_TYPE ${{ github.ref_name }} ${{ github.sha }}

  build:
    runs-on: ubuntu-20.04
    needs: [test]
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16
    if: github.ref_name == 'develop' || github.ref_name == 'main' || github.ref_type == 'tag'
    defaults:
      run:
        working-directory: agent
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3

      # fixes: fatal: unsafe repository
      - name: Adding workspace
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Load go mod
        run: go mod tidy

      - name: Compile
        run: make compile-both
        env:
          VERSION: ${{ needs.test.outputs.version }}

      - name: Docker build with a fitting tag
        run: make image_version=${{ needs.test.outputs.tag }} bbpb


  sign_image:
    runs-on: ubuntu-20.04
    if: github.ref_name == 'develop' || github.ref_name == 'main' || github.ref_type == 'tag'
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16
    needs: [build,test]
    environment: Workflow - Protected
    steps:
    - name: Write signing key to disk
      run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Sign container image dagent
      run: |
        cosign sign --key cosign.key ghcr.io/dyrector-io/dyrectorio/agent/dagent:${{ needs.test.outputs.tag }}
      env:
        COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
    - name: Sign container image crane
      run: |
        cosign sign --key cosign.key ghcr.io/dyrector-io/dyrectorio/agent/crane:${{ needs.test.outputs.tag }}
      env:
        COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
