name: golang
on:
  push:
    branches:
      - develop
      - main
    paths:
      - golang/**
      - .github/workflows/golang.yml
  pull_request:
    paths:
      - golang/**
      - .github/workflows/golang.yml

permissions:
  contents: read
  pull-requests: read
  packages: write

env:
  # Environments
  GOFLAGS: "-buildvcs=false"

jobs:
  lint:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
    defaults:
      run:
        working-directory: golang
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Load go mod
        run: go mod tidy
      - name: Run golangci-lint
        run: make lint
  security:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
    defaults:
      run:
        working-directory: golang
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Load go mod
        run: go mod tidy
      - name: Run gosec
        run: make security
  test:
    runs-on: ubuntu-20.04
    needs: [security, lint]
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
    outputs:
      tag: ${{ steps.settag.outputs.tag }}
      version: ${{ steps.settag.outputs.version }}
    defaults:
      run:
        working-directory: golang
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Load go mod
        run: go mod tidy

      # fixes: fatal: unsafe repository
      - name: Adding workspace
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Run unit tests with coverage
        run: make test-unit-with-coverage

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3

      - name: Setting a buildtag
        id: settag
        working-directory: .github/workflows
        run: ./pipeline_set_output_tag.sh $GITHUB_REF_TYPE ${{ github.ref_name }} ${{ github.sha }}

  # job: Test e2e
  test_e2e:
    runs-on: ubuntu-20.04
    needs: test
    container:
      image: dyrectorio/playwright:1.26.0-alpha-aug-23-2022
      volumes:
        - /var/run/docker.sock:/var/run/docker
      ports:
        - 3000:3000 # crux-ui
        - 5000:5000 # crux-agent
        - 5001:5001 # crux-api
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install curl
        run: |
          apt-get install -y curl

      - name: Setup containers
        working-directory: web/crux-ui
        run: |
          docker network create crux-intranet
          ./setup_e2e_env.sh

      - name: Setup crux
        working-directory: web/crux
        run: |
          npm i
          npx prisma generate
          npx prisma migrate deploy
          npm run build

      - name: Run tests
        working-directory: web
        env:
          HUB_PROXY_URL: ${{ secrets.HUB_PROXY_URL }}
          HUB_PROXY_TOKEN: ${{ secrets.HUB_PROXY_TOKEN }}
        run: |
          cd crux
          npm run start:prod &
          cd ../crux-ui
          npm i
          npm run disable-telemetry
          npm run build
          npx playwright install
          npm run test:e2e

      - uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: web/crux-ui/e2e/screenshots/

  build:
    runs-on: ubuntu-20.04
    needs: [test]
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
    if: github.ref_name == 'develop' || github.ref_name == 'main' || github.ref_type == 'tag'
    defaults:
      run:
        working-directory: golang
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3

      # fixes: fatal: unsafe repository
      - name: Adding workspace
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Load go mod
        run: go mod tidy

      - name: Compile
        run: make compile-agents
        env:
          VERSION: ${{ needs.test.outputs.version }}

      - name: Docker build with a fitting tag
        run: make image_version=${{ needs.test.outputs.tag }} bbpb
  sign_image:
    runs-on: ubuntu-20.04
    if: github.ref_name == 'develop' || github.ref_name == 'main' || github.ref_type == 'tag'
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
    needs: [build, test]
    environment: Workflow - Protected
    steps:
      - name: Write signing key to disk
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Sign container image dagent
        run: |
          cosign sign --key cosign.key ghcr.io/dyrector-io/dyrectorio/agent/dagent:${{ needs.test.outputs.tag }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
      - name: Sign container image crane
        run: |
          cosign sign --key cosign.key ghcr.io/dyrector-io/dyrectorio/agent/crane:${{ needs.test.outputs.tag }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
