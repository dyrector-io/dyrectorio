name: web-crux-ui
on:
  push:
    branches:
      - develop
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: read
  packages: read

env:
  # Environments
  REGISTRY: ghcr.io
  IMAGE_NAME: dyrector-io/dyrectorio/web/crux-ui
  WORKING_DIRECTORY: web/crux-ui

jobs:
  check:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
      volumes:
        - /var/run/docker.sock:/var/run/docker
    outputs:
      tag: ${{ steps.settag.outputs.tag }}
      version: ${{ steps.settag.outputs.version }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          npm ci --arch=x64 --platform=linuxmusl --cache .npm --prefer-offline --no-fund

      - name: Lint and Build
        run: |
          npm run lint
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production

      - name: Setting a buildtag
        id: settag
        working-directory: .github/workflows
        run: ./pipeline_set_output_tag.sh $GITHUB_REF_TYPE ${{ github.ref_name }} ${{ github.sha }}

  # job: Test e2e
  test_e2e:
    runs-on: self-hosted
    needs: check
    container:
      image: dyrectorio/playwright:1.28.1
      volumes:
        - /var/run/docker.sock:/var/run/docker
      ports:
        - 3000:3000 # crux-ui
        - 5000:5000 # crux-agent
        - 5001:5001 # crux-api
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install curl
        run: |
          apt-get install -y curl

      - name: Setup containers
        working-directory: web/crux-ui
        run: |
          docker network create crux-intranet || true
          ./setup_e2e_env.sh

      - name: Setup crux
        working-directory: web/crux
        run: |
          npm i
          npx prisma generate
          npx prisma migrate deploy
          npm run build

      - name: Run tests
        working-directory: web
        env:
          HUB_PROXY_URL: ${{ secrets.HUB_PROXY_URL }}
          HUB_PROXY_TOKEN: ${{ secrets.HUB_PROXY_TOKEN }}
        run: |
          cd crux
          npm run start:prod &
          cd ../crux-ui
          npm i
          npm run disable-telemetry
          npm run build
          npx playwright install
          npm run test:e2e

      - uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: web/crux-ui/e2e/screenshots/

  # job: Build image
  build_image:
    runs-on: ubuntu-20.04
    needs: [test_e2e, check]
    container: docker:latest
    if: github.ref_name == 'develop' || github.ref_name == 'main' || github.ref_type == 'tag'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # if tag isn't the version set in package.json, job will fail
      - name: Check tag version correctness
        if: github.ref_type == 'tag'
        working-directory: .github/workflows
        run: ./check_version.sh ${{ needs.check.outputs.version }} ../../${{ env.WORKING_DIRECTORY }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Docker build
        run: |
          docker build . -t ${REGISTRY}/${IMAGE_NAME}:${{ needs.check.outputs.tag }}
        env:
          CRUX_UI_IMAGE_TAG: ${{ needs.check.outputs.tag }}
          CRUX_VERSION: ${{ needs.check.outputs.version }}

      - name: Docker tag
        run: |
          docker tag ${REGISTRY}/${IMAGE_NAME}:${{ needs.check.outputs.tag }} ${REGISTRY}/${IMAGE_NAME}:${{ needs.check.outputs.version }}
        if: github.ref_type == 'tag'

      - name: Docker push
        run: |
          docker image push -a ${REGISTRY}/${IMAGE_NAME}

  sign_image:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16-4
    needs: [build_image, check]
    environment: Workflow - Protected
    steps:
      - name: Write signing key to disk
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Sign container image
        run: |
          cosign sign --key cosign.key ${REGISTRY}/${IMAGE_NAME}:${{ needs.check.outputs.tag }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"

      - name: Sign container image
        if: github.ref_type == 'tag'
        run: |
          cosign sign --key cosign.key ${REGISTRY}/${IMAGE_NAME}:${{ needs.check.outputs.version }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
