name: web-crux
on:
  push:
    paths:
      - web/crux/**
      - .github/workflows/web-crux.yml

env:
  # Environments
  REGISTRY: ghcr.io
  IMAGE_NAME: dyrector-io/dyrectorio/web/crux
  WORKING_DIRECTORY: web/crux
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  CRUX_DOMAIN: DNS:localhost
  CRUX_DOMAIN_ALTS: IP:192.168.1.30
  KRATOS_URL: http://192.168.1.30:8000/kratos
  CRUX_UI_URL: http://172.17.0.1:8000
  TIME_ZONE: Europe/Budapest
  #Â Default GitHub variables
  CRUX_VERSION: ${{ github.sha }}
  CRUX_IMAGE_TAG: ${{ github.ref_name }}
  # Secrets
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  SENDGRID_KEY: ${{ secrets.SENDGRID_KEY }}
  FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
  FROM_NAME: ${{ secrets.FROM_NAME }}

permissions:
  contents: read
  pull-requests: read
  packages: read

jobs:
  # job: Linting and testing the code
  prerequirements:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    container:
      image: node:17.1-alpine
    outputs:
      tag: ${{ steps.settag.outputs.tag }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: npm ci --arch=x64 --platform=linuxmusl --cache .npm --prefer-offline

    - name: Linting the code
      run: npm run lint

    - name: Generate prisma & build the application
      run: |
        npx prisma generate
        npm run build --if-present
        npm prune --production

    - name: Upload /dist artifact
      uses: actions/upload-artifact@v3
      with:
        name: crux-web-dist
        path: ${{ env.WORKING_DIRECTORY }}/dist
        retention-days: 1

    - name: Setting a buildtag
      id: settag
      working-directory: .github/workflows
      run: ./pipeline_set_output_tag.sh $GITHUB_REF_TYPE ${{ github.ref_name }} ${{ github.sha }}

  # job: Build image
  build_image:
    runs-on: ubuntu-20.04
    needs: prerequirements
    container: docker:latest
    if: github.ref_name == 'develop' || github.ref_name == 'main'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download /dist artifact
      uses: actions/download-artifact@v3
      with:
        name: crux-web-dist
        path: ${{ env.WORKING_DIRECTORY }}/dist

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Docker build and push
      run: |
        docker-compose build
        docker-compose push crux
      env:
        CRUX_IMAGE_TAG: ${{ needs.prerequirements.outputs.tag }}

  sign_image:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/dyrector-io/dyrectorio/alpine-proto:3.16
    needs: [build_image,prerequirements]
    environment: Workflow - Protected
    steps:
    - name: Write signing key to disk
      run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Sign container image
      run: |
        cosign sign --key cosign.key ghcr.io/dyrector-io/dyrectorio/web/crux:${{ needs.prerequirements.outputs.tag }}
      env:
        COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
