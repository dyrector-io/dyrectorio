basePath: /v1
definitions:
  blkiodev.ThrottleDevice:
    properties:
      path:
        type: string
      rate:
        type: integer
    type: object
  blkiodev.WeightDevice:
    properties:
      path:
        type: string
      weight:
        type: integer
    type: object
  container.Config:
    properties:
      argsEscaped:
        description: True if command is already escaped (meaning treat as a command
          line) (Windows specific).
        type: boolean
      attachStderr:
        description: Attach the standard error
        type: boolean
      attachStdin:
        description: Attach the standard input, makes possible user interaction
        type: boolean
      attachStdout:
        description: Attach the standard output
        type: boolean
      cmd:
        description: Applicable to UNIX platforms
        items:
          type: string
        type: array
      domainname:
        description: Domainname
        type: string
      entrypoint:
        description: Applicable to UNIX platforms
        items:
          type: string
        type: array
      env:
        description: List of environment variable to set in the container
        items:
          type: string
        type: array
      exposedPorts:
        $ref: '#/definitions/nat.PortSet'
        description: List of exposed ports
      healthcheck:
        $ref: '#/definitions/container.HealthConfig'
        description: Healthcheck describes how to check the container is healthy
      hostname:
        description: Hostname
        type: string
      image:
        description: Name of the image as it was passed by the operator (e.g. could
          be symbolic)
        type: string
      labels:
        additionalProperties:
          type: string
        description: List of labels set to this container
        type: object
      macAddress:
        description: Mac Address of the container
        type: string
      networkDisabled:
        description: Is network disabled
        type: boolean
      onBuild:
        description: ONBUILD metadata that were defined on the image Dockerfile
        items:
          type: string
        type: array
      openStdin:
        description: Open stdin
        type: boolean
      shell:
        description: Applicable to UNIX platforms
        items:
          type: string
        type: array
      stdinOnce:
        description: If true, close stdin after the 1 attached client disconnects.
        type: boolean
      stopSignal:
        description: Signal to stop a container
        type: string
      stopTimeout:
        description: Timeout (in seconds) to stop a container
        type: integer
      tty:
        description: Attach standard streams to a tty, including stdin if it is not
          closed.
        type: boolean
      user:
        description: User that will run the command(s) inside the container, also
          support user:group
        type: string
      volumes:
        additionalProperties:
          type: object
        description: List of volumes (mounts) used for the container
        type: object
      workingDir:
        description: Current directory (PWD) in the command will be launched
        type: string
    type: object
  container.DeviceMapping:
    properties:
      cgroupPermissions:
        type: string
      pathInContainer:
        type: string
      pathOnHost:
        type: string
    type: object
  container.DeviceRequest:
    properties:
      capabilities:
        description: An OR list of AND lists of device capabilities (e.g. "gpu")
        items:
          items:
            type: string
          type: array
        type: array
      count:
        description: Number of devices to request (-1 = All)
        type: integer
      deviceIDs:
        description: List of device IDs as recognizable by the device driver
        items:
          type: string
        type: array
      driver:
        description: Name of device driver
        type: string
      options:
        additionalProperties:
          type: string
        description: Options to pass onto the device driver
        type: object
    type: object
  container.HealthConfig:
    properties:
      interval:
        description: Zero means to inherit. Durations are expressed as integer nanoseconds.
        type: integer
      retries:
        description: |-
          Retries is the number of consecutive failures needed to consider a container as unhealthy.
          Zero means inherit.
        type: integer
      startPeriod:
        description: Zero means to inherit. Durations are expressed as integer nanoseconds.
        type: integer
      test:
        description: |-
          Test is the test to perform to check that the container is healthy.
          An empty slice means to inherit the default.
          The options are:
          {} : inherit healthcheck
          {"NONE"} : disable healthcheck
          {"CMD", args...} : exec arguments directly
          {"CMD-SHELL", command} : run command with system's default shell
        items:
          type: string
        type: array
      timeout:
        description: Zero means to inherit. Durations are expressed as integer nanoseconds.
        type: integer
    type: object
  container.HostConfig:
    properties:
      CpuCount:
        description: Applicable to Windows
        type: integer
      CpuPercent:
        description: CPU percent
        type: integer
      CpuPeriod:
        description: CPU CFS (Completely Fair Scheduler) period
        type: integer
      CpuQuota:
        description: CPU CFS (Completely Fair Scheduler) quota
        type: integer
      CpuRealtimePeriod:
        description: CPU real-time period
        type: integer
      CpuRealtimeRuntime:
        description: CPU real-time runtime
        type: integer
      CpuShares:
        description: Applicable to all platforms
        type: integer
      Dns:
        description: List of DNS server to lookup
        items:
          type: string
        type: array
      DnsOptions:
        description: List of DNSOption to look for
        items:
          type: string
        type: array
      DnsSearch:
        description: List of DNSSearch to look for
        items:
          type: string
        type: array
      NanoCpus:
        description: CPU quota in units of 10<sup>-9</sup> CPUs.
        type: integer
      autoRemove:
        description: Automatically remove container when it exits
        type: boolean
      binds:
        description: Applicable to all platforms
        items:
          type: string
        type: array
      blkioDeviceReadBps:
        items:
          $ref: '#/definitions/blkiodev.ThrottleDevice'
        type: array
      blkioDeviceReadIOps:
        items:
          $ref: '#/definitions/blkiodev.ThrottleDevice'
        type: array
      blkioDeviceWriteBps:
        items:
          $ref: '#/definitions/blkiodev.ThrottleDevice'
        type: array
      blkioDeviceWriteIOps:
        items:
          $ref: '#/definitions/blkiodev.ThrottleDevice'
        type: array
      blkioWeight:
        description: Block IO weight (relative weight vs. other containers)
        type: integer
      blkioWeightDevice:
        items:
          $ref: '#/definitions/blkiodev.WeightDevice'
        type: array
      capAdd:
        description: Applicable to UNIX platforms
        items:
          type: string
        type: array
      capDrop:
        description: Applicable to UNIX platforms
        items:
          type: string
        type: array
      cgroup:
        description: Cgroup to use for the container
        type: string
      cgroupParent:
        description: Applicable to UNIX platforms
        type: string
      cgroupnsMode:
        description: Cgroup namespace mode to use for the container
        type: string
      consoleSize:
        description: Applicable to Windows
        items:
          type: integer
        type: array
      containerIDFile:
        description: File (path) where the containerId is written
        type: string
      cpusetCpus:
        description: CpusetCpus 0-2, 0,1
        type: string
      cpusetMems:
        description: CpusetMems 0-2, 0,1
        type: string
      deviceCgroupRules:
        description: List of rule to be added to the device cgroup
        items:
          type: string
        type: array
      deviceRequests:
        description: List of device requests for device drivers
        items:
          $ref: '#/definitions/container.DeviceRequest'
        type: array
      devices:
        description: List of devices to map inside the container
        items:
          $ref: '#/definitions/container.DeviceMapping'
        type: array
      extraHosts:
        description: List of extra hosts
        items:
          type: string
        type: array
      groupAdd:
        description: List of additional groups that the container process will run
          as
        items:
          type: string
        type: array
      init:
        description: Run a custom init inside the container, if null, use the daemon's
          configured settings
        type: boolean
      iomaximumBandwidth:
        description: Maximum IO in bytes per second for the container system drive
        type: integer
      iomaximumIOps:
        description: Maximum IOps for the container system drive
        type: integer
      ipcMode:
        description: IPC namespace to use for the container
        type: string
      isolation:
        description: Isolation technology of the container (e.g. default, hyperv)
        type: string
      kernelMemory:
        description: 'Kernel memory limit (in bytes), Deprecated: kernel 5.4 deprecated
          kmem.limit_in_bytes'
        type: integer
      kernelMemoryTCP:
        description: Hard limit for kernel TCP buffer memory (in bytes)
        type: integer
      links:
        description: List of links (in the name:alias form)
        items:
          type: string
        type: array
      logConfig:
        $ref: '#/definitions/container.LogConfig'
        description: Configuration of the logs for this container
      maskedPaths:
        description: MaskedPaths is the list of paths to be masked inside the container
          (this overrides the default set of paths)
        items:
          type: string
        type: array
      memory:
        description: Memory limit (in bytes)
        type: integer
      memoryReservation:
        description: Memory soft limit (in bytes)
        type: integer
      memorySwap:
        description: Total memory usage (memory + swap); set `-1` to enable unlimited
          swap
        type: integer
      memorySwappiness:
        description: Tuning container memory swappiness behaviour
        type: integer
      mounts:
        description: Mounts specs used by the container
        items:
          $ref: '#/definitions/mount.Mount'
        type: array
      networkMode:
        description: Network mode to use for the container
        type: string
      oomKillDisable:
        description: Whether to disable OOM Killer or not
        type: boolean
      oomScoreAdj:
        description: Container preference for OOM-killing
        type: integer
      pidMode:
        description: PID namespace to use for the container
        type: string
      pidsLimit:
        description: Setting PIDs limit for a container; Set `0` or `-1` for unlimited,
          or `null` to not change.
        type: integer
      portBindings:
        $ref: '#/definitions/nat.PortMap'
        description: Port mapping between the exposed port (container) and the host
      privileged:
        description: Is the container in privileged mode
        type: boolean
      publishAllPorts:
        description: Should docker publish all exposed port for the container
        type: boolean
      readonlyPaths:
        description: ReadonlyPaths is the list of paths to be set as read-only inside
          the container (this overrides the default set of paths)
        items:
          type: string
        type: array
      readonlyRootfs:
        description: Is the container root filesystem in read-only
        type: boolean
      restartPolicy:
        $ref: '#/definitions/container.RestartPolicy'
        description: Restart policy to be used for the container
      runtime:
        description: Runtime to use with this container
        type: string
      securityOpt:
        description: List of string values to customize labels for MLS systems, such
          as SELinux.
        items:
          type: string
        type: array
      shmSize:
        description: Total shm memory usage
        type: integer
      storageOpt:
        additionalProperties:
          type: string
        description: Storage driver options per container.
        type: object
      sysctls:
        additionalProperties:
          type: string
        description: List of Namespaced sysctls used for the container
        type: object
      tmpfs:
        additionalProperties:
          type: string
        description: List of tmpfs (mounts) used for the container
        type: object
      ulimits:
        description: List of ulimits to be set in the container
        items:
          $ref: '#/definitions/units.Ulimit'
        type: array
      usernsMode:
        description: The user namespace to use for the container
        type: string
      utsmode:
        description: UTS namespace to use for the container
        type: string
      volumeDriver:
        description: Name of the volume driver used to mount volumes
        type: string
      volumesFrom:
        description: List of volumes to take from other container
        items:
          type: string
        type: array
    type: object
  container.LogConfig:
    properties:
      config:
        additionalProperties:
          type: string
        type: object
      type:
        type: string
    type: object
  container.RestartPolicy:
    properties:
      maximumRetryCount:
        type: integer
      name:
        type: string
    type: object
  containerbuilder.PortBinding:
    properties:
      exposedPort:
        maximum: 65535
        minimum: 0
        type: integer
      portBinding:
        maximum: 65535
        minimum: 0
        type: integer
    required:
    - exposedPort
    - portBinding
    type: object
  containerbuilder.PortRange:
    properties:
      from:
        maximum: 65535
        minimum: 0
        type: integer
      to:
        maximum: 65535
        type: integer
    required:
    - from
    - to
    type: object
  containerbuilder.PortRangeBinding:
    properties:
      external:
        $ref: '#/definitions/containerbuilder.PortRange'
      internal:
        $ref: '#/definitions/containerbuilder.PortRange'
    required:
    - external
    - internal
    type: object
  containerbuilder.RegistryAuth:
    properties:
      name:
        type: string
      password:
        type: string
      url:
        type: string
      user:
        type: string
    required:
    - name
    - password
    - url
    - user
    type: object
  github.com_dyrector-io_dyrectorio_agent_pkg_api_v1.Probe:
    properties:
      path:
        type: string
    type: object
  github.com_dyrector-io_dyrectorio_agent_pkg_api_v1.Volume:
    properties:
      class:
        description: |-
          kubernetes only
          storage classes depend on the cloud providers
          `kubectl get storageclasses.storage.k8s.io`
          usable values could be returned to the UI letting the user change
        type: string
      name:
        description: name of the volume, the prefix will be the pod using it
        type: string
      path:
        description: mount path of the given deployment
        type: string
      size:
        description: |-
          required size, not guaranteed that the provisioned size will match
          some PVCs support dynamic expansion/shrink, others not
        type: string
      type:
        description: |-
          type of the volume: RO,RW,RWX,mem,tmp
          RO: readonly
          RW: readwrite once normal (default)
          RWX: readwrite many, shared volume within the instance
          mem: use inmemory tmpfs
          tmp: use tmpfs, with disk
        type: string
    required:
    - path
    type: object
  intstr.IntOrString:
    properties:
      intVal:
        type: integer
      strVal:
        type: string
      type:
        type: integer
    type: object
  k8s.Namespace:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  k8s.io_api_core_v1.Probe:
    properties:
      exec:
        $ref: '#/definitions/v1.ExecAction'
        description: |-
          Exec specifies the action to take.
          +optional
      failureThreshold:
        description: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
        type: integer
      grpc:
        $ref: '#/definitions/v1.GRPCAction'
        description: |-
          GRPC specifies an action involving a GRPC port.
          This is an alpha field and requires enabling GRPCContainerProbe feature gate.
          +featureGate=GRPCContainerProbe
          +optional
      httpGet:
        $ref: '#/definitions/v1.HTTPGetAction'
        description: |-
          HTTPGet specifies the http request to perform.
          +optional
      initialDelaySeconds:
        description: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        type: integer
      periodSeconds:
        description: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
        type: integer
      successThreshold:
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          +optional
        type: integer
      tcpSocket:
        $ref: '#/definitions/v1.TCPSocketAction'
        description: |-
          TCPSocket specifies an action involving a TCP port.
          +optional
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
          value overrides the value provided by the pod spec.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
          Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
          +optional
        type: integer
      timeoutSeconds:
        description: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        type: integer
    type: object
  k8s.io_api_core_v1.Volume:
    properties:
      awsElasticBlockStore:
        $ref: '#/definitions/v1.AWSElasticBlockStoreVolumeSource'
        description: |-
          AWSElasticBlockStore represents an AWS Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
      azureDisk:
        $ref: '#/definitions/v1.AzureDiskVolumeSource'
        description: |-
          AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
          +optional
      azureFile:
        $ref: '#/definitions/v1.AzureFileVolumeSource'
        description: |-
          AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
          +optional
      cephfs:
        $ref: '#/definitions/v1.CephFSVolumeSource'
        description: |-
          CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
          +optional
      cinder:
        $ref: '#/definitions/v1.CinderVolumeSource'
        description: |-
          Cinder represents a cinder volume attached and mounted on kubelets host machine.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
      configMap:
        $ref: '#/definitions/v1.ConfigMapVolumeSource'
        description: |-
          ConfigMap represents a configMap that should populate this volume
          +optional
      csi:
        $ref: '#/definitions/v1.CSIVolumeSource'
        description: |-
          CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
          +optional
      downwardAPI:
        $ref: '#/definitions/v1.DownwardAPIVolumeSource'
        description: |-
          DownwardAPI represents downward API about the pod that should populate this volume
          +optional
      emptyDir:
        $ref: '#/definitions/v1.EmptyDirVolumeSource'
        description: |-
          EmptyDir represents a temporary directory that shares a pod's lifetime.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
      ephemeral:
        $ref: '#/definitions/v1.EphemeralVolumeSource'
        description: |-
          Ephemeral represents a volume that is handled by a cluster storage driver.
          The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
          and deleted when the pod is removed.

          Use this if:
          a) the volume is only needed while the pod runs,
          b) features of normal volumes like restoring from snapshot or capacity
             tracking are needed,
          c) the storage driver is specified through a storage class, and
          d) the storage driver supports dynamic volume provisioning through
             a PersistentVolumeClaim (see EphemeralVolumeSource for more
             information on the connection between this volume type
             and PersistentVolumeClaim).

          Use PersistentVolumeClaim or one of the vendor-specific
          APIs for volumes that persist for longer than the lifecycle
          of an individual pod.

          Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
          be used that way - see the documentation of the driver for
          more information.

          A pod can use both types of ephemeral volumes and
          persistent volumes at the same time.

          +optional
      fc:
        $ref: '#/definitions/v1.FCVolumeSource'
        description: |-
          FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
          +optional
      flexVolume:
        $ref: '#/definitions/v1.FlexVolumeSource'
        description: |-
          FlexVolume represents a generic volume resource that is
          provisioned/attached using an exec based plugin.
          +optional
      flocker:
        $ref: '#/definitions/v1.FlockerVolumeSource'
        description: |-
          Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
          +optional
      gcePersistentDisk:
        $ref: '#/definitions/v1.GCEPersistentDiskVolumeSource'
        description: |-
          GCEPersistentDisk represents a GCE Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
      gitRepo:
        $ref: '#/definitions/v1.GitRepoVolumeSource'
        description: |-
          GitRepo represents a git repository at a particular revision.
          DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
          EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
          into the Pod's container.
          +optional
      glusterfs:
        $ref: '#/definitions/v1.GlusterfsVolumeSource'
        description: |-
          Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md
          +optional
      hostPath:
        $ref: '#/definitions/v1.HostPathVolumeSource'
        description: |-
          HostPath represents a pre-existing file or directory on the host
          machine that is directly exposed to the container. This is generally
          used for system agents or other privileged things that are allowed
          to see the host machine. Most containers will NOT need this.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          ---
          TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
          mount host directories as read/write.
          +optional
      iscsi:
        $ref: '#/definitions/v1.ISCSIVolumeSource'
        description: |-
          ISCSI represents an ISCSI Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://examples.k8s.io/volumes/iscsi/README.md
          +optional
      name:
        description: |-
          Volume's name.
          Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      nfs:
        $ref: '#/definitions/v1.NFSVolumeSource'
        description: |-
          NFS represents an NFS mount on the host that shares a pod's lifetime
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
      persistentVolumeClaim:
        $ref: '#/definitions/v1.PersistentVolumeClaimVolumeSource'
        description: |-
          PersistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
          +optional
      photonPersistentDisk:
        $ref: '#/definitions/v1.PhotonPersistentDiskVolumeSource'
        description: PhotonPersistentDisk represents a PhotonController persistent
          disk attached and mounted on kubelets host machine
      portworxVolume:
        $ref: '#/definitions/v1.PortworxVolumeSource'
        description: |-
          PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
          +optional
      projected:
        $ref: '#/definitions/v1.ProjectedVolumeSource'
        description: Items for all in one resources secrets, configmaps, and downward
          API
      quobyte:
        $ref: '#/definitions/v1.QuobyteVolumeSource'
        description: |-
          Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
          +optional
      rbd:
        $ref: '#/definitions/v1.RBDVolumeSource'
        description: |-
          RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/rbd/README.md
          +optional
      scaleIO:
        $ref: '#/definitions/v1.ScaleIOVolumeSource'
        description: |-
          ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
          +optional
      secret:
        $ref: '#/definitions/v1.SecretVolumeSource'
        description: |-
          Secret represents a secret that should populate this volume.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
      storageos:
        $ref: '#/definitions/v1.StorageOSVolumeSource'
        description: |-
          StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
          +optional
      vsphereVolume:
        $ref: '#/definitions/v1.VsphereVirtualDiskVolumeSource'
        description: |-
          VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
          +optional
    type: object
  mount.BindOptions:
    properties:
      nonRecursive:
        type: boolean
      propagation:
        type: string
    type: object
  mount.Driver:
    properties:
      name:
        type: string
      options:
        additionalProperties:
          type: string
        type: object
    type: object
  mount.Mount:
    properties:
      bindOptions:
        $ref: '#/definitions/mount.BindOptions'
      consistency:
        type: string
      readOnly:
        type: boolean
      source:
        description: |-
          Source specifies the name of the mount. Depending on mount type, this
          may be a volume name or a host path, or even ignored.
          Source is not supported for tmpfs (must be an empty value)
        type: string
      target:
        type: string
      tmpfsOptions:
        $ref: '#/definitions/mount.TmpfsOptions'
      type:
        type: string
      volumeOptions:
        $ref: '#/definitions/mount.VolumeOptions'
    type: object
  mount.TmpfsOptions:
    properties:
      mode:
        description: Mode of the tmpfs upon creation
        type: integer
      sizeBytes:
        description: |-
          Size sets the size of the tmpfs, in bytes.

          This will be converted to an operating system specific value
          depending on the host. For example, on linux, it will be converted to
          use a 'k', 'm' or 'g' syntax. BSD, though not widely supported with
          docker, uses a straight byte value.

          Percentages are not supported.
        type: integer
    type: object
  mount.VolumeOptions:
    properties:
      driverConfig:
        $ref: '#/definitions/mount.Driver'
      labels:
        additionalProperties:
          type: string
        type: object
      noCopy:
        type: boolean
    type: object
  nat.PortBinding:
    properties:
      HostIp:
        description: HostIP is the host IP Address
        type: string
      hostPort:
        description: HostPort is the host port number
        type: string
    type: object
  nat.PortMap:
    additionalProperties:
      items:
        $ref: '#/definitions/nat.PortBinding'
      type: array
    type: object
  nat.PortSet:
    additionalProperties:
      type: object
    type: object
  network.Address:
    properties:
      addr:
        type: string
      prefixLen:
        type: integer
    type: object
  network.EndpointIPAMConfig:
    properties:
      ipv4Address:
        type: string
      ipv6Address:
        type: string
      linkLocalIPs:
        items:
          type: string
        type: array
    type: object
  network.EndpointSettings:
    properties:
      aliases:
        items:
          type: string
        type: array
      driverOpts:
        additionalProperties:
          type: string
        type: object
      endpointID:
        type: string
      gateway:
        type: string
      globalIPv6Address:
        type: string
      globalIPv6PrefixLen:
        type: integer
      ipaddress:
        type: string
      ipamconfig:
        $ref: '#/definitions/network.EndpointIPAMConfig'
        description: Configurations
      ipprefixLen:
        type: integer
      ipv6Gateway:
        type: string
      links:
        items:
          type: string
        type: array
      macAddress:
        type: string
      networkID:
        description: Operational data
        type: string
    type: object
  resource.Quantity:
    properties:
      Format:
        type: string
    type: object
  types.ContainerJSON:
    properties:
      Id:
        type: string
      appArmorProfile:
        type: string
      args:
        items:
          type: string
        type: array
      config:
        $ref: '#/definitions/container.Config'
      created:
        type: string
      driver:
        type: string
      execIDs:
        items:
          type: string
        type: array
      graphDriver:
        $ref: '#/definitions/types.GraphDriverData'
      hostConfig:
        $ref: '#/definitions/container.HostConfig'
      hostnamePath:
        type: string
      hostsPath:
        type: string
      image:
        type: string
      logPath:
        type: string
      mountLabel:
        type: string
      mounts:
        items:
          $ref: '#/definitions/types.MountPoint'
        type: array
      name:
        type: string
      networkSettings:
        $ref: '#/definitions/types.NetworkSettings'
      node:
        $ref: '#/definitions/types.ContainerNode'
        description: Node is only propagated by Docker Swarm standalone API
      path:
        type: string
      platform:
        type: string
      processLabel:
        type: string
      resolvConfPath:
        type: string
      restartCount:
        type: integer
      sizeRootFs:
        type: integer
      sizeRw:
        type: integer
      state:
        $ref: '#/definitions/types.ContainerState'
    type: object
  types.ContainerNode:
    properties:
      IP:
        type: string
      addr:
        type: string
      cpus:
        type: integer
      id:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      memory:
        type: integer
      name:
        type: string
    type: object
  types.ContainerState:
    properties:
      dead:
        type: boolean
      error:
        type: string
      exitCode:
        type: integer
      finishedAt:
        type: string
      health:
        $ref: '#/definitions/types.Health'
      oomkilled:
        type: boolean
      paused:
        type: boolean
      pid:
        type: integer
      restarting:
        type: boolean
      running:
        type: boolean
      startedAt:
        type: string
      status:
        description: String representation of the container state. Can be one of "created",
          "running", "paused", "restarting", "removing", "exited", or "dead"
        type: string
    type: object
  types.GraphDriverData:
    properties:
      Data:
        additionalProperties:
          type: string
        description: |-
          data
          Required: true
        type: object
      Name:
        description: |-
          name
          Required: true
        type: string
    type: object
  types.Health:
    properties:
      failingStreak:
        description: FailingStreak is the number of consecutive failures
        type: integer
      log:
        description: Log contains the last few results (oldest first)
        items:
          $ref: '#/definitions/types.HealthcheckResult'
        type: array
      status:
        description: Status is one of Starting, Healthy or Unhealthy
        type: string
    type: object
  types.HealthcheckResult:
    properties:
      end:
        description: End is the time this check ended
        type: string
      exitCode:
        description: 'ExitCode meanings: 0=healthy, 1=unhealthy, 2=reserved (considered
          unhealthy), else=error running probe'
        type: integer
      output:
        description: Output from last check
        type: string
      start:
        description: Start is the time this check started
        type: string
    type: object
  types.MountPoint:
    properties:
      destination:
        type: string
      driver:
        type: string
      mode:
        type: string
      name:
        type: string
      propagation:
        type: string
      rw:
        type: boolean
      source:
        type: string
      type:
        type: string
    type: object
  types.NetworkSettings:
    properties:
      bridge:
        description: Bridge is the Bridge name the network uses(e.g. `docker0`)
        type: string
      endpointID:
        description: EndpointID uniquely represents a service endpoint in a Sandbox
        type: string
      gateway:
        description: Gateway holds the gateway address for the network
        type: string
      globalIPv6Address:
        description: GlobalIPv6Address holds network's global IPv6 address
        type: string
      globalIPv6PrefixLen:
        description: GlobalIPv6PrefixLen represents mask length of network's global
          IPv6 address
        type: integer
      hairpinMode:
        description: HairpinMode specifies if hairpin NAT should be enabled on the
          virtual interface
        type: boolean
      ipaddress:
        description: IPAddress holds the IPv4 address for the network
        type: string
      ipprefixLen:
        description: IPPrefixLen represents mask length of network's IPv4 address
        type: integer
      ipv6Gateway:
        description: IPv6Gateway holds gateway address specific for IPv6
        type: string
      linkLocalIPv6Address:
        description: LinkLocalIPv6Address is an IPv6 unicast address using the link-local
          prefix
        type: string
      linkLocalIPv6PrefixLen:
        description: LinkLocalIPv6PrefixLen is the prefix length of an IPv6 unicast
          address
        type: integer
      macAddress:
        description: MacAddress holds the MAC address for the network
        type: string
      networks:
        additionalProperties:
          $ref: '#/definitions/network.EndpointSettings'
        type: object
      ports:
        $ref: '#/definitions/nat.PortMap'
        description: Ports is a collection of PortBinding indexed by Port
      sandboxID:
        description: SandboxID uniquely represents a container's network stack
        type: string
      sandboxKey:
        description: SandboxKey identifies the sandbox
        type: string
      secondaryIPAddresses:
        items:
          $ref: '#/definitions/network.Address'
        type: array
      secondaryIPv6Addresses:
        items:
          $ref: '#/definitions/network.Address'
        type: array
    type: object
  units.Ulimit:
    properties:
      hard:
        type: integer
      name:
        type: string
      soft:
        type: integer
    type: object
  v1.AWSElasticBlockStoreVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          +optional
        type: integer
      readOnly:
        description: |-
          Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
          If omitted, the default is "false".
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
        type: boolean
      volumeID:
        description: |-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string
    type: object
  v1.Affinity:
    properties:
      nodeAffinity:
        $ref: '#/definitions/v1.NodeAffinity'
        description: |-
          Describes node affinity scheduling rules for the pod.
          +optional
      podAffinity:
        $ref: '#/definitions/v1.PodAffinity'
        description: |-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
          +optional
      podAntiAffinity:
        $ref: '#/definitions/v1.PodAntiAffinity'
        description: |-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
          +optional
    type: object
  v1.AzureDiskVolumeSource:
    properties:
      cachingMode:
        description: |-
          Host Caching mode: None, Read Only, Read Write.
          +optional
        type: string
      diskName:
        description: The Name of the data disk in the blob storage
        type: string
      diskURI:
        description: The URI the data disk in the blob storage
        type: string
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      kind:
        description: 'Expected values Shared: multiple blob disks per storage account  Dedicated:
          single blob disk per storage account  Managed: azure managed data disk (only
          in managed availability set). defaults to shared'
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
    type: object
  v1.AzureFileVolumeSource:
    properties:
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretName:
        description: the name of secret that contains Azure Storage Account Name and
          Key
        type: string
      shareName:
        description: Share Name
        type: string
    type: object
  v1.CSIVolumeSource:
    properties:
      driver:
        description: |-
          Driver is the name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
        type: string
      fsType:
        description: |-
          Filesystem type to mount. Ex. "ext4", "xfs", "ntfs".
          If not provided, the empty value is passed to the associated CSI driver
          which will determine the default filesystem to apply.
          +optional
        type: string
      nodePublishSecretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          NodePublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          NodePublishVolume and NodeUnpublishVolume calls.
          This field is optional, and  may be empty if no secret is required. If the
          secret object contains more than one secret, all secret references are passed.
          +optional
      readOnly:
        description: |-
          Specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
        type: boolean
      volumeAttributes:
        additionalProperties:
          type: string
        description: |-
          VolumeAttributes stores driver-specific properties that are passed to the CSI
          driver. Consult your driver's documentation for supported values.
          +optional
        type: object
    type: object
  v1.Capabilities:
    properties:
      add:
        description: |-
          Added capabilities
          +optional
        items:
          type: string
        type: array
      drop:
        description: |-
          Removed capabilities
          +optional
        items:
          type: string
        type: array
    type: object
  v1.CephFSVolumeSource:
    properties:
      monitors:
        description: |-
          Required: Monitors is a collection of Ceph monitors
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        items:
          type: string
        type: array
      path:
        description: |-
          Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          +optional
        type: string
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: boolean
      secretFile:
        description: |-
          Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          Optional: SecretRef is reference to the authentication secret for User, default is empty.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
      user:
        description: |-
          Optional: User is the rados user name, default is admin
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
    type: object
  v1.CinderVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: string
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          Optional: points to a secret object containing parameters used to connect
          to OpenStack.
          +optional
      volumeID:
        description: |-
          volume id used to identify the volume in cinder.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string
    type: object
  v1.ConfigContainer:
    properties:
      image:
        type: string
      keepFiles:
        type: boolean
      path:
        type: string
      volume:
        type: string
    required:
    - image
    - path
    - volume
    type: object
  v1.ConfigMapEnvSource:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapKeySelector:
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its key must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapProjection:
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapVolumeSource:
    properties:
      defaultMode:
        description: |-
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    type: object
  v1.Container:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/v1.EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        description: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
        type: string
      lifecycle:
        $ref: '#/definitions/v1.Lifecycle'
        description: |-
          Actions that the management system should take in response to container lifecycle events.
          Cannot be updated.
          +optional
      livenessProbe:
        $ref: '#/definitions/k8s.io_api_core_v1.Probe'
        description: |-
          Periodic probe of container liveness.
          Container will be restarted if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/v1.ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/k8s.io_api_core_v1.Probe'
        description: |-
          Periodic probe of container service readiness.
          Container will be removed from service endpoints if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      resources:
        $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Compute Resources required by this container.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      securityContext:
        $ref: '#/definitions/v1.SecurityContext'
        description: |-
          SecurityContext defines the security options the container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
          +optional
      startupProbe:
        $ref: '#/definitions/k8s.io_api_core_v1.Probe'
        description: |-
          StartupProbe indicates that the Pod has successfully initialized.
          If specified, no other probes are executed until this completes successfully.
          If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
          This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
          when it might take a long time to load data or warm a cache, than during steady-state operation.
          This cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        description: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
        type: string
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/v1.VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  v1.ContainerConfig:
    properties:
      args:
        description: args are added to the command
        items:
          type: string
        type: array
      command:
        description: |-
          the initial command of a container have mixed terms
          docker --> k8s: entrypoint => command, cmd => args
          we use the k8s term here
          command is the active process of the container
        items:
          type: string
        type: array
      configContainer:
        $ref: '#/definitions/v1.ConfigContainer'
        description: config container is spawned as an initcontainer copying files
          to a shared volume
      container:
        description: name of the container used for service, configmap names, various
          component names
        type: string
      containerPreName:
        description: ContainerPreName identifies namespace to be used
        type: string
      customHeaders:
        description: custom header configuration
        items:
          type: string
        type: array
      deploymentStrategy:
        description: |-
          k8s-only-section
          Deployments strategy, on deployment how to restart underlying pods
          Values: Recreate (all-at-once), Rolling(one-by-one only if succeeds)
        type: string
      environment:
        description: environment variables list
        items:
          type: string
        type: array
      expose:
        description: create an ingress object or not
        type: boolean
      exposeTls:
        description: use nginx tls configuration
        type: boolean
      extraLBAnnotations:
        additionalProperties:
          type: string
        description: |-
          ExtraLBAnnotations
          lots of cloud provider specific configs can be put into annotations
          they vary enough to have it exposed like this
        type: object
      healthCheck:
        $ref: '#/definitions/v1.HealthCheckConfig'
        description: health check configuration
      importContainer:
        $ref: '#/definitions/v1.ImportContainer'
        description: import container uses rclone to copy over files before container
          startup
      ingressHost:
        description: ingress hostname, env value used by default, can be overridden
          here
        type: string
      ingressName:
        description: ingress prefix before hostname, `containerName.containerPrefix.<ingress
          root>` by default, this replaces both before root
        type: string
      ingressUploadLimit:
        description: |-
          Set endpoint upload limit, default value is: 1m
          for docker hosts, this is needs to be bytes: 1000000 ~1m
        type: string
      logConfig:
        $ref: '#/definitions/container.LogConfig'
        description: dagent only
      mount:
        description: mount list, if a name starts with @ it can be used by multiple
          components eg @data|/target/mount/path
        items:
          type: string
        type: array
      networkMode:
        description: bridge(container, defeault) host, none or network name
        type: string
      port:
        description: portbinding list contains external/interal ports
        items:
          $ref: '#/definitions/containerbuilder.PortBinding'
        type: array
      portRanges:
        description: Port ranges to be exposed ! no native range support in k8s
        items:
          $ref: '#/definitions/containerbuilder.PortRangeBinding'
        type: array
      proxyHeaders:
        description: add proxy and cors headers
        type: boolean
      resourceConfig:
        $ref: '#/definitions/v1.ResourceConfig'
        description: resource management
      restartPolicy:
        type: string
      runtimeConfigType:
        description: the type of the runtime text provided eg. dotnet-appsettings
        type: string
      shared:
        description: if put together with another instances consume their shared configs
          eg. -common config map, generated from here
        type: boolean
      tty:
        description: if we need to spawn a pseudo-terminal
        type: boolean
      useLoadBalancer:
        description: |-
          Expose service using external IP
          also sets the externalTrafficPolcy to "local"
        type: boolean
      user:
        description: container user id
        type: integer
      volumes:
        description: volumes
        items:
          $ref: '#/definitions/github.com_dyrector-io_dyrectorio_agent_pkg_api_v1.Volume'
        type: array
    required:
    - container
    type: object
  v1.ContainerPort:
    properties:
      containerPort:
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
        type: integer
      hostIP:
        description: |-
          What host IP to bind the external port to.
          +optional
        type: string
      hostPort:
        description: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
        type: integer
      name:
        description: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
        type: string
      protocol:
        description: |-
          Protocol for port. Must be UDP, TCP, or SCTP.
          Defaults to "TCP".
          +optional
          +default="TCP"
        type: string
    type: object
  v1.ContainerStatusResponse:
    properties:
      repository:
        type: string
      state:
        type: string
      status:
        type: string
      tag:
        type: string
    required:
    - repository
    - state
    - status
    - tag
    type: object
  v1.DeployImageRequest:
    properties:
      ContainerConfig:
        $ref: '#/definitions/v1.ContainerConfig'
      ImageName:
        type: string
      InstanceConfig:
        $ref: '#/definitions/v1.InstanceConfig'
      Issuer:
        type: string
      Registry:
        type: string
      RegistryAuth:
        $ref: '#/definitions/containerbuilder.RegistryAuth'
      RequestId:
        type: string
      RuntimeConfig:
        items:
          type: integer
        type: array
      Tag:
        type: string
    required:
    - ContainerConfig
    - ImageName
    - InstanceConfig
    - RequestId
    - Tag
    type: object
  v1.DeployImageResponse:
    properties:
      error:
        type: string
      imageName:
        type: string
      logs:
        items:
          type: string
        type: array
      requestId:
        type: string
      started:
        type: boolean
      tag:
        type: string
    type: object
  v1.DeployVersionRequest:
    properties:
      deployImageRequest:
        items:
          $ref: '#/definitions/v1.DeployImageRequest'
        type: array
      releaseNotes:
        type: string
      version:
        type: string
    required:
    - version
    type: object
  v1.Deployment:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        type: integer
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        type: integer
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/v1.ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/v1.DeploymentSpec'
        description: |-
          Specification of the desired behavior of the Deployment.
          +optional
      status:
        $ref: '#/definitions/v1.DeploymentStatus'
        description: |-
          Most recently observed status of the Deployment.
          +optional
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
          +optional
        type: string
    type: object
  v1.DeploymentCondition:
    properties:
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        type: string
      lastUpdateTime:
        description: The last time this condition was updated.
        type: string
      message:
        description: A human readable message indicating details about the transition.
        type: string
      reason:
        description: The reason for the condition's last transition.
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: Type of deployment condition.
        type: string
    type: object
  v1.DeploymentList:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      continue:
        description: |-
          continue may be set if the user set a limit on the number of items returned, and indicates that
          the server has more data available. The value is opaque and may be used to issue another request
          to the endpoint that served this list to retrieve the next set of available objects. Continuing a
          consistent list may not be possible if the server configuration has changed or more than a few
          minutes have passed. The resourceVersion field returned when using this continue value will be
          identical to the value in the first response, unless you have received this token from an error
          message.
        type: string
      items:
        description: Items is the list of Deployments.
        items:
          $ref: '#/definitions/v1.Deployment'
        type: array
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      remainingItemCount:
        description: |-
          remainingItemCount is the number of subsequent items in the list which are not included in this
          list response. If the list request contained label or field selectors, then the number of
          remaining items is unknown and the field will be left unset and omitted during serialization.
          If the list is complete (either because it is not chunking or because this is the last chunk),
          then there are no more remaining items and this field will be left unset and omitted during
          serialization.
          Servers older than v1.15 do not set this field.
          The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
          should not rely on the remainingItemCount to be set or to be exact.
          +optional
        type: integer
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that
          can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
    type: object
  v1.DeploymentSpec:
    properties:
      minReadySeconds:
        description: |-
          Minimum number of seconds for which a newly created pod should be ready
          without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready)
          +optional
        type: integer
      paused:
        description: |-
          Indicates that the deployment is paused.
          +optional
        type: boolean
      progressDeadlineSeconds:
        description: |-
          The maximum time in seconds for a deployment to make progress before it
          is considered to be failed. The deployment controller will continue to
          process failed deployments and a condition with a ProgressDeadlineExceeded
          reason will be surfaced in the deployment status. Note that progress will
          not be estimated during the time a deployment is paused. Defaults to 600s.
        type: integer
      replicas:
        description: |-
          Number of desired pods. This is a pointer to distinguish between explicit
          zero and not specified. Defaults to 1.
          +optional
        type: integer
      revisionHistoryLimit:
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
          +optional
        type: integer
      selector:
        $ref: '#/definitions/v1.LabelSelector'
        description: |-
          Label selector for pods. Existing ReplicaSets whose pods are
          selected by this will be the ones affected by this deployment.
          It must match the pod template's labels.
      strategy:
        $ref: '#/definitions/v1.DeploymentStrategy'
        description: |-
          The deployment strategy to use to replace existing pods with new ones.
          +optional
          +patchStrategy=retainKeys
      template:
        $ref: '#/definitions/v1.PodTemplateSpec'
        description: Template describes the pods that will be created.
    type: object
  v1.DeploymentStatus:
    properties:
      availableReplicas:
        description: |-
          Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
          +optional
        type: integer
      collisionCount:
        description: |-
          Count of hash collisions for the Deployment. The Deployment controller uses this
          field as a collision avoidance mechanism when it needs to create the name for the
          newest ReplicaSet.
          +optional
        type: integer
      conditions:
        description: |-
          Represents the latest available observations of a deployment's current state.
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.DeploymentCondition'
        type: array
      observedGeneration:
        description: |-
          The generation observed by the deployment controller.
          +optional
        type: integer
      readyReplicas:
        description: |-
          readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
          +optional
        type: integer
      replicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment (their labels match the selector).
          +optional
        type: integer
      unavailableReplicas:
        description: |-
          Total number of unavailable pods targeted by this deployment. This is the total number of
          pods that are still required for the deployment to have 100% available capacity. They may
          either be pods that are running but not yet available or pods that still have not been created.
          +optional
        type: integer
      updatedReplicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment that have the desired template spec.
          +optional
        type: integer
    type: object
  v1.DeploymentStrategy:
    properties:
      rollingUpdate:
        $ref: '#/definitions/v1.RollingUpdateDeployment'
        description: |-
          Rolling update config params. Present only if DeploymentStrategyType =
          RollingUpdate.
          ---
          TODO: Update this to follow our convention for oneOf, whatever we decide it
          to be.
          +optional
      type:
        description: |-
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
          +optional
        type: string
    type: object
  v1.DownwardAPIProjection:
    properties:
      items:
        description: |-
          Items is a list of DownwardAPIVolume file
          +optional
        items:
          $ref: '#/definitions/v1.DownwardAPIVolumeFile'
        type: array
    type: object
  v1.DownwardAPIVolumeFile:
    properties:
      fieldRef:
        $ref: '#/definitions/v1.ObjectFieldSelector'
        description: |-
          Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
          +optional
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file, must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      path:
        description: 'Required: Path is  the relative path name of the file to be
          created. Must not be absolute or contain the ''..'' path. Must be utf-8
          encoded. The first item of the relative path must not start with ''..'''
        type: string
      resourceFieldRef:
        $ref: '#/definitions/v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
          +optional
    type: object
  v1.DownwardAPIVolumeSource:
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      items:
        description: |-
          Items is a list of downward API volume file
          +optional
        items:
          $ref: '#/definitions/v1.DownwardAPIVolumeFile'
        type: array
    type: object
  v1.EmptyDirVolumeSource:
    properties:
      medium:
        description: |-
          What type of storage medium should back this directory.
          The default is "" which means to use the node's default medium.
          Must be an empty string (default) or Memory.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
        type: string
      sizeLimit:
        $ref: '#/definitions/resource.Quantity'
        description: |-
          Total amount of local storage required for this EmptyDir volume.
          The size limit is also applicable for memory medium.
          The maximum usage on memory medium EmptyDir would be the minimum value between
          the SizeLimit specified here and the sum of memory limits of all containers in a pod.
          The default is nil which means that the limit is undefined.
          More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
          +optional
    type: object
  v1.EnvFromSource:
    properties:
      configMapRef:
        $ref: '#/definitions/v1.ConfigMapEnvSource'
        description: |-
          The ConfigMap to select from
          +optional
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
        type: string
      secretRef:
        $ref: '#/definitions/v1.SecretEnvSource'
        description: |-
          The Secret to select from
          +optional
    type: object
  v1.EnvVar:
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: |-
          Variable references $(VAR_NAME) are expanded
          using the previously defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
          Escaped references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
        type: string
      valueFrom:
        $ref: '#/definitions/v1.EnvVarSource'
        description: |-
          Source for the environment variable's value. Cannot be used if value is not empty.
          +optional
    type: object
  v1.EnvVarSource:
    properties:
      configMapKeyRef:
        $ref: '#/definitions/v1.ConfigMapKeySelector'
        description: |-
          Selects a key of a ConfigMap.
          +optional
      fieldRef:
        $ref: '#/definitions/v1.ObjectFieldSelector'
        description: |-
          Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
          spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
          +optional
      resourceFieldRef:
        $ref: '#/definitions/v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
          +optional
      secretKeyRef:
        $ref: '#/definitions/v1.SecretKeySelector'
        description: |-
          Selects a key of a secret in the pod's namespace
          +optional
    type: object
  v1.EphemeralContainer:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/v1.EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
        type: string
      imagePullPolicy:
        description: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
        type: string
      lifecycle:
        $ref: '#/definitions/v1.Lifecycle'
        description: |-
          Lifecycle is not allowed for ephemeral containers.
          +optional
      livenessProbe:
        $ref: '#/definitions/k8s.io_api_core_v1.Probe'
        description: |-
          Probes are not allowed for ephemeral containers.
          +optional
      name:
        description: |-
          Name of the ephemeral container specified as a DNS_LABEL.
          This name must be unique among all containers, init containers and ephemeral containers.
        type: string
      ports:
        description: |-
          Ports are not allowed for ephemeral containers.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/v1.ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/k8s.io_api_core_v1.Probe'
        description: |-
          Probes are not allowed for ephemeral containers.
          +optional
      resources:
        $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
          already allocated to the pod.
          +optional
      securityContext:
        $ref: '#/definitions/v1.SecurityContext'
        description: |-
          Optional: SecurityContext defines the security options the ephemeral container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          +optional
      startupProbe:
        $ref: '#/definitions/k8s.io_api_core_v1.Probe'
        description: |-
          Probes are not allowed for ephemeral containers.
          +optional
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      targetContainerName:
        description: |-
          If set, the name of the container from PodSpec that this ephemeral container targets.
          The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
          If not set then the ephemeral container uses the namespaces configured in the Pod spec.

          The container runtime must implement support for this feature. If the runtime does not
          support namespace targeting then the result of setting this field is undefined.
          +optional
        type: string
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        description: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
        type: string
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/v1.VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  v1.EphemeralVolumeSource:
    properties:
      volumeClaimTemplate:
        $ref: '#/definitions/v1.PersistentVolumeClaimTemplate'
        description: |-
          Will be used to create a stand-alone PVC to provision the volume.
          The pod in which this EphemeralVolumeSource is embedded will be the
          owner of the PVC, i.e. the PVC will be deleted together with the
          pod.  The name of the PVC will be `<pod name>-<volume name>` where
          `<volume name>` is the name from the `PodSpec.Volumes` array
          entry. Pod validation will reject the pod if the concatenated name
          is not valid for a PVC (for example, too long).

          An existing PVC with that name that is not owned by the pod
          will *not* be used for the pod to avoid using an unrelated
          volume by mistake. Starting the pod is then blocked until
          the unrelated PVC is removed. If such a pre-created PVC is
          meant to be used by the pod, the PVC has to updated with an
          owner reference to the pod once the pod exists. Normally
          this should not be necessary, but it may be useful when
          manually reconstructing a broken cluster.

          This field is read-only and no changes will be made by Kubernetes
          to the PVC after it has been created.

          Required, must not be nil.
    type: object
  v1.Error:
    properties:
      description:
        type: string
      error:
        type: string
      value:
        type: string
    type: object
  v1.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/v1.Error'
        type: array
    type: object
  v1.ExecAction:
    properties:
      command:
        description: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.FCVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      lun:
        description: |-
          Optional: FC target lun number
          +optional
        type: integer
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      targetWWNs:
        description: |-
          Optional: FC target worldwide names (WWNs)
          +optional
        items:
          type: string
        type: array
      wwids:
        description: |-
          Optional: FC volume world wide identifiers (wwids)
          Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.FieldsV1:
    type: object
  v1.FlexVolumeSource:
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          +optional
        type: string
      options:
        additionalProperties:
          type: string
        description: |-
          Optional: Extra command options if any.
          +optional
        type: object
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          Optional: SecretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be
          empty if no secret object is specified. If the secret object
          contains more than one secret, all secrets are passed to the plugin
          scripts.
          +optional
    type: object
  v1.FlockerVolumeSource:
    properties:
      datasetName:
        description: |-
          Name of the dataset stored as metadata -> name on the dataset for Flocker
          should be considered as deprecated
          +optional
        type: string
      datasetUUID:
        description: |-
          UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
        type: string
    type: object
  v1.GCEPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: integer
      pdName:
        description: |-
          Unique name of the PD resource in GCE. Used to identify the disk in GCE.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: boolean
    type: object
  v1.GRPCAction:
    properties:
      port:
        description: Port number of the gRPC service. Number must be in the range
          1 to 65535.
        type: integer
      service:
        description: |-
          Service is the name of the service to place in the gRPC HealthCheckRequest
          (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

          If this is not specified, the default behavior is defined by gRPC.
          +optional
          +default=""
        type: string
    type: object
  v1.GitRepoVolumeSource:
    properties:
      directory:
        description: |-
          Target directory name.
          Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
          git repository.  Otherwise, if specified, the volume will contain the git repository in
          the subdirectory with the given name.
          +optional
        type: string
      repository:
        description: Repository URL
        type: string
      revision:
        description: |-
          Commit hash for the specified revision.
          +optional
        type: string
    type: object
  v1.GlusterfsVolumeSource:
    properties:
      endpoints:
        description: |-
          EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      path:
        description: |-
          Path is the Glusterfs volume path.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          +optional
        type: boolean
    type: object
  v1.HTTPGetAction:
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
        type: string
      httpHeaders:
        description: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
        items:
          $ref: '#/definitions/v1.HTTPHeader'
        type: array
      path:
        description: |-
          Path to access on the HTTP server.
          +optional
        type: string
      port:
        $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Name or number of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      scheme:
        description: |-
          Scheme to use for connecting to the host.
          Defaults to HTTP.
          +optional
        type: string
    type: object
  v1.HTTPHeader:
    properties:
      name:
        description: The header field name
        type: string
      value:
        description: The header field value
        type: string
    type: object
  v1.HealthCheckConfig:
    properties:
      Port:
        type: integer
      livenessProbe:
        $ref: '#/definitions/github.com_dyrector-io_dyrectorio_agent_pkg_api_v1.Probe'
      readinessProbe:
        $ref: '#/definitions/github.com_dyrector-io_dyrectorio_agent_pkg_api_v1.Probe'
      startupProbe:
        $ref: '#/definitions/github.com_dyrector-io_dyrectorio_agent_pkg_api_v1.Probe'
    type: object
  v1.HostAlias:
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        items:
          type: string
        type: array
      ip:
        description: IP address of the host file entry.
        type: string
    type: object
  v1.HostPathVolumeSource:
    properties:
      path:
        description: |-
          Path of the directory on the host.
          If the path is a symlink, it will follow the link to the real path.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
      type:
        description: |-
          Type for HostPath Volume
          Defaults to ""
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          +optional
        type: string
    type: object
  v1.ISCSIVolumeSource:
    properties:
      chapAuthDiscovery:
        description: |-
          whether support iSCSI Discovery CHAP authentication
          +optional
        type: boolean
      chapAuthSession:
        description: |-
          whether support iSCSI Session CHAP authentication
          +optional
        type: boolean
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      initiatorName:
        description: |-
          Custom iSCSI Initiator Name.
          If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
          <target portal>:<volume name> will be created for the connection.
          +optional
        type: string
      iqn:
        description: Target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: |-
          iSCSI Interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
        type: string
      lun:
        description: iSCSI Target Lun number.
        type: integer
      portals:
        description: |-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
          +optional
        items:
          type: string
        type: array
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          CHAP Secret for iSCSI target and initiator authentication
          +optional
      targetPortal:
        description: |-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: string
    type: object
  v1.ImportContainer:
    properties:
      command:
        description: for azureblob storage use `sync :azuresync:<container>/<product-guid>/<version-guid>/<component>/<volume>`
        type: string
      environments:
        additionalProperties:
          type: string
        description: |-
          environment used to pass down secrets to the container
          for Azure refer to rclone docs: https://rclone.org/azureblob/
          one way to go either RCLONE_AZUREBLOB_ACCOUNT with RCLONE_AZUREBLOB_KEY
          or using RCLONE_AZUREBLOB_SAS_URL list, read privileges needed
        type: object
      volume:
        description: target volume name, volume name that is present on the deployment
        type: string
    required:
    - command
    - environments
    - volume
    type: object
  v1.InstanceConfig:
    properties:
      containerPreName:
        description: prefix of the container, identifies namespace
        type: string
      environment:
        description: 'variables for instance; configmaps: name-common, name must be
          defined'
        items:
          type: string
        type: array
      mountPath:
        description: not-in-use
        type: string
      name:
        description: name of the instance eg. configmaps
        type: string
      registry:
        description: not-in-use/unimplemented; registry is taken from containerConfig
        type: string
      repositoryPreName:
        description: not-in-use/unimplemented; git repository prefix
        type: string
      sharedEnvironment:
        description: namespace global envs
        items:
          type: string
        type: array
      useSharedEnvs:
        description: use preexisting namespaced envs
        type: boolean
    required:
    - containerPreName
    type: object
  v1.KeyToPath:
    properties:
      key:
        description: The key to project.
        type: string
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      path:
        description: |-
          The relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
        type: string
    type: object
  v1.LabelSelector:
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
        items:
          $ref: '#/definitions/v1.LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
    type: object
  v1.LabelSelectorRequirement:
    properties:
      key:
        description: |-
          key is the label key that the selector applies to.
          +patchMergeKey=key
          +patchStrategy=merge
        type: string
      operator:
        description: |-
          operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
        type: string
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.Lifecycle:
    properties:
      postStart:
        $ref: '#/definitions/v1.LifecycleHandler'
        description: |-
          PostStart is called immediately after a container is created. If the handler fails,
          the container is terminated and restarted according to its restart policy.
          Other management of the container blocks until the hook completes.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
      preStop:
        $ref: '#/definitions/v1.LifecycleHandler'
        description: |-
          PreStop is called immediately before a container is terminated due to an
          API request or management event such as liveness/startup probe failure,
          preemption, resource contention, etc. The handler is not called if the
          container crashes or exits. The Pod's termination grace period countdown begins before the
          PreStop hook is executed. Regardless of the outcome of the handler, the
          container will eventually terminate within the Pod's termination grace
          period (unless delayed by finalizers). Other management of the container blocks until the hook completes
          or until the termination grace period is reached.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
    type: object
  v1.LifecycleHandler:
    properties:
      exec:
        $ref: '#/definitions/v1.ExecAction'
        description: |-
          Exec specifies the action to take.
          +optional
      httpGet:
        $ref: '#/definitions/v1.HTTPGetAction'
        description: |-
          HTTPGet specifies the http request to perform.
          +optional
      tcpSocket:
        $ref: '#/definitions/v1.TCPSocketAction'
        description: |-
          Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
          for the backward compatibility. There are no validation of this field and
          lifecycle hooks will fail in runtime when tcp handler is specified.
          +optional
    type: object
  v1.LocalObjectReference:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
    type: object
  v1.ManagedFieldsEntry:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
        type: string
      fieldsType:
        description: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
      fieldsV1:
        $ref: '#/definitions/v1.FieldsV1'
        description: |-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
          +optional
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        description: |-
          Operation is the type of operation which lead to this ManagedFieldsEntry being created.
          The only valid values for this field are 'Apply' and 'Update'.
        type: string
      subresource:
        description: |-
          Subresource is the name of the subresource used to update that object, or
          empty string if the object was updated through the main resource. The
          value of this field is used to distinguish between managers, even if they
          share the same name. For example, a status update will be distinct from a
          regular update using the same manager name.
          Note that the APIVersion field is not related to the Subresource field and
          it always corresponds to the version of the main resource.
        type: string
      time:
        description: |-
          Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
          +optional
        type: string
    type: object
  v1.NFSVolumeSource:
    properties:
      path:
        description: |-
          Path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
      readOnly:
        description: |-
          ReadOnly here will force
          the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
        type: boolean
      server:
        description: |-
          Server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
    type: object
  v1.NodeAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/v1.PreferredSchedulingTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/v1.NodeSelector'
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to an update), the system
          may or may not try to eventually evict the pod from its node.
          +optional
    type: object
  v1.NodeSelector:
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/v1.NodeSelectorTerm'
        type: array
    type: object
  v1.NodeSelectorRequirement:
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        description: |-
          Represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        type: string
      values:
        description: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.NodeSelectorTerm:
    properties:
      matchExpressions:
        description: |-
          A list of node selector requirements by node's labels.
          +optional
        items:
          $ref: '#/definitions/v1.NodeSelectorRequirement'
        type: array
      matchFields:
        description: |-
          A list of node selector requirements by node's fields.
          +optional
        items:
          $ref: '#/definitions/v1.NodeSelectorRequirement'
        type: array
    type: object
  v1.ObjectFieldSelector:
    properties:
      apiVersion:
        description: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    type: object
  v1.OwnerReference:
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: |-
          Name of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      uid:
        description: |-
          UID of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
    type: object
  v1.PersistentVolumeClaimSpec:
    properties:
      accessModes:
        description: |-
          AccessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
          +optional
        items:
          type: string
        type: array
      dataSource:
        $ref: '#/definitions/v1.TypedLocalObjectReference'
        description: |-
          This field can be used to specify either:
          * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
          * An existing PVC (PersistentVolumeClaim)
          If the provisioner or an external controller can support the specified data source,
          it will create a new volume based on the contents of the specified data source.
          If the AnyVolumeDataSource feature gate is enabled, this field will always have
          the same contents as the DataSourceRef field.
          +optional
      dataSourceRef:
        $ref: '#/definitions/v1.TypedLocalObjectReference'
        description: |-
          Specifies the object from which to populate the volume with data, if a non-empty
          volume is desired. This may be any local object from a non-empty API group (non
          core object) or a PersistentVolumeClaim object.
          When this field is specified, volume binding will only succeed if the type of
          the specified object matches some installed volume populator or dynamic
          provisioner.
          This field will replace the functionality of the DataSource field and as such
          if both fields are non-empty, they must have the same value. For backwards
          compatibility, both fields (DataSource and DataSourceRef) will be set to the same
          value automatically if one of them is empty and the other is non-empty.
          There are two important differences between DataSource and DataSourceRef:
          * While DataSource only allows two specific types of objects, DataSourceRef
            allows any non-core object, as well as PersistentVolumeClaim objects.
          * While DataSource ignores disallowed values (dropping them), DataSourceRef
            preserves all values, and generates an error if a disallowed value is
            specified.
          (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
          +optional
      resources:
        $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Resources represents the minimum resources the volume should have.
          If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
          that are lower than previous value but must still be higher than capacity recorded in the
          status field of the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
          +optional
      selector:
        $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over volumes to consider for binding.
          +optional
      storageClassName:
        description: |-
          Name of the StorageClass required by the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
          +optional
        type: string
      volumeMode:
        description: |-
          volumeMode defines what type of volume is required by the claim.
          Value of Filesystem is implied when not included in claim spec.
          +optional
        type: string
      volumeName:
        description: |-
          VolumeName is the binding reference to the PersistentVolume backing this claim.
          +optional
        type: string
    type: object
  v1.PersistentVolumeClaimTemplate:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        type: integer
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/v1.ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/v1.PersistentVolumeClaimSpec'
        description: |-
          The specification for the PersistentVolumeClaim. The entire content is
          copied unchanged into the PVC that gets created from this
          template. The same fields as in a PersistentVolumeClaim
          are also valid here.
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
          +optional
        type: string
    type: object
  v1.PersistentVolumeClaimVolumeSource:
    properties:
      claimName:
        description: |-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: string
      readOnly:
        description: |-
          Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
        type: boolean
    type: object
  v1.PhotonPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      pdID:
        description: ID that identifies Photon Controller persistent disk
        type: string
    type: object
  v1.PodAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/v1.PodAffinityTerm'
        type: array
    type: object
  v1.PodAffinityTerm:
    properties:
      labelSelector:
        $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over a set of resources, in this case pods.
          +optional
      namespaceSelector:
        $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over the set of namespaces that the term applies to.
          The term is applied to the union of the namespaces selected by this field
          and the ones listed in the namespaces field.
          null selector and null or empty namespaces list means "this pod's namespace".
          An empty selector ({}) matches all namespaces.
          This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
          +optional
      namespaces:
        description: |-
          namespaces specifies a static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field
          and the ones selected by namespaceSelector.
          null or empty namespaces list and null namespaceSelector means "this pod's namespace"
          +optional
        items:
          type: string
        type: array
      topologyKey:
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
        type: string
    type: object
  v1.PodAntiAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/v1.PodAffinityTerm'
        type: array
    type: object
  v1.PodDNSConfig:
    properties:
      nameservers:
        description: |-
          A list of DNS name server IP addresses.
          This will be appended to the base nameservers generated from DNSPolicy.
          Duplicated nameservers will be removed.
          +optional
        items:
          type: string
        type: array
      options:
        description: |-
          A list of DNS resolver options.
          This will be merged with the base options generated from DNSPolicy.
          Duplicated entries will be removed. Resolution options given in Options
          will override those that appear in the base DNSPolicy.
          +optional
        items:
          $ref: '#/definitions/v1.PodDNSConfigOption'
        type: array
      searches:
        description: |-
          A list of DNS search domains for host-name lookup.
          This will be appended to the base search paths generated from DNSPolicy.
          Duplicated search paths will be removed.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.PodDNSConfigOption:
    properties:
      name:
        description: Required.
        type: string
      value:
        description: +optional
        type: string
    type: object
  v1.PodOS:
    properties:
      name:
        description: |-
          Name is the name of the operating system. The currently supported values are linux and windows.
          Additional value may be defined in future and can be one of:
          https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
          Clients should expect to handle additional values and treat unrecognized values in this field as os: null
        type: string
    type: object
  v1.PodReadinessGate:
    properties:
      conditionType:
        description: ConditionType refers to a condition in the pod's condition list
          with matching type.
        type: string
    type: object
  v1.PodSecurityContext:
    properties:
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that volume
          to be owned by the pod:

          1. The owning GID will be the FSGroup
          2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
          3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      fsGroupChangePolicy:
        description: |-
          fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
          before being exposed inside Pod. This field will only apply to
          volume types which support fsGroup based ownership(and permissions).
          It will have no effect on ephemeral volume types such as: secret, configmaps
          and emptydir.
          Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: string
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to all containers.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in SecurityContext.  If set in
          both SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        $ref: '#/definitions/v1.SeccompProfile'
        description: |-
          The seccomp options to use by the containers in this pod.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      supplementalGroups:
        description: |-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID.  If unspecified, no groups will be added to
          any container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        items:
          type: integer
        type: array
      sysctls:
        description: |-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
          sysctls (by the container runtime) might fail to launch.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        items:
          $ref: '#/definitions/v1.Sysctl'
        type: array
      windowsOptions:
        $ref: '#/definitions/v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options within a container's SecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
    type: object
  v1.PodSpec:
    properties:
      activeDeadlineSeconds:
        description: |-
          Optional duration in seconds the pod may be active on the node relative to
          StartTime before the system will actively try to mark it failed and kill associated containers.
          Value must be a positive integer.
          +optional
        type: integer
      affinity:
        $ref: '#/definitions/v1.Affinity'
        description: |-
          If specified, the pod's scheduling constraints
          +optional
      automountServiceAccountToken:
        description: |-
          AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
          +optional
        type: boolean
      containers:
        description: |-
          List of containers belonging to the pod.
          Containers cannot currently be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.Container'
        type: array
      dnsConfig:
        $ref: '#/definitions/v1.PodDNSConfig'
        description: |-
          Specifies the DNS parameters of a pod.
          Parameters specified here will be merged to the generated DNS
          configuration based on DNSPolicy.
          +optional
      dnsPolicy:
        description: |-
          Set DNS policy for the pod.
          Defaults to "ClusterFirst".
          Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
          DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
          To have DNS options set along with hostNetwork, you have to specify DNS policy
          explicitly to 'ClusterFirstWithHostNet'.
          +optional
        type: string
      enableServiceLinks:
        description: |-
          EnableServiceLinks indicates whether information about services should be injected into pod's
          environment variables, matching the syntax of Docker links.
          Optional: Defaults to true.
          +optional
        type: boolean
      ephemeralContainers:
        description: |-
          List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
          pod to perform user-initiated actions such as debugging. This list cannot be specified when
          creating a pod, and it cannot be modified by updating the pod spec. In order to add an
          ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
          This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EphemeralContainer'
        type: array
      hostAliases:
        description: |-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
          file if specified. This is only valid for non-hostNetwork pods.
          +optional
          +patchMergeKey=ip
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.HostAlias'
        type: array
      hostIPC:
        description: |-
          Use the host's ipc namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostNetwork:
        description: |-
          Host networking requested for this pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
          Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostPID:
        description: |-
          Use the host's pid namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostname:
        description: |-
          Specifies the hostname of the Pod
          If not specified, the pod's hostname will be set to a system-defined value.
          +optional
        type: string
      imagePullSecrets:
        description: |-
          ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
          If specified, these secrets will be passed to individual puller implementations for them to use. For example,
          in the case of docker, only DockerConfig type secrets are honored.
          More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.LocalObjectReference'
        type: array
      initContainers:
        description: |-
          List of initialization containers belonging to the pod.
          Init containers are executed in order prior to containers being started. If any
          init container fails, the pod is considered to have failed and is handled according
          to its restartPolicy. The name for an init container or normal container must be
          unique among all containers.
          Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
          The resourceRequirements of an init container are taken into account during scheduling
          by finding the highest request/limit for each resource type, and then using the max of
          of that value or the sum of the normal containers. Limits are applied to init containers
          in a similar fashion.
          Init containers cannot currently be added or removed.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.Container'
        type: array
      nodeName:
        description: |-
          NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
          the scheduler simply schedules this pod onto that node, assuming that it fits resource
          requirements.
          +optional
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          NodeSelector is a selector which must be true for the pod to fit on a node.
          Selector which must match a node's labels for the pod to be scheduled on that node.
          More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          +optional
          +mapType=atomic
        type: object
      os:
        $ref: '#/definitions/v1.PodOS'
        description: |-
          Specifies the OS of the containers in the pod.
          Some pod and container fields are restricted if this is set.

          If the OS field is set to linux, the following fields must be unset:
          -securityContext.windowsOptions

          If the OS field is set to windows, following fields must be unset:
          - spec.hostPID
          - spec.hostIPC
          - spec.securityContext.seLinuxOptions
          - spec.securityContext.seccompProfile
          - spec.securityContext.fsGroup
          - spec.securityContext.fsGroupChangePolicy
          - spec.securityContext.sysctls
          - spec.shareProcessNamespace
          - spec.securityContext.runAsUser
          - spec.securityContext.runAsGroup
          - spec.securityContext.supplementalGroups
          - spec.containers[*].securityContext.seLinuxOptions
          - spec.containers[*].securityContext.seccompProfile
          - spec.containers[*].securityContext.capabilities
          - spec.containers[*].securityContext.readOnlyRootFilesystem
          - spec.containers[*].securityContext.privileged
          - spec.containers[*].securityContext.allowPrivilegeEscalation
          - spec.containers[*].securityContext.procMount
          - spec.containers[*].securityContext.runAsUser
          - spec.containers[*].securityContext.runAsGroup
          +optional
          This is an alpha field and requires the IdentifyPodOS feature
      overhead:
        $ref: '#/definitions/v1.ResourceList'
        description: |-
          Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
          This field will be autopopulated at admission time by the RuntimeClass admission controller. If
          the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
          The RuntimeClass admission controller will reject Pod create requests which have the overhead already
          set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
          defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
          More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
          This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.
          +optional
      preemptionPolicy:
        description: |-
          PreemptionPolicy is the Policy for preempting pods with lower priority.
          One of Never, PreemptLowerPriority.
          Defaults to PreemptLowerPriority if unset.
          This field is beta-level, gated by the NonPreemptingPriority feature-gate.
          +optional
        type: string
      priority:
        description: |-
          The priority value. Various system components use this field to find the
          priority of the pod. When Priority Admission Controller is enabled, it
          prevents users from setting this field. The admission controller populates
          this field from PriorityClassName.
          The higher the value, the higher the priority.
          +optional
        type: integer
      priorityClassName:
        description: |-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any other
          name must be defined by creating a PriorityClass object with that name.
          If not specified, the pod priority will be default or zero if there is no
          default.
          +optional
        type: string
      readinessGates:
        description: |-
          If specified, all readiness gates will be evaluated for pod readiness.
          A pod is ready when all its containers are ready AND
          all conditions specified in the readiness gates have status equal to "True"
          More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
          +optional
        items:
          $ref: '#/definitions/v1.PodReadinessGate'
        type: array
      restartPolicy:
        description: |-
          Restart policy for all containers within the pod.
          One of Always, OnFailure, Never.
          Default to Always.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
          +optional
        type: string
      runtimeClassName:
        description: |-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
          to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
          If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
          empty definition that uses the default runtime handler.
          More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
          This is a beta feature as of Kubernetes v1.14.
          +optional
        type: string
      schedulerName:
        description: |-
          If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
          +optional
        type: string
      securityContext:
        $ref: '#/definitions/v1.PodSecurityContext'
        description: |-
          SecurityContext holds pod-level security attributes and common container settings.
          Optional: Defaults to empty.  See type description for default values of each field.
          +optional
      serviceAccount:
        description: |-
          DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.
          +k8s:conversion-gen=false
          +optional
        type: string
      serviceAccountName:
        description: |-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
          +optional
        type: string
      setHostnameAsFQDN:
        description: |-
          If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
          In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
          In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
          If a pod does not have FQDN, this has no effect.
          Default to false.
          +optional
        type: boolean
      shareProcessNamespace:
        description: |-
          Share a single process namespace between all of the containers in a pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same pod, and the first process in each container will not be assigned PID 1.
          HostPID and ShareProcessNamespace cannot both be set.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      subdomain:
        description: |-
          If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
          If not specified, the pod will not have a domainname at all.
          +optional
        type: string
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          If this value is nil, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          Defaults to 30 seconds.
          +optional
        type: integer
      tolerations:
        description: |-
          If specified, the pod's tolerations.
          +optional
        items:
          $ref: '#/definitions/v1.Toleration'
        type: array
      topologySpreadConstraints:
        description: |-
          TopologySpreadConstraints describes how a group of pods ought to spread across topology
          domains. Scheduler will schedule pods in a way which abides by the constraints.
          All topologySpreadConstraints are ANDed.
          +optional
          +patchMergeKey=topologyKey
          +patchStrategy=merge
          +listType=map
          +listMapKey=topologyKey
          +listMapKey=whenUnsatisfiable
        items:
          $ref: '#/definitions/v1.TopologySpreadConstraint'
        type: array
      volumes:
        description: |-
          List of volumes that can be mounted by containers belonging to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes
          +optional
          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
        items:
          $ref: '#/definitions/k8s.io_api_core_v1.Volume'
        type: array
    type: object
  v1.PodTemplateSpec:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        type: integer
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/v1.ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/v1.PodSpec'
        description: |-
          Specification of the desired behavior of the pod.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
          +optional
        type: string
    type: object
  v1.PortworxVolumeSource:
    properties:
      fsType:
        description: |-
          FSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      volumeID:
        description: VolumeID uniquely identifies a Portworx volume
        type: string
    type: object
  v1.PreferredSchedulingTerm:
    properties:
      preference:
        $ref: '#/definitions/v1.NodeSelectorTerm'
        description: A node selector term, associated with the corresponding weight.
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm,
          in the range 1-100.
        type: integer
    type: object
  v1.ProjectedVolumeSource:
    properties:
      defaultMode:
        description: |-
          Mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      sources:
        description: |-
          list of volume projections
          +optional
        items:
          $ref: '#/definitions/v1.VolumeProjection'
        type: array
    type: object
  v1.QuobyteVolumeSource:
    properties:
      group:
        description: |-
          Group to map volume access to
          Default is no group
          +optional
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
          Defaults to false.
          +optional
        type: boolean
      registry:
        description: |-
          Registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated with commas)
          which acts as the central registry for volumes
        type: string
      tenant:
        description: |-
          Tenant owning the given Quobyte volume in the Backend
          Used with dynamically provisioned Quobyte volumes, value is set by the plugin
          +optional
        type: string
      user:
        description: |-
          User to map volume access to
          Defaults to serivceaccount user
          +optional
        type: string
      volume:
        description: Volume is a string that references an already created Quobyte
          volume by name.
        type: string
    type: object
  v1.RBDVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      image:
        description: |-
          The rados image name.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
      keyring:
        description: |-
          Keyring is the path to key ring for RBDUser.
          Default is /etc/ceph/keyring.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      monitors:
        description: |-
          A collection of Ceph monitors.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        items:
          type: string
        type: array
      pool:
        description: |-
          The rados pool name.
          Default is rbd.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          SecretRef is name of the authentication secret for RBDUser. If provided
          overrides keyring.
          Default is nil.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
      user:
        description: |-
          The rados user name.
          Default is admin.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
    type: object
  v1.ResourceConfig:
    properties:
      limits:
        $ref: '#/definitions/v1.Resources'
      requests:
        $ref: '#/definitions/v1.Resources'
    type: object
  v1.ResourceFieldSelector:
    properties:
      containerName:
        description: |-
          Container name: required for volumes, optional for env vars
          +optional
        type: string
      divisor:
        $ref: '#/definitions/resource.Quantity'
        description: |-
          Specifies the output format of the exposed resources, defaults to "1"
          +optional
      resource:
        description: 'Required: resource to select'
        type: string
    type: object
  v1.ResourceList:
    additionalProperties:
      $ref: '#/definitions/resource.Quantity'
    type: object
  v1.ResourceRequirements:
    properties:
      limits:
        $ref: '#/definitions/v1.ResourceList'
        description: |-
          Limits describes the maximum amount of compute resources allowed.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      requests:
        $ref: '#/definitions/v1.ResourceList'
        description: |-
          Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
          otherwise to an implementation-defined value.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
    type: object
  v1.Resources:
    properties:
      cpu:
        type: string
      memory:
        type: string
    type: object
  v1.RollingUpdateDeployment:
    properties:
      maxSurge:
        $ref: '#/definitions/intstr.IntOrString'
        description: |-
          The maximum number of pods that can be scheduled above the desired number of
          pods.
          Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
          This can not be 0 if MaxUnavailable is 0.
          Absolute number is calculated from percentage by rounding up.
          Defaults to 25%.
          Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
          the rolling update starts, such that the total number of old and new pods do not exceed
          130% of desired pods. Once old pods have been killed,
          new ReplicaSet can be scaled up further, ensuring that total number of pods running
          at any time during the update is at most 130% of desired pods.
          +optional
      maxUnavailable:
        $ref: '#/definitions/intstr.IntOrString'
        description: |-
          The maximum number of pods that can be unavailable during the update.
          Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
          Absolute number is calculated from percentage by rounding down.
          This can not be 0 if MaxSurge is 0.
          Defaults to 25%.
          Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
          immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
          can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
          that the total number of pods available at all times during the update is at
          least 70% of desired pods.
          +optional
    type: object
  v1.SELinuxOptions:
    properties:
      level:
        description: |-
          Level is SELinux level label that applies to the container.
          +optional
        type: string
      role:
        description: |-
          Role is a SELinux role label that applies to the container.
          +optional
        type: string
      type:
        description: |-
          Type is a SELinux type label that applies to the container.
          +optional
        type: string
      user:
        description: |-
          User is a SELinux user label that applies to the container.
          +optional
        type: string
    type: object
  v1.ScaleIOVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
        type: string
      gateway:
        description: The host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: |-
          The name of the ScaleIO Protection Domain for the configured storage.
          +optional
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          SecretRef references to the secret for ScaleIO user and other
          sensitive information. If this is not provided, Login operation will fail.
      sslEnabled:
        description: |-
          Flag to enable/disable SSL communication with Gateway, default false
          +optional
        type: boolean
      storageMode:
        description: |-
          Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
          Default is ThinProvisioned.
          +optional
        type: string
      storagePool:
        description: |-
          The ScaleIO Storage Pool associated with the protection domain.
          +optional
        type: string
      system:
        description: The name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: |-
          The name of a volume already created in the ScaleIO system
          that is associated with this volume source.
        type: string
    type: object
  v1.SeccompProfile:
    properties:
      localhostProfile:
        description: |-
          localhostProfile indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must only be set if type is "Localhost".
          +optional
        type: string
      type:
        description: |-
          type indicates which kind of seccomp profile will be applied.
          Valid options are:

          Localhost - a profile defined in a file on the node should be used.
          RuntimeDefault - the container runtime default profile should be used.
          Unconfined - no profile should be applied.
          +unionDiscriminator
        type: string
    type: object
  v1.SecretEnvSource:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret must be defined
          +optional
        type: boolean
    type: object
  v1.SecretKeySelector:
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret
          key.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    type: object
  v1.SecretProjection:
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    type: object
  v1.SecretVolumeSource:
    properties:
      defaultMode:
        description: |-
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values
          for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      optional:
        description: |-
          Specify whether the Secret or its keys must be defined
          +optional
        type: boolean
      secretName:
        description: |-
          Name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
        type: string
    type: object
  v1.SecurityContext:
    properties:
      allowPrivilegeEscalation:
        description: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      capabilities:
        $ref: '#/definitions/v1.Capabilities'
        description: |-
          The capabilities to add/drop when running containers.
          Defaults to the default set of capabilities granted by the container runtime.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      privileged:
        description: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      procMount:
        description: |-
          procMount denotes the type of proc mount to use for the containers.
          The default is DefaultProcMount which uses the container runtime defaults for
          readonly paths and masked paths.
          This requires the ProcMountType feature flag to be enabled.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: string
      readOnlyRootFilesystem:
        description: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to the container.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        $ref: '#/definitions/v1.SeccompProfile'
        description: |-
          The seccomp options to use by this container. If seccomp options are
          provided at both the pod & container level, the container options
          override the pod options.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      windowsOptions:
        $ref: '#/definitions/v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options from the PodSecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
    type: object
  v1.ServiceAccountTokenProjection:
    properties:
      audience:
        description: |-
          Audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of the
          token, and otherwise should reject the token. The audience defaults to the
          identifier of the apiserver.
          +optional
        type: string
      expirationSeconds:
        description: |-
          ExpirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
          +optional
        type: integer
      path:
        description: |-
          Path is the path relative to the mount point of the file to project the
          token into.
        type: string
    type: object
  v1.StorageOSVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/v1.LocalObjectReference'
        description: |-
          SecretRef specifies the secret to use for obtaining the StorageOS API
          credentials.  If not specified, default values will be attempted.
          +optional
      volumeName:
        description: |-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        type: string
      volumeNamespace:
        description: |-
          VolumeNamespace specifies the scope of the volume within StorageOS.  If no
          namespace is specified then the Pod's namespace will be used.  This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          +optional
        type: string
    type: object
  v1.Sysctl:
    properties:
      name:
        description: Name of a property to set
        type: string
      value:
        description: Value of a property to set
        type: string
    type: object
  v1.TCPSocketAction:
    properties:
      host:
        description: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
        type: string
      port:
        $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Number or name of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
    type: object
  v1.Toleration:
    properties:
      effect:
        description: |-
          Effect indicates the taint effect to match. Empty means match all taint effects.
          When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
          +optional
        type: string
      key:
        description: |-
          Key is the taint key that the toleration applies to. Empty means match all taint keys.
          If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          +optional
        type: string
      operator:
        description: |-
          Operator represents a key's relationship to the value.
          Valid operators are Exists and Equal. Defaults to Equal.
          Exists is equivalent to wildcard for value, so that a pod can
          tolerate all taints of a particular category.
          +optional
        type: string
      tolerationSeconds:
        description: |-
          TolerationSeconds represents the period of time the toleration (which must be
          of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
          it is not set, which means tolerate the taint forever (do not evict). Zero and
          negative values will be treated as 0 (evict immediately) by the system.
          +optional
        type: integer
      value:
        description: |-
          Value is the taint value the toleration matches to.
          If the operator is Exists, the value should be empty, otherwise just a regular string.
          +optional
        type: string
    type: object
  v1.TopologySpreadConstraint:
    properties:
      labelSelector:
        $ref: '#/definitions/v1.LabelSelector'
        description: |-
          LabelSelector is used to find matching pods.
          Pods that match this label selector are counted to determine the number of pods
          in their corresponding topology domain.
          +optional
      maxSkew:
        description: |-
          MaxSkew describes the degree to which pods may be unevenly distributed.
          When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
          between the number of matching pods in the target topology and the global minimum.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 1/1/0:
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          |   P   |   P   |       |
          +-------+-------+-------+
          - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1;
          scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2)
          violate MaxSkew(1).
          - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
          When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
          to topologies that satisfy it.
          It's a required field. Default value is 1 and 0 is not allowed.
        type: integer
      topologyKey:
        description: |-
          TopologyKey is the key of node labels. Nodes that have a label with this key
          and identical values are considered to be in the same topology.
          We consider each <key, value> as a "bucket", and try to put balanced number
          of pods into each bucket.
          It's a required field.
        type: string
      whenUnsatisfiable:
        description: |-
          WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
          the spread constraint.
          - DoNotSchedule (default) tells the scheduler not to schedule it.
          - ScheduleAnyway tells the scheduler to schedule the pod in any location,
            but giving higher precedence to topologies that would help reduce the
            skew.
          A constraint is considered "Unsatisfiable" for an incoming pod
          if and only if every possible node assignment for that pod would violate
          "MaxSkew" on some topology.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 3/1/1:
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          | P P P |   P   |   P   |
          +-------+-------+-------+
          If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
          to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
          MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
          won't make it *more* imbalanced.
          It's a required field.
        type: string
    type: object
  v1.TypedLocalObjectReference:
    properties:
      apiGroup:
        description: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
      name:
        description: Name is the name of resource being referenced
        type: string
    type: object
  v1.VolumeDevice:
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device
          will be mapped to.
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
    type: object
  v1.VolumeMount:
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
      mountPropagation:
        description: |-
          mountPropagation determines how mounts are propagated from the host
          to container and the other way around.
          When not set, MountPropagationNone is used.
          This field is beta in 1.10.
          +optional
        type: string
      name:
        description: This must match the Name of a Volume.
        type: string
      readOnly:
        description: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
        type: boolean
      subPath:
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
        type: string
      subPathExpr:
        description: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root).
          SubPathExpr and SubPath are mutually exclusive.
          +optional
        type: string
    type: object
  v1.VolumeProjection:
    properties:
      configMap:
        $ref: '#/definitions/v1.ConfigMapProjection'
        description: |-
          information about the configMap data to project
          +optional
      downwardAPI:
        $ref: '#/definitions/v1.DownwardAPIProjection'
        description: |-
          information about the downwardAPI data to project
          +optional
      secret:
        $ref: '#/definitions/v1.SecretProjection'
        description: |-
          information about the secret data to project
          +optional
      serviceAccountToken:
        $ref: '#/definitions/v1.ServiceAccountTokenProjection'
        description: |-
          information about the serviceAccountToken data to project
          +optional
    type: object
  v1.VsphereVirtualDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      storagePolicyID:
        description: |-
          Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          +optional
        type: string
      storagePolicyName:
        description: |-
          Storage Policy Based Management (SPBM) profile name.
          +optional
        type: string
      volumePath:
        description: Path that identifies vSphere volume vmdk
        type: string
    type: object
  v1.WeightedPodAffinityTerm:
    properties:
      podAffinityTerm:
        $ref: '#/definitions/v1.PodAffinityTerm'
        description: Required. A pod affinity term, associated with the corresponding
          weight.
      weight:
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        type: integer
    type: object
  v1.WindowsSecurityContextOptions:
    properties:
      gmsaCredentialSpec:
        description: |-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
          +optional
        type: string
      gmsaCredentialSpecName:
        description: |-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
          +optional
        type: string
      hostProcess:
        description: |-
          HostProcess determines if a container should be run as a 'Host Process' container.
          This field is alpha-level and will only be honored by components that enable the
          WindowsHostProcessContainers feature flag. Setting this field without the feature
          flag will result in errors when validating the Pod. All of a Pod's containers must
          have the same effective HostProcess value (it is not allowed to have a mix of HostProcess
          containers and non-HostProcess containers).  In addition, if HostProcess is true
          then HostNetwork must also be set to true.
          +optional
        type: boolean
      runAsUserName:
        description: |-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: string
    type: object
info:
  contact: {}
  description: 'crane server API docs. Scope: container management on remote nodes.'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: crane API Swagger
  version: "2.0"
paths:
  /containers/{containerPreName}/{containerName}:
    delete:
      consumes:
      - '*/*'
      description: Delete running container by name with status and state
      parameters:
      - description: containerName
        in: path
        name: containerName
        required: true
        type: string
      - description: containerPreName
        in: path
        name: containerPreName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Delete running container by name
      tags:
      - runtime
  /containers/{containerPreName}/{containerName}/inspect:
    get:
      consumes:
      - '*/*'
      description: Inspect an existing container by name
      parameters:
      - description: containerName
        in: path
        name: containerName
        required: true
        type: string
      - description: containerPreName
        in: path
        name: containerPreName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ContainerJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Inspect the container by name
      tags:
      - runtime
  /containers/{containerPreName}/{containerName}/logs:
    get:
      consumes:
      - '*/*'
      description: Get the logs of an existing container by name
      parameters:
      - description: containerName
        in: path
        name: containerName
        required: true
        type: string
      - description: containerPreName
        in: path
        name: containerPreName
        required: true
        type: string
      - default: 0
        description: paginationSkip
        in: query
        name: skip
        type: integer
      - default: 100
        description: paginationTake
        in: query
        name: take
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                type: string
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get the logs of the container by name
      tags:
      - runtime
  /containers/{containerPreName}/{containerName}/status:
    get:
      consumes:
      - '*/*'
      description: Get running container by name with status and state
      parameters:
      - description: containerName
        in: path
        name: containerName
        required: true
        type: string
      - description: containerPreName
        in: path
        name: containerPreName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ContainerStatusResponse'
      summary: Get running containers by name
      tags:
      - runtime
  /deploy:
    post:
      consumes:
      - '*/*'
      description: Deployment with all configuration.
      parameters:
      - description: Deploy Image Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/v1.DeployImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.DeployImageResponse'
      summary: Deploy an image from a Registry.
      tags:
      - deploy
  /deploy/version:
    post:
      consumes:
      - application/json
      description: Deployment with all configuration and version, if one of the deployment
        fail, the response still OK
      parameters:
      - description: Batch deploy with version data
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/v1.DeployVersionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.DeployImageResponse'
            type: array
      summary: Deploy a Complete Product with Version Info
      tags:
      - deploy
      - batch
  /deployments:
    get:
      consumes:
      - '*/*'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.DeploymentList'
      summary: Get list of available deployments.
      tags:
      - k8s
  /namespaces:
    get:
      consumes:
      - '*/*'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/k8s.Namespace'
            type: array
      summary: Get list of available namespaces.
      tags:
      - k8s
  /update:
    post:
      consumes:
      - '*/*'
      description: Incoming webhook triggers a one-shot check for updates in the configured
        remote registry
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Updates running agent
      tags:
      - monitoring
  /version:
    get:
      consumes:
      - '*/*'
      description: Version is formatted as "<agent-version>-<commit-hash> "(<build-date>)",
        also available on the /version path
      produces:
      - application/text
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get version string of the agent container
      tags:
      - info
schemes:
- http
swagger: "2.0"
