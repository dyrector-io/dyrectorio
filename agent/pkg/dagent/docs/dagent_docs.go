// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplateDagent = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/containers": {
            "get": {
                "description": "All the running containers, like a 'docker ps -a'",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "Get list of running containers.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Container"
                            }
                        }
                    }
                }
            }
        },
        "/containers/{containerPreName}/{containerName}": {
            "delete": {
                "description": "Delete running container by name with status and state",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "Delete running container by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "containerName",
                        "name": "containerName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "containerPreName",
                        "name": "containerPreName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/containers/{containerPreName}/{containerName}/inspect": {
            "get": {
                "description": "Inspect an existing container by name",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "Inspect the container by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "containerName",
                        "name": "containerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "containerPreName",
                        "name": "containerPreName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ContainerJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{containerPreName}/{containerName}/logs": {
            "get": {
                "description": "Get the logs of an existing container by name",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "Get the logs of the container by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "containerName",
                        "name": "containerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "containerPreName",
                        "name": "containerPreName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "paginationSkip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "paginationTake",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{containerPreName}/{containerName}/status": {
            "get": {
                "description": "Get running container by name with status and state, old url: /Status/GetStatus",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "Get running containers by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "containerName",
                        "name": "containerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "containerPreName",
                        "name": "containerPreName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ContainerStatusResponse"
                        }
                    }
                }
            }
        },
        "/containers/{containerPreName}/{containerName}/upload": {
            "post": {
                "description": "File upload as docker cp, files may be lost if copying happens into ephemeral path",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "Upload file into a running container as ` + "`" + `docker cp` + "`" + ` does",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the container",
                        "name": "containerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container prefix",
                        "name": "containerPreName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Path for file in the container, absolute, without trailing slash",
                        "name": "filePath",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "GID for the file to be created",
                        "name": "gid",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "UID for the file to be created",
                        "name": "uid",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deploy": {
            "post": {
                "description": "Deployment with all configuration.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deploy"
                ],
                "summary": "Deploy an image from a Registry.",
                "parameters": [
                    {
                        "description": "Deploy a container",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.DeployImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.DeployImageResponse"
                        }
                    }
                }
            }
        },
        "/deploy/batch": {
            "post": {
                "description": "Deployment with all configuration, if one of the deployment fail, the response still OK",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deploy",
                    "batch"
                ],
                "summary": "Deploy an Image Batch",
                "parameters": [
                    {
                        "description": "Batch deployment",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.DeployImageRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.DeployImageResponse"
                            }
                        }
                    }
                }
            }
        },
        "/deploy/traefik": {
            "post": {
                "description": "Deploy with a dagent compatible configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deploy",
                    "traefik"
                ],
                "summary": "Deploy a traefik instance, fails if there is one already running",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TraefikDeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.TraefikDeployResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete container with name traefik",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deploy",
                    "traefik"
                ],
                "summary": "Stops/removes running traefik container",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.TraefikDeployResponse"
                        }
                    }
                }
            }
        },
        "/deploy/version": {
            "post": {
                "description": "Deployment with all configuration and version, if one of the deployment fail, the response still OK",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deploy",
                    "batch"
                ],
                "summary": "Deploy a Complete Product with Version Info",
                "parameters": [
                    {
                        "description": "Batch deploy with version data",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.DeployVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.DeployImageResponse"
                            }
                        }
                    }
                }
            }
        },
        "/update": {
            "post": {
                "description": "Incoming webhook triggers a one-shot check for updates in the configured remote registry",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Updates running agent",
                "parameters": [
                    {
                        "description": "Webhook auth data",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWebhook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Version is formatted as \"\u003cagent-version\u003e-\u003ccommit-hash\u003e \"(\u003cbuild-date\u003e)\", also available on the /version path",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/text"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Get version string of the agent container",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/versions/{instance}": {
            "get": {
                "description": "Deployed versions are present in the filesystem as yml files per instance, this queries for an instance's versions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get deployed versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance or prefix name",
                        "name": "instance",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.ReleaseDoc"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "blkiodev.ThrottleDevice": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "rate": {
                    "type": "integer"
                }
            }
        },
        "blkiodev.WeightDevice": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "container.Config": {
            "type": "object",
            "properties": {
                "argsEscaped": {
                    "description": "True if command is already escaped (meaning treat as a command line) (Windows specific).",
                    "type": "boolean"
                },
                "attachStderr": {
                    "description": "Attach the standard error",
                    "type": "boolean"
                },
                "attachStdin": {
                    "description": "Attach the standard input, makes possible user interaction",
                    "type": "boolean"
                },
                "attachStdout": {
                    "description": "Attach the standard output",
                    "type": "boolean"
                },
                "cmd": {
                    "description": "Applicable to UNIX platforms",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domainname": {
                    "description": "Domainname",
                    "type": "string"
                },
                "entrypoint": {
                    "description": "Applicable to UNIX platforms",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variable to set in the container",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exposedPorts": {
                    "description": "List of exposed ports",
                    "$ref": "#/definitions/nat.PortSet"
                },
                "healthcheck": {
                    "description": "Healthcheck describes how to check the container is healthy",
                    "$ref": "#/definitions/container.HealthConfig"
                },
                "hostname": {
                    "description": "Hostname",
                    "type": "string"
                },
                "image": {
                    "description": "Name of the image as it was passed by the operator (e.g. could be symbolic)",
                    "type": "string"
                },
                "labels": {
                    "description": "List of labels set to this container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "macAddress": {
                    "description": "Mac Address of the container",
                    "type": "string"
                },
                "networkDisabled": {
                    "description": "Is network disabled",
                    "type": "boolean"
                },
                "onBuild": {
                    "description": "ONBUILD metadata that were defined on the image Dockerfile",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "openStdin": {
                    "description": "Open stdin",
                    "type": "boolean"
                },
                "shell": {
                    "description": "Applicable to UNIX platforms",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stdinOnce": {
                    "description": "If true, close stdin after the 1 attached client disconnects.",
                    "type": "boolean"
                },
                "stopSignal": {
                    "description": "Signal to stop a container",
                    "type": "string"
                },
                "stopTimeout": {
                    "description": "Timeout (in seconds) to stop a container",
                    "type": "integer"
                },
                "tty": {
                    "description": "Attach standard streams to a tty, including stdin if it is not closed.",
                    "type": "boolean"
                },
                "user": {
                    "description": "User that will run the command(s) inside the container, also support user:group",
                    "type": "string"
                },
                "volumes": {
                    "description": "List of volumes (mounts) used for the container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "workingDir": {
                    "description": "Current directory (PWD) in the command will be launched",
                    "type": "string"
                }
            }
        },
        "container.DeviceMapping": {
            "type": "object",
            "properties": {
                "cgroupPermissions": {
                    "type": "string"
                },
                "pathInContainer": {
                    "type": "string"
                },
                "pathOnHost": {
                    "type": "string"
                }
            }
        },
        "container.DeviceRequest": {
            "type": "object",
            "properties": {
                "capabilities": {
                    "description": "An OR list of AND lists of device capabilities (e.g. \"gpu\")",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "count": {
                    "description": "Number of devices to request (-1 = All)",
                    "type": "integer"
                },
                "deviceIDs": {
                    "description": "List of device IDs as recognizable by the device driver",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "driver": {
                    "description": "Name of device driver",
                    "type": "string"
                },
                "options": {
                    "description": "Options to pass onto the device driver",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "container.HealthConfig": {
            "type": "object",
            "properties": {
                "interval": {
                    "description": "Zero means to inherit. Durations are expressed as integer nanoseconds.",
                    "type": "integer"
                },
                "retries": {
                    "description": "Retries is the number of consecutive failures needed to consider a container as unhealthy.\nZero means inherit.",
                    "type": "integer"
                },
                "startPeriod": {
                    "description": "Zero means to inherit. Durations are expressed as integer nanoseconds.",
                    "type": "integer"
                },
                "test": {
                    "description": "Test is the test to perform to check that the container is healthy.\nAn empty slice means to inherit the default.\nThe options are:\n{} : inherit healthcheck\n{\"NONE\"} : disable healthcheck\n{\"CMD\", args...} : exec arguments directly\n{\"CMD-SHELL\", command} : run command with system's default shell",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeout": {
                    "description": "Zero means to inherit. Durations are expressed as integer nanoseconds.",
                    "type": "integer"
                }
            }
        },
        "container.HostConfig": {
            "type": "object",
            "properties": {
                "CpuCount": {
                    "description": "Applicable to Windows",
                    "type": "integer"
                },
                "CpuPercent": {
                    "description": "CPU percent",
                    "type": "integer"
                },
                "CpuPeriod": {
                    "description": "CPU CFS (Completely Fair Scheduler) period",
                    "type": "integer"
                },
                "CpuQuota": {
                    "description": "CPU CFS (Completely Fair Scheduler) quota",
                    "type": "integer"
                },
                "CpuRealtimePeriod": {
                    "description": "CPU real-time period",
                    "type": "integer"
                },
                "CpuRealtimeRuntime": {
                    "description": "CPU real-time runtime",
                    "type": "integer"
                },
                "CpuShares": {
                    "description": "Applicable to all platforms",
                    "type": "integer"
                },
                "Dns": {
                    "description": "List of DNS server to lookup",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "DnsOptions": {
                    "description": "List of DNSOption to look for",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "DnsSearch": {
                    "description": "List of DNSSearch to look for",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "NanoCpus": {
                    "description": "CPU quota in units of 10\u003csup\u003e-9\u003c/sup\u003e CPUs.",
                    "type": "integer"
                },
                "autoRemove": {
                    "description": "Automatically remove container when it exits",
                    "type": "boolean"
                },
                "binds": {
                    "description": "Applicable to all platforms",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blkioDeviceReadBps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/blkiodev.ThrottleDevice"
                    }
                },
                "blkioDeviceReadIOps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/blkiodev.ThrottleDevice"
                    }
                },
                "blkioDeviceWriteBps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/blkiodev.ThrottleDevice"
                    }
                },
                "blkioDeviceWriteIOps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/blkiodev.ThrottleDevice"
                    }
                },
                "blkioWeight": {
                    "description": "Block IO weight (relative weight vs. other containers)",
                    "type": "integer"
                },
                "blkioWeightDevice": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/blkiodev.WeightDevice"
                    }
                },
                "capAdd": {
                    "description": "Applicable to UNIX platforms",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "capDrop": {
                    "description": "Applicable to UNIX platforms",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cgroup": {
                    "description": "Cgroup to use for the container",
                    "type": "string"
                },
                "cgroupParent": {
                    "description": "Applicable to UNIX platforms",
                    "type": "string"
                },
                "cgroupnsMode": {
                    "description": "Cgroup namespace mode to use for the container",
                    "type": "string"
                },
                "consoleSize": {
                    "description": "Applicable to Windows",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "containerIDFile": {
                    "description": "File (path) where the containerId is written",
                    "type": "string"
                },
                "cpusetCpus": {
                    "description": "CpusetCpus 0-2, 0,1",
                    "type": "string"
                },
                "cpusetMems": {
                    "description": "CpusetMems 0-2, 0,1",
                    "type": "string"
                },
                "deviceCgroupRules": {
                    "description": "List of rule to be added to the device cgroup",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deviceRequests": {
                    "description": "List of device requests for device drivers",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container.DeviceRequest"
                    }
                },
                "devices": {
                    "description": "List of devices to map inside the container",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container.DeviceMapping"
                    }
                },
                "extraHosts": {
                    "description": "List of extra hosts",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupAdd": {
                    "description": "List of additional groups that the container process will run as",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "init": {
                    "description": "Run a custom init inside the container, if null, use the daemon's configured settings",
                    "type": "boolean"
                },
                "iomaximumBandwidth": {
                    "description": "Maximum IO in bytes per second for the container system drive",
                    "type": "integer"
                },
                "iomaximumIOps": {
                    "description": "Maximum IOps for the container system drive",
                    "type": "integer"
                },
                "ipcMode": {
                    "description": "IPC namespace to use for the container",
                    "type": "string"
                },
                "isolation": {
                    "description": "Isolation technology of the container (e.g. default, hyperv)",
                    "type": "string"
                },
                "kernelMemory": {
                    "description": "Kernel memory limit (in bytes), Deprecated: kernel 5.4 deprecated kmem.limit_in_bytes",
                    "type": "integer"
                },
                "kernelMemoryTCP": {
                    "description": "Hard limit for kernel TCP buffer memory (in bytes)",
                    "type": "integer"
                },
                "links": {
                    "description": "List of links (in the name:alias form)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logConfig": {
                    "description": "Configuration of the logs for this container",
                    "$ref": "#/definitions/container.LogConfig"
                },
                "maskedPaths": {
                    "description": "MaskedPaths is the list of paths to be masked inside the container (this overrides the default set of paths)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "memory": {
                    "description": "Memory limit (in bytes)",
                    "type": "integer"
                },
                "memoryReservation": {
                    "description": "Memory soft limit (in bytes)",
                    "type": "integer"
                },
                "memorySwap": {
                    "description": "Total memory usage (memory + swap); set ` + "`" + `-1` + "`" + ` to enable unlimited swap",
                    "type": "integer"
                },
                "memorySwappiness": {
                    "description": "Tuning container memory swappiness behaviour",
                    "type": "integer"
                },
                "mounts": {
                    "description": "Mounts specs used by the container",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mount.Mount"
                    }
                },
                "networkMode": {
                    "description": "Network mode to use for the container",
                    "type": "string"
                },
                "oomKillDisable": {
                    "description": "Whether to disable OOM Killer or not",
                    "type": "boolean"
                },
                "oomScoreAdj": {
                    "description": "Container preference for OOM-killing",
                    "type": "integer"
                },
                "pidMode": {
                    "description": "PID namespace to use for the container",
                    "type": "string"
                },
                "pidsLimit": {
                    "description": "Setting PIDs limit for a container; Set ` + "`" + `0` + "`" + ` or ` + "`" + `-1` + "`" + ` for unlimited, or ` + "`" + `null` + "`" + ` to not change.",
                    "type": "integer"
                },
                "portBindings": {
                    "description": "Port mapping between the exposed port (container) and the host",
                    "$ref": "#/definitions/nat.PortMap"
                },
                "privileged": {
                    "description": "Is the container in privileged mode",
                    "type": "boolean"
                },
                "publishAllPorts": {
                    "description": "Should docker publish all exposed port for the container",
                    "type": "boolean"
                },
                "readonlyPaths": {
                    "description": "ReadonlyPaths is the list of paths to be set as read-only inside the container (this overrides the default set of paths)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readonlyRootfs": {
                    "description": "Is the container root filesystem in read-only",
                    "type": "boolean"
                },
                "restartPolicy": {
                    "description": "Restart policy to be used for the container",
                    "$ref": "#/definitions/container.RestartPolicy"
                },
                "runtime": {
                    "description": "Runtime to use with this container",
                    "type": "string"
                },
                "securityOpt": {
                    "description": "List of string values to customize labels for MLS systems, such as SELinux.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "shmSize": {
                    "description": "Total shm memory usage",
                    "type": "integer"
                },
                "storageOpt": {
                    "description": "Storage driver options per container.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sysctls": {
                    "description": "List of Namespaced sysctls used for the container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tmpfs": {
                    "description": "List of tmpfs (mounts) used for the container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ulimits": {
                    "description": "List of ulimits to be set in the container",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/units.Ulimit"
                    }
                },
                "usernsMode": {
                    "description": "The user namespace to use for the container",
                    "type": "string"
                },
                "utsmode": {
                    "description": "UTS namespace to use for the container",
                    "type": "string"
                },
                "volumeDriver": {
                    "description": "Name of the volume driver used to mount volumes",
                    "type": "string"
                },
                "volumesFrom": {
                    "description": "List of volumes to take from other container",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "container.LogConfig": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "container.RestartPolicy": {
            "type": "object",
            "properties": {
                "maximumRetryCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "containerbuilder.PortBinding": {
            "type": "object",
            "required": [
                "exposedPort",
                "portBinding"
            ],
            "properties": {
                "exposedPort": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 0
                },
                "portBinding": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 0
                }
            }
        },
        "containerbuilder.PortRange": {
            "type": "object",
            "required": [
                "from",
                "to"
            ],
            "properties": {
                "from": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 0
                },
                "to": {
                    "type": "integer",
                    "maximum": 65535
                }
            }
        },
        "containerbuilder.PortRangeBinding": {
            "type": "object",
            "required": [
                "external",
                "internal"
            ],
            "properties": {
                "external": {
                    "$ref": "#/definitions/containerbuilder.PortRange"
                },
                "internal": {
                    "$ref": "#/definitions/containerbuilder.PortRange"
                }
            }
        },
        "containerbuilder.RegistryAuth": {
            "type": "object",
            "required": [
                "name",
                "password",
                "url",
                "user"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "model.TraefikDeployRequest": {
            "type": "object",
            "properties": {
                "TLS": {
                    "description": "if services exposed with certs, default: false",
                    "type": "boolean"
                },
                "acmeMail": {
                    "description": "the email address for expiry notifications, sent by acme",
                    "type": "string"
                },
                "logLevel": {
                    "description": "LogLevel defaults to INFO",
                    "type": "string"
                }
            }
        },
        "model.TraefikDeployResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model.UpdateWebhook": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "mount.BindOptions": {
            "type": "object",
            "properties": {
                "nonRecursive": {
                    "type": "boolean"
                },
                "propagation": {
                    "type": "string"
                }
            }
        },
        "mount.Driver": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "mount.Mount": {
            "type": "object",
            "properties": {
                "bindOptions": {
                    "$ref": "#/definitions/mount.BindOptions"
                },
                "consistency": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "source": {
                    "description": "Source specifies the name of the mount. Depending on mount type, this\nmay be a volume name or a host path, or even ignored.\nSource is not supported for tmpfs (must be an empty value)",
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "tmpfsOptions": {
                    "$ref": "#/definitions/mount.TmpfsOptions"
                },
                "type": {
                    "type": "string"
                },
                "volumeOptions": {
                    "$ref": "#/definitions/mount.VolumeOptions"
                }
            }
        },
        "mount.TmpfsOptions": {
            "type": "object",
            "properties": {
                "mode": {
                    "description": "Mode of the tmpfs upon creation",
                    "type": "integer"
                },
                "sizeBytes": {
                    "description": "Size sets the size of the tmpfs, in bytes.\n\nThis will be converted to an operating system specific value\ndepending on the host. For example, on linux, it will be converted to\nuse a 'k', 'm' or 'g' syntax. BSD, though not widely supported with\ndocker, uses a straight byte value.\n\nPercentages are not supported.",
                    "type": "integer"
                }
            }
        },
        "mount.VolumeOptions": {
            "type": "object",
            "properties": {
                "driverConfig": {
                    "$ref": "#/definitions/mount.Driver"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "noCopy": {
                    "type": "boolean"
                }
            }
        },
        "nat.PortBinding": {
            "type": "object",
            "properties": {
                "HostIp": {
                    "description": "HostIP is the host IP Address",
                    "type": "string"
                },
                "hostPort": {
                    "description": "HostPort is the host port number",
                    "type": "string"
                }
            }
        },
        "nat.PortMap": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/nat.PortBinding"
                }
            }
        },
        "nat.PortSet": {
            "type": "object",
            "additionalProperties": {
                "type": "object"
            }
        },
        "network.Address": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "prefixLen": {
                    "type": "integer"
                }
            }
        },
        "network.EndpointIPAMConfig": {
            "type": "object",
            "properties": {
                "ipv4Address": {
                    "type": "string"
                },
                "ipv6Address": {
                    "type": "string"
                },
                "linkLocalIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "network.EndpointSettings": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "driverOpts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpointID": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "globalIPv6Address": {
                    "type": "string"
                },
                "globalIPv6PrefixLen": {
                    "type": "integer"
                },
                "ipaddress": {
                    "type": "string"
                },
                "ipamconfig": {
                    "description": "Configurations",
                    "$ref": "#/definitions/network.EndpointIPAMConfig"
                },
                "ipprefixLen": {
                    "type": "integer"
                },
                "ipv6Gateway": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "macAddress": {
                    "type": "string"
                },
                "networkID": {
                    "description": "Operational data",
                    "type": "string"
                }
            }
        },
        "types.Container": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "created": {
                    "type": "integer"
                },
                "hostConfig": {
                    "type": "object",
                    "properties": {
                        "networkMode": {
                            "type": "string"
                        }
                    }
                },
                "image": {
                    "type": "string"
                },
                "imageID": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MountPoint"
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networkSettings": {
                    "$ref": "#/definitions/types.SummaryNetworkSettings"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Port"
                    }
                },
                "sizeRootFs": {
                    "type": "integer"
                },
                "sizeRw": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.ContainerJSON": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "appArmorProfile": {
                    "type": "string"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "config": {
                    "$ref": "#/definitions/container.Config"
                },
                "created": {
                    "type": "string"
                },
                "driver": {
                    "type": "string"
                },
                "execIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "graphDriver": {
                    "$ref": "#/definitions/types.GraphDriverData"
                },
                "hostConfig": {
                    "$ref": "#/definitions/container.HostConfig"
                },
                "hostnamePath": {
                    "type": "string"
                },
                "hostsPath": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "logPath": {
                    "type": "string"
                },
                "mountLabel": {
                    "type": "string"
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MountPoint"
                    }
                },
                "name": {
                    "type": "string"
                },
                "networkSettings": {
                    "$ref": "#/definitions/types.NetworkSettings"
                },
                "node": {
                    "description": "Node is only propagated by Docker Swarm standalone API",
                    "$ref": "#/definitions/types.ContainerNode"
                },
                "path": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "processLabel": {
                    "type": "string"
                },
                "resolvConfPath": {
                    "type": "string"
                },
                "restartCount": {
                    "type": "integer"
                },
                "sizeRootFs": {
                    "type": "integer"
                },
                "sizeRw": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/types.ContainerState"
                }
            }
        },
        "types.ContainerNode": {
            "type": "object",
            "properties": {
                "IP": {
                    "type": "string"
                },
                "addr": {
                    "type": "string"
                },
                "cpus": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "memory": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.ContainerState": {
            "type": "object",
            "properties": {
                "dead": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "exitCode": {
                    "type": "integer"
                },
                "finishedAt": {
                    "type": "string"
                },
                "health": {
                    "$ref": "#/definitions/types.Health"
                },
                "oomkilled": {
                    "type": "boolean"
                },
                "paused": {
                    "type": "boolean"
                },
                "pid": {
                    "type": "integer"
                },
                "restarting": {
                    "type": "boolean"
                },
                "running": {
                    "type": "boolean"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "description": "String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\"",
                    "type": "string"
                }
            }
        },
        "types.GraphDriverData": {
            "type": "object",
            "properties": {
                "Data": {
                    "description": "data\nRequired: true",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "name\nRequired: true",
                    "type": "string"
                }
            }
        },
        "types.Health": {
            "type": "object",
            "properties": {
                "failingStreak": {
                    "description": "FailingStreak is the number of consecutive failures",
                    "type": "integer"
                },
                "log": {
                    "description": "Log contains the last few results (oldest first)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HealthcheckResult"
                    }
                },
                "status": {
                    "description": "Status is one of Starting, Healthy or Unhealthy",
                    "type": "string"
                }
            }
        },
        "types.HealthcheckResult": {
            "type": "object",
            "properties": {
                "end": {
                    "description": "End is the time this check ended",
                    "type": "string"
                },
                "exitCode": {
                    "description": "ExitCode meanings: 0=healthy, 1=unhealthy, 2=reserved (considered unhealthy), else=error running probe",
                    "type": "integer"
                },
                "output": {
                    "description": "Output from last check",
                    "type": "string"
                },
                "start": {
                    "description": "Start is the time this check started",
                    "type": "string"
                }
            }
        },
        "types.MountPoint": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "driver": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "propagation": {
                    "type": "string"
                },
                "rw": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.NetworkSettings": {
            "type": "object",
            "properties": {
                "bridge": {
                    "description": "Bridge is the Bridge name the network uses(e.g. ` + "`" + `docker0` + "`" + `)",
                    "type": "string"
                },
                "endpointID": {
                    "description": "EndpointID uniquely represents a service endpoint in a Sandbox",
                    "type": "string"
                },
                "gateway": {
                    "description": "Gateway holds the gateway address for the network",
                    "type": "string"
                },
                "globalIPv6Address": {
                    "description": "GlobalIPv6Address holds network's global IPv6 address",
                    "type": "string"
                },
                "globalIPv6PrefixLen": {
                    "description": "GlobalIPv6PrefixLen represents mask length of network's global IPv6 address",
                    "type": "integer"
                },
                "hairpinMode": {
                    "description": "HairpinMode specifies if hairpin NAT should be enabled on the virtual interface",
                    "type": "boolean"
                },
                "ipaddress": {
                    "description": "IPAddress holds the IPv4 address for the network",
                    "type": "string"
                },
                "ipprefixLen": {
                    "description": "IPPrefixLen represents mask length of network's IPv4 address",
                    "type": "integer"
                },
                "ipv6Gateway": {
                    "description": "IPv6Gateway holds gateway address specific for IPv6",
                    "type": "string"
                },
                "linkLocalIPv6Address": {
                    "description": "LinkLocalIPv6Address is an IPv6 unicast address using the link-local prefix",
                    "type": "string"
                },
                "linkLocalIPv6PrefixLen": {
                    "description": "LinkLocalIPv6PrefixLen is the prefix length of an IPv6 unicast address",
                    "type": "integer"
                },
                "macAddress": {
                    "description": "MacAddress holds the MAC address for the network",
                    "type": "string"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/network.EndpointSettings"
                    }
                },
                "ports": {
                    "description": "Ports is a collection of PortBinding indexed by Port",
                    "$ref": "#/definitions/nat.PortMap"
                },
                "sandboxID": {
                    "description": "SandboxID uniquely represents a container's network stack",
                    "type": "string"
                },
                "sandboxKey": {
                    "description": "SandboxKey identifies the sandbox",
                    "type": "string"
                },
                "secondaryIPAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.Address"
                    }
                },
                "secondaryIPv6Addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.Address"
                    }
                }
            }
        },
        "types.Port": {
            "type": "object",
            "properties": {
                "IP": {
                    "description": "Host IP address that the container's port is mapped to",
                    "type": "string"
                },
                "PrivatePort": {
                    "description": "Port on the container\nRequired: true",
                    "type": "integer"
                },
                "PublicPort": {
                    "description": "Port exposed on the host",
                    "type": "integer"
                },
                "Type": {
                    "description": "type\nRequired: true",
                    "type": "string"
                }
            }
        },
        "types.SummaryNetworkSettings": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/network.EndpointSettings"
                    }
                }
            }
        },
        "units.Ulimit": {
            "type": "object",
            "properties": {
                "hard": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "soft": {
                    "type": "integer"
                }
            }
        },
        "utils.ReleaseContainer": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "successful": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "utils.ReleaseDoc": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.ReleaseContainer"
                    }
                },
                "date": {
                    "type": "string"
                },
                "releaseNotes": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "v1.ConfigContainer": {
            "type": "object",
            "required": [
                "image",
                "path",
                "volume"
            ],
            "properties": {
                "image": {
                    "type": "string"
                },
                "keepFiles": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "volume": {
                    "type": "string"
                }
            }
        },
        "v1.ContainerConfig": {
            "type": "object",
            "required": [
                "container"
            ],
            "properties": {
                "args": {
                    "description": "args are added to the command",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "the initial command of a container have mixed terms\ndocker --\u003e k8s: entrypoint =\u003e command, cmd =\u003e args\nwe use the k8s term here\ncommand is the active process of the container",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "configContainer": {
                    "description": "config container is spawned as an initcontainer copying files to a shared volume",
                    "$ref": "#/definitions/v1.ConfigContainer"
                },
                "container": {
                    "description": "name of the container used for service, configmap names, various component names",
                    "type": "string"
                },
                "containerPreName": {
                    "description": "ContainerPreName identifies namespace to be used",
                    "type": "string"
                },
                "customHeaders": {
                    "description": "custom header configuration",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deploymentStrategy": {
                    "description": "k8s-only-section\nDeployments strategy, on deployment how to restart underlying pods\nValues: Recreate (all-at-once), Rolling(one-by-one only if succeeds)",
                    "type": "string"
                },
                "environment": {
                    "description": "environment variables list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "expose": {
                    "description": "create an ingress object or not",
                    "type": "boolean"
                },
                "exposeTls": {
                    "description": "use nginx tls configuration",
                    "type": "boolean"
                },
                "extraLBAnnotations": {
                    "description": "ExtraLBAnnotations\nlots of cloud provider specific configs can be put into annotations\nthey vary enough to have it exposed like this",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "healthCheck": {
                    "description": "health check configuration",
                    "$ref": "#/definitions/v1.HealthCheckConfig"
                },
                "importContainer": {
                    "description": "import container uses rclone to copy over files before container startup",
                    "$ref": "#/definitions/v1.ImportContainer"
                },
                "ingressHost": {
                    "description": "ingress hostname, env value used by default, can be overridden here",
                    "type": "string"
                },
                "ingressName": {
                    "description": "ingress prefix before hostname, ` + "`" + `containerName.containerPrefix.\u003cingress root\u003e` + "`" + ` by default, this replaces both before root",
                    "type": "string"
                },
                "ingressUploadLimit": {
                    "description": "Set endpoint upload limit, default value is: 1m\nfor docker hosts, this is needs to be bytes: 1000000 ~1m",
                    "type": "string"
                },
                "logConfig": {
                    "description": "dagent only",
                    "$ref": "#/definitions/container.LogConfig"
                },
                "mount": {
                    "description": "mount list, if a name starts with @ it can be used by multiple components eg @data|/target/mount/path",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networkMode": {
                    "description": "bridge(container, defeault) host, none or network name",
                    "type": "string"
                },
                "port": {
                    "description": "portbinding list contains external/interal ports",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/containerbuilder.PortBinding"
                    }
                },
                "portRanges": {
                    "description": "Port ranges to be exposed ! no native range support in k8s",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/containerbuilder.PortRangeBinding"
                    }
                },
                "proxyHeaders": {
                    "description": "add proxy and cors headers",
                    "type": "boolean"
                },
                "resourceConfig": {
                    "description": "resource management",
                    "$ref": "#/definitions/v1.ResourceConfig"
                },
                "restartPolicy": {
                    "type": "string"
                },
                "runtimeConfigType": {
                    "description": "the type of the runtime text provided eg. dotnet-appsettings",
                    "type": "string"
                },
                "shared": {
                    "description": "if put together with another instances consume their shared configs eg. -common config map, generated from here",
                    "type": "boolean"
                },
                "tty": {
                    "description": "if we need to spawn a pseudo-terminal",
                    "type": "boolean"
                },
                "useLoadBalancer": {
                    "description": "Expose service using external IP\nalso sets the externalTrafficPolcy to \"local\"",
                    "type": "boolean"
                },
                "user": {
                    "description": "container user id",
                    "type": "integer"
                },
                "volumes": {
                    "description": "volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }
                }
            }
        },
        "v1.ContainerStatusResponse": {
            "type": "object",
            "required": [
                "repository",
                "state",
                "status",
                "tag"
            ],
            "properties": {
                "repository": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "v1.DeployImageRequest": {
            "type": "object",
            "required": [
                "ContainerConfig",
                "ImageName",
                "InstanceConfig",
                "RequestId",
                "Tag"
            ],
            "properties": {
                "ContainerConfig": {
                    "$ref": "#/definitions/v1.ContainerConfig"
                },
                "ImageName": {
                    "type": "string"
                },
                "InstanceConfig": {
                    "$ref": "#/definitions/v1.InstanceConfig"
                },
                "Issuer": {
                    "type": "string"
                },
                "Registry": {
                    "type": "string"
                },
                "RegistryAuth": {
                    "$ref": "#/definitions/containerbuilder.RegistryAuth"
                },
                "RequestId": {
                    "type": "string"
                },
                "RuntimeConfig": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "Tag": {
                    "type": "string"
                }
            }
        },
        "v1.DeployImageResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "imageName": {
                    "type": "string"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requestId": {
                    "type": "string"
                },
                "started": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "v1.DeployVersionRequest": {
            "type": "object",
            "required": [
                "version"
            ],
            "properties": {
                "deployImageRequest": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DeployImageRequest"
                    }
                },
                "releaseNotes": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "v1.Error": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "v1.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Error"
                    }
                }
            }
        },
        "v1.HealthCheckConfig": {
            "type": "object",
            "properties": {
                "Port": {
                    "type": "integer"
                },
                "livenessProbe": {
                    "$ref": "#/definitions/v1.Probe"
                },
                "readinessProbe": {
                    "$ref": "#/definitions/v1.Probe"
                },
                "startupProbe": {
                    "$ref": "#/definitions/v1.Probe"
                }
            }
        },
        "v1.ImportContainer": {
            "type": "object",
            "required": [
                "command",
                "environments",
                "volume"
            ],
            "properties": {
                "command": {
                    "description": "for azureblob storage use ` + "`" + `sync :azuresync:\u003ccontainer\u003e/\u003cproduct-guid\u003e/\u003cversion-guid\u003e/\u003ccomponent\u003e/\u003cvolume\u003e` + "`" + `",
                    "type": "string"
                },
                "environments": {
                    "description": "environment used to pass down secrets to the container\nfor Azure refer to rclone docs: https://rclone.org/azureblob/\none way to go either RCLONE_AZUREBLOB_ACCOUNT with RCLONE_AZUREBLOB_KEY\nor using RCLONE_AZUREBLOB_SAS_URL list, read privileges needed",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "volume": {
                    "description": "target volume name, volume name that is present on the deployment",
                    "type": "string"
                }
            }
        },
        "v1.InstanceConfig": {
            "type": "object",
            "required": [
                "containerPreName"
            ],
            "properties": {
                "containerPreName": {
                    "description": "prefix of the container, identifies namespace",
                    "type": "string"
                },
                "environment": {
                    "description": "variables for instance; configmaps: name-common, name must be defined",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mountPath": {
                    "description": "not-in-use",
                    "type": "string"
                },
                "name": {
                    "description": "name of the instance eg. configmaps",
                    "type": "string"
                },
                "registry": {
                    "description": "not-in-use/unimplemented; registry is taken from containerConfig",
                    "type": "string"
                },
                "repositoryPreName": {
                    "description": "not-in-use/unimplemented; git repository prefix",
                    "type": "string"
                },
                "sharedEnvironment": {
                    "description": "namespace global envs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "useSharedEnvs": {
                    "description": "use preexisting namespaced envs",
                    "type": "boolean"
                }
            }
        },
        "v1.Probe": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                }
            }
        },
        "v1.ResourceConfig": {
            "type": "object",
            "properties": {
                "limits": {
                    "$ref": "#/definitions/v1.Resources"
                },
                "requests": {
                    "$ref": "#/definitions/v1.Resources"
                }
            }
        },
        "v1.Resources": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                }
            }
        },
        "v1.Volume": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "class": {
                    "description": "kubernetes only\nstorage classes depend on the cloud providers\n` + "`" + `kubectl get storageclasses.storage.k8s.io` + "`" + `\nusable values could be returned to the UI letting the user change",
                    "type": "string"
                },
                "name": {
                    "description": "name of the volume, the prefix will be the pod using it",
                    "type": "string"
                },
                "path": {
                    "description": "mount path of the given deployment",
                    "type": "string"
                },
                "size": {
                    "description": "required size, not guaranteed that the provisioned size will match\nsome PVCs support dynamic expansion/shrink, others not",
                    "type": "string"
                },
                "type": {
                    "description": "type of the volume: RO,RW,RWX,mem,tmp\nRO: readonly\nRW: readwrite once normal (default)\nRWX: readwrite many, shared volume within the instance\nmem: use inmemory tmpfs\ntmp: use tmpfs, with disk",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfoDagent holds exported Swagger Info so clients can modify it
var SwaggerInfoDagent = &swag.Spec{
	Version:          "2.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{"http"},
	Title:            "DAgent API Swagger",
	Description:      "DAgent server API docs. Scope: container management on remote nodes.",
	InfoInstanceName: "Dagent",
	SwaggerTemplate:  docTemplateDagent,
}

func init() {
	swag.Register(SwaggerInfoDagent.InstanceName(), SwaggerInfoDagent)
}
