// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protobuf/proto/crux.proto

package crux

import (
	context "context"
	common "github.com/dyrector-io/dyrectorio/protobuf/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CruxNodeClient is the client API for CruxNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CruxNodeClient interface {
	SubscribeNodeEventChannel(ctx context.Context, in *ServiceIdRequest, opts ...grpc.CallOption) (CruxNode_SubscribeNodeEventChannelClient, error)
	WatchContainerState(ctx context.Context, in *WatchContainerStateRequest, opts ...grpc.CallOption) (CruxNode_WatchContainerStateClient, error)
	SubscribeContainerLogChannel(ctx context.Context, in *WatchContainerLogRequest, opts ...grpc.CallOption) (CruxNode_SubscribeContainerLogChannelClient, error)
}

type cruxNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewCruxNodeClient(cc grpc.ClientConnInterface) CruxNodeClient {
	return &cruxNodeClient{cc}
}

func (c *cruxNodeClient) SubscribeNodeEventChannel(ctx context.Context, in *ServiceIdRequest, opts ...grpc.CallOption) (CruxNode_SubscribeNodeEventChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &CruxNode_ServiceDesc.Streams[0], "/crux.CruxNode/SubscribeNodeEventChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &cruxNodeSubscribeNodeEventChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CruxNode_SubscribeNodeEventChannelClient interface {
	Recv() (*NodeEventMessage, error)
	grpc.ClientStream
}

type cruxNodeSubscribeNodeEventChannelClient struct {
	grpc.ClientStream
}

func (x *cruxNodeSubscribeNodeEventChannelClient) Recv() (*NodeEventMessage, error) {
	m := new(NodeEventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cruxNodeClient) WatchContainerState(ctx context.Context, in *WatchContainerStateRequest, opts ...grpc.CallOption) (CruxNode_WatchContainerStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CruxNode_ServiceDesc.Streams[1], "/crux.CruxNode/WatchContainerState", opts...)
	if err != nil {
		return nil, err
	}
	x := &cruxNodeWatchContainerStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CruxNode_WatchContainerStateClient interface {
	Recv() (*common.ContainerStateListMessage, error)
	grpc.ClientStream
}

type cruxNodeWatchContainerStateClient struct {
	grpc.ClientStream
}

func (x *cruxNodeWatchContainerStateClient) Recv() (*common.ContainerStateListMessage, error) {
	m := new(common.ContainerStateListMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cruxNodeClient) SubscribeContainerLogChannel(ctx context.Context, in *WatchContainerLogRequest, opts ...grpc.CallOption) (CruxNode_SubscribeContainerLogChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &CruxNode_ServiceDesc.Streams[2], "/crux.CruxNode/SubscribeContainerLogChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &cruxNodeSubscribeContainerLogChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CruxNode_SubscribeContainerLogChannelClient interface {
	Recv() (*common.ContainerLogMessage, error)
	grpc.ClientStream
}

type cruxNodeSubscribeContainerLogChannelClient struct {
	grpc.ClientStream
}

func (x *cruxNodeSubscribeContainerLogChannelClient) Recv() (*common.ContainerLogMessage, error) {
	m := new(common.ContainerLogMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CruxNodeServer is the server API for CruxNode service.
// All implementations must embed UnimplementedCruxNodeServer
// for forward compatibility
type CruxNodeServer interface {
	SubscribeNodeEventChannel(*ServiceIdRequest, CruxNode_SubscribeNodeEventChannelServer) error
	WatchContainerState(*WatchContainerStateRequest, CruxNode_WatchContainerStateServer) error
	SubscribeContainerLogChannel(*WatchContainerLogRequest, CruxNode_SubscribeContainerLogChannelServer) error
	mustEmbedUnimplementedCruxNodeServer()
}

// UnimplementedCruxNodeServer must be embedded to have forward compatible implementations.
type UnimplementedCruxNodeServer struct {
}

func (UnimplementedCruxNodeServer) SubscribeNodeEventChannel(*ServiceIdRequest, CruxNode_SubscribeNodeEventChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNodeEventChannel not implemented")
}
func (UnimplementedCruxNodeServer) WatchContainerState(*WatchContainerStateRequest, CruxNode_WatchContainerStateServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchContainerState not implemented")
}
func (UnimplementedCruxNodeServer) SubscribeContainerLogChannel(*WatchContainerLogRequest, CruxNode_SubscribeContainerLogChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeContainerLogChannel not implemented")
}
func (UnimplementedCruxNodeServer) mustEmbedUnimplementedCruxNodeServer() {}

// UnsafeCruxNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CruxNodeServer will
// result in compilation errors.
type UnsafeCruxNodeServer interface {
	mustEmbedUnimplementedCruxNodeServer()
}

func RegisterCruxNodeServer(s grpc.ServiceRegistrar, srv CruxNodeServer) {
	s.RegisterService(&CruxNode_ServiceDesc, srv)
}

func _CruxNode_SubscribeNodeEventChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CruxNodeServer).SubscribeNodeEventChannel(m, &cruxNodeSubscribeNodeEventChannelServer{stream})
}

type CruxNode_SubscribeNodeEventChannelServer interface {
	Send(*NodeEventMessage) error
	grpc.ServerStream
}

type cruxNodeSubscribeNodeEventChannelServer struct {
	grpc.ServerStream
}

func (x *cruxNodeSubscribeNodeEventChannelServer) Send(m *NodeEventMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CruxNode_WatchContainerState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchContainerStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CruxNodeServer).WatchContainerState(m, &cruxNodeWatchContainerStateServer{stream})
}

type CruxNode_WatchContainerStateServer interface {
	Send(*common.ContainerStateListMessage) error
	grpc.ServerStream
}

type cruxNodeWatchContainerStateServer struct {
	grpc.ServerStream
}

func (x *cruxNodeWatchContainerStateServer) Send(m *common.ContainerStateListMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CruxNode_SubscribeContainerLogChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchContainerLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CruxNodeServer).SubscribeContainerLogChannel(m, &cruxNodeSubscribeContainerLogChannelServer{stream})
}

type CruxNode_SubscribeContainerLogChannelServer interface {
	Send(*common.ContainerLogMessage) error
	grpc.ServerStream
}

type cruxNodeSubscribeContainerLogChannelServer struct {
	grpc.ServerStream
}

func (x *cruxNodeSubscribeContainerLogChannelServer) Send(m *common.ContainerLogMessage) error {
	return x.ServerStream.SendMsg(m)
}

// CruxNode_ServiceDesc is the grpc.ServiceDesc for CruxNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CruxNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crux.CruxNode",
	HandlerType: (*CruxNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNodeEventChannel",
			Handler:       _CruxNode_SubscribeNodeEventChannel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchContainerState",
			Handler:       _CruxNode_WatchContainerState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeContainerLogChannel",
			Handler:       _CruxNode_SubscribeContainerLogChannel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/proto/crux.proto",
}

// CruxDeploymentClient is the client API for CruxDeployment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CruxDeploymentClient interface {
	SubscribeToDeploymentEvents(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (CruxDeployment_SubscribeToDeploymentEventsClient, error)
	SubscribeToDeploymentEditEvents(ctx context.Context, in *ServiceIdRequest, opts ...grpc.CallOption) (CruxDeployment_SubscribeToDeploymentEditEventsClient, error)
}

type cruxDeploymentClient struct {
	cc grpc.ClientConnInterface
}

func NewCruxDeploymentClient(cc grpc.ClientConnInterface) CruxDeploymentClient {
	return &cruxDeploymentClient{cc}
}

func (c *cruxDeploymentClient) SubscribeToDeploymentEvents(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (CruxDeployment_SubscribeToDeploymentEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CruxDeployment_ServiceDesc.Streams[0], "/crux.CruxDeployment/SubscribeToDeploymentEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &cruxDeploymentSubscribeToDeploymentEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CruxDeployment_SubscribeToDeploymentEventsClient interface {
	Recv() (*DeploymentProgressMessage, error)
	grpc.ClientStream
}

type cruxDeploymentSubscribeToDeploymentEventsClient struct {
	grpc.ClientStream
}

func (x *cruxDeploymentSubscribeToDeploymentEventsClient) Recv() (*DeploymentProgressMessage, error) {
	m := new(DeploymentProgressMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cruxDeploymentClient) SubscribeToDeploymentEditEvents(ctx context.Context, in *ServiceIdRequest, opts ...grpc.CallOption) (CruxDeployment_SubscribeToDeploymentEditEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CruxDeployment_ServiceDesc.Streams[1], "/crux.CruxDeployment/SubscribeToDeploymentEditEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &cruxDeploymentSubscribeToDeploymentEditEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CruxDeployment_SubscribeToDeploymentEditEventsClient interface {
	Recv() (*DeploymentEditEventMessage, error)
	grpc.ClientStream
}

type cruxDeploymentSubscribeToDeploymentEditEventsClient struct {
	grpc.ClientStream
}

func (x *cruxDeploymentSubscribeToDeploymentEditEventsClient) Recv() (*DeploymentEditEventMessage, error) {
	m := new(DeploymentEditEventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CruxDeploymentServer is the server API for CruxDeployment service.
// All implementations must embed UnimplementedCruxDeploymentServer
// for forward compatibility
type CruxDeploymentServer interface {
	SubscribeToDeploymentEvents(*IdRequest, CruxDeployment_SubscribeToDeploymentEventsServer) error
	SubscribeToDeploymentEditEvents(*ServiceIdRequest, CruxDeployment_SubscribeToDeploymentEditEventsServer) error
	mustEmbedUnimplementedCruxDeploymentServer()
}

// UnimplementedCruxDeploymentServer must be embedded to have forward compatible implementations.
type UnimplementedCruxDeploymentServer struct {
}

func (UnimplementedCruxDeploymentServer) SubscribeToDeploymentEvents(*IdRequest, CruxDeployment_SubscribeToDeploymentEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToDeploymentEvents not implemented")
}
func (UnimplementedCruxDeploymentServer) SubscribeToDeploymentEditEvents(*ServiceIdRequest, CruxDeployment_SubscribeToDeploymentEditEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToDeploymentEditEvents not implemented")
}
func (UnimplementedCruxDeploymentServer) mustEmbedUnimplementedCruxDeploymentServer() {}

// UnsafeCruxDeploymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CruxDeploymentServer will
// result in compilation errors.
type UnsafeCruxDeploymentServer interface {
	mustEmbedUnimplementedCruxDeploymentServer()
}

func RegisterCruxDeploymentServer(s grpc.ServiceRegistrar, srv CruxDeploymentServer) {
	s.RegisterService(&CruxDeployment_ServiceDesc, srv)
}

func _CruxDeployment_SubscribeToDeploymentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CruxDeploymentServer).SubscribeToDeploymentEvents(m, &cruxDeploymentSubscribeToDeploymentEventsServer{stream})
}

type CruxDeployment_SubscribeToDeploymentEventsServer interface {
	Send(*DeploymentProgressMessage) error
	grpc.ServerStream
}

type cruxDeploymentSubscribeToDeploymentEventsServer struct {
	grpc.ServerStream
}

func (x *cruxDeploymentSubscribeToDeploymentEventsServer) Send(m *DeploymentProgressMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CruxDeployment_SubscribeToDeploymentEditEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CruxDeploymentServer).SubscribeToDeploymentEditEvents(m, &cruxDeploymentSubscribeToDeploymentEditEventsServer{stream})
}

type CruxDeployment_SubscribeToDeploymentEditEventsServer interface {
	Send(*DeploymentEditEventMessage) error
	grpc.ServerStream
}

type cruxDeploymentSubscribeToDeploymentEditEventsServer struct {
	grpc.ServerStream
}

func (x *cruxDeploymentSubscribeToDeploymentEditEventsServer) Send(m *DeploymentEditEventMessage) error {
	return x.ServerStream.SendMsg(m)
}

// CruxDeployment_ServiceDesc is the grpc.ServiceDesc for CruxDeployment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CruxDeployment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crux.CruxDeployment",
	HandlerType: (*CruxDeploymentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToDeploymentEvents",
			Handler:       _CruxDeployment_SubscribeToDeploymentEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToDeploymentEditEvents",
			Handler:       _CruxDeployment_SubscribeToDeploymentEditEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/proto/crux.proto",
}

// CruxHealthClient is the client API for CruxHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CruxHealthClient interface {
	GetHealth(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type cruxHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewCruxHealthClient(cc grpc.ClientConnInterface) CruxHealthClient {
	return &cruxHealthClient{cc}
}

func (c *cruxHealthClient) GetHealth(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/crux.CruxHealth/getHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CruxHealthServer is the server API for CruxHealth service.
// All implementations must embed UnimplementedCruxHealthServer
// for forward compatibility
type CruxHealthServer interface {
	GetHealth(context.Context, *common.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedCruxHealthServer()
}

// UnimplementedCruxHealthServer must be embedded to have forward compatible implementations.
type UnimplementedCruxHealthServer struct {
}

func (UnimplementedCruxHealthServer) GetHealth(context.Context, *common.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedCruxHealthServer) mustEmbedUnimplementedCruxHealthServer() {}

// UnsafeCruxHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CruxHealthServer will
// result in compilation errors.
type UnsafeCruxHealthServer interface {
	mustEmbedUnimplementedCruxHealthServer()
}

func RegisterCruxHealthServer(s grpc.ServiceRegistrar, srv CruxHealthServer) {
	s.RegisterService(&CruxHealth_ServiceDesc, srv)
}

func _CruxHealth_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CruxHealthServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crux.CruxHealth/getHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CruxHealthServer).GetHealth(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CruxHealth_ServiceDesc is the grpc.ServiceDesc for CruxHealth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CruxHealth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crux.CruxHealth",
	HandlerType: (*CruxHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getHealth",
			Handler:    _CruxHealth_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/proto/crux.proto",
}
