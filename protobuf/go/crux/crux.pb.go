//*
// CRUX Protobuf definitions
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: protobuf/proto/crux.proto

package crux

import (
	common "github.com/dyrector-io/dyrectorio/protobuf/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserRole int32

const (
	UserRole_USER_ROLE_UNSPECIFIED UserRole = 0
	UserRole_USER                  UserRole = 1
	UserRole_OWNER                 UserRole = 2
	UserRole_ADMIN                 UserRole = 3
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "USER_ROLE_UNSPECIFIED",
		1: "USER",
		2: "OWNER",
		3: "ADMIN",
	}
	UserRole_value = map[string]int32{
		"USER_ROLE_UNSPECIFIED": 0,
		"USER":                  1,
		"OWNER":                 2,
		"ADMIN":                 3,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[0].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[0]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{0}
}

type UserStatus int32

const (
	UserStatus_USER_STATUS_UNSPECIFIED UserStatus = 0
	UserStatus_PENDING                 UserStatus = 1
	UserStatus_VERIFIED                UserStatus = 2
	UserStatus_EXPIRED                 UserStatus = 3
	UserStatus_DECLINED                UserStatus = 4
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "VERIFIED",
		3: "EXPIRED",
		4: "DECLINED",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_UNSPECIFIED": 0,
		"PENDING":                 1,
		"VERIFIED":                2,
		"EXPIRED":                 3,
		"DECLINED":                4,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[1].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[1]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{1}
}

type RegistryType int32

const (
	RegistryType_REGISTRY_TYPE_UNSPECIFIED RegistryType = 0
	RegistryType_V2                        RegistryType = 1
	RegistryType_HUB                       RegistryType = 2
	RegistryType_GITLAB                    RegistryType = 3
	RegistryType_GITHUB                    RegistryType = 4
	RegistryType_GOOGLE                    RegistryType = 5
	RegistryType_UNCHECKED                 RegistryType = 6
)

// Enum value maps for RegistryType.
var (
	RegistryType_name = map[int32]string{
		0: "REGISTRY_TYPE_UNSPECIFIED",
		1: "V2",
		2: "HUB",
		3: "GITLAB",
		4: "GITHUB",
		5: "GOOGLE",
		6: "UNCHECKED",
	}
	RegistryType_value = map[string]int32{
		"REGISTRY_TYPE_UNSPECIFIED": 0,
		"V2":                        1,
		"HUB":                       2,
		"GITLAB":                    3,
		"GITHUB":                    4,
		"GOOGLE":                    5,
		"UNCHECKED":                 6,
	}
)

func (x RegistryType) Enum() *RegistryType {
	p := new(RegistryType)
	*p = x
	return p
}

func (x RegistryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistryType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[2].Descriptor()
}

func (RegistryType) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[2]
}

func (x RegistryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistryType.Descriptor instead.
func (RegistryType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{2}
}

// Lifecycle:
// When a node connection is alive, the status is CONNECTED.
// If it disconnects, the status will be UNREACHABLE.
// When a node created, it is UNREACHEABLE until the user completes
// the install process.
type NodeConnectionStatus int32

const (
	NodeConnectionStatus_CONNECTION_STATUS_UNSPECIFIED NodeConnectionStatus = 0
	// Node was not yet connected or became unreachable
	NodeConnectionStatus_UNREACHABLE NodeConnectionStatus = 1
	// Node is running and connected
	NodeConnectionStatus_CONNECTED NodeConnectionStatus = 2
)

// Enum value maps for NodeConnectionStatus.
var (
	NodeConnectionStatus_name = map[int32]string{
		0: "CONNECTION_STATUS_UNSPECIFIED",
		1: "UNREACHABLE",
		2: "CONNECTED",
	}
	NodeConnectionStatus_value = map[string]int32{
		"CONNECTION_STATUS_UNSPECIFIED": 0,
		"UNREACHABLE":                   1,
		"CONNECTED":                     2,
	}
)

func (x NodeConnectionStatus) Enum() *NodeConnectionStatus {
	p := new(NodeConnectionStatus)
	*p = x
	return p
}

func (x NodeConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[3].Descriptor()
}

func (NodeConnectionStatus) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[3]
}

func (x NodeConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeConnectionStatus.Descriptor instead.
func (NodeConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{3}
}

type NodeType int32

const (
	NodeType_NODE_TYPE_UNSPECIFIED NodeType = 0
	NodeType_DOCKER                NodeType = 1
	NodeType_K8S                   NodeType = 2
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODE_TYPE_UNSPECIFIED",
		1: "DOCKER",
		2: "K8S",
	}
	NodeType_value = map[string]int32{
		"NODE_TYPE_UNSPECIFIED": 0,
		"DOCKER":                1,
		"K8S":                   2,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[4].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[4]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{4}
}

type NodeScriptType int32

const (
	NodeScriptType_NODE_SCRIPT_TYPE_UNSPECIFIED NodeScriptType = 0
	NodeScriptType_SHELL                        NodeScriptType = 1
	NodeScriptType_POWERSHELL                   NodeScriptType = 2
)

// Enum value maps for NodeScriptType.
var (
	NodeScriptType_name = map[int32]string{
		0: "NODE_SCRIPT_TYPE_UNSPECIFIED",
		1: "SHELL",
		2: "POWERSHELL",
	}
	NodeScriptType_value = map[string]int32{
		"NODE_SCRIPT_TYPE_UNSPECIFIED": 0,
		"SHELL":                        1,
		"POWERSHELL":                   2,
	}
)

func (x NodeScriptType) Enum() *NodeScriptType {
	p := new(NodeScriptType)
	*p = x
	return p
}

func (x NodeScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[5].Descriptor()
}

func (NodeScriptType) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[5]
}

func (x NodeScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeScriptType.Descriptor instead.
func (NodeScriptType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{5}
}

type VersionType int32

const (
	VersionType_VERSION_TYPE_UNSPECIFIED VersionType = 0
	VersionType_INCREMENTAL              VersionType = 1
	VersionType_ROLLING                  VersionType = 2
)

// Enum value maps for VersionType.
var (
	VersionType_name = map[int32]string{
		0: "VERSION_TYPE_UNSPECIFIED",
		1: "INCREMENTAL",
		2: "ROLLING",
	}
	VersionType_value = map[string]int32{
		"VERSION_TYPE_UNSPECIFIED": 0,
		"INCREMENTAL":              1,
		"ROLLING":                  2,
	}
)

func (x VersionType) Enum() *VersionType {
	p := new(VersionType)
	*p = x
	return p
}

func (x VersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[6].Descriptor()
}

func (VersionType) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[6]
}

func (x VersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionType.Descriptor instead.
func (VersionType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{6}
}

type DeploymentEventType int32

const (
	DeploymentEventType_DEPLOYMENT_EVENT_TYPE_UNSPECIFIED DeploymentEventType = 0
	DeploymentEventType_DEPLOYMENT_LOG                    DeploymentEventType = 1
	DeploymentEventType_DEPLOYMENT_STATUS                 DeploymentEventType = 2
	DeploymentEventType_CONTAINER_STATUS                  DeploymentEventType = 3
)

// Enum value maps for DeploymentEventType.
var (
	DeploymentEventType_name = map[int32]string{
		0: "DEPLOYMENT_EVENT_TYPE_UNSPECIFIED",
		1: "DEPLOYMENT_LOG",
		2: "DEPLOYMENT_STATUS",
		3: "CONTAINER_STATUS",
	}
	DeploymentEventType_value = map[string]int32{
		"DEPLOYMENT_EVENT_TYPE_UNSPECIFIED": 0,
		"DEPLOYMENT_LOG":                    1,
		"DEPLOYMENT_STATUS":                 2,
		"CONTAINER_STATUS":                  3,
	}
)

func (x DeploymentEventType) Enum() *DeploymentEventType {
	p := new(DeploymentEventType)
	*p = x
	return p
}

func (x DeploymentEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[7].Descriptor()
}

func (DeploymentEventType) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[7]
}

func (x DeploymentEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentEventType.Descriptor instead.
func (DeploymentEventType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{7}
}

type ServiceStatus int32

const (
	ServiceStatus_SERVICE_STATUS_UNSPECIFIED ServiceStatus = 0
	ServiceStatus_UNAVAILABLE                ServiceStatus = 1
	ServiceStatus_DISRUPTED                  ServiceStatus = 2
	ServiceStatus_OPERATIONAL                ServiceStatus = 3
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "SERVICE_STATUS_UNSPECIFIED",
		1: "UNAVAILABLE",
		2: "DISRUPTED",
		3: "OPERATIONAL",
	}
	ServiceStatus_value = map[string]int32{
		"SERVICE_STATUS_UNSPECIFIED": 0,
		"UNAVAILABLE":                1,
		"DISRUPTED":                  2,
		"OPERATIONAL":                3,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_proto_crux_proto_enumTypes[8].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_protobuf_proto_crux_proto_enumTypes[8]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{8}
}

type ServiceIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ServiceIdRequest) Reset() {
	*x = ServiceIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIdRequest) ProtoMessage() {}

func (x *ServiceIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIdRequest.ProtoReflect.Descriptor instead.
func (*ServiceIdRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{1}
}

func (x *IdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AuditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedBy string                 `protobuf:"bytes,100,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedBy *string                `protobuf:"bytes,102,opt,name=updatedBy,proto3,oneof" json:"updatedBy,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
}

func (x *AuditResponse) Reset() {
	*x = AuditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResponse) ProtoMessage() {}

func (x *AuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResponse.ProtoReflect.Descriptor instead.
func (*AuditResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{2}
}

func (x *AuditResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AuditResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AuditResponse) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *AuditResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *CreateEntityResponse) Reset() {
	*x = CreateEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEntityResponse) ProtoMessage() {}

func (x *CreateEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEntityResponse.ProtoReflect.Descriptor instead.
func (*CreateEntityResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEntityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateEntityResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UpdateEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *UpdateEntityResponse) Reset() {
	*x = UpdateEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityResponse) ProtoMessage() {}

func (x *UpdateEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityResponse.ProtoReflect.Descriptor instead.
func (*UpdateEntityResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateEntityResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// TEAM
type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateTeamRequest) Reset() {
	*x = UpdateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamRequest) ProtoMessage() {}

func (x *UpdateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTeamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateUserRoleInTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string   `protobuf:"bytes,100,opt,name=userId,proto3" json:"userId,omitempty"`
	Role   UserRole `protobuf:"varint,101,opt,name=role,proto3,enum=crux.UserRole" json:"role,omitempty"`
}

func (x *UpdateUserRoleInTeamRequest) Reset() {
	*x = UpdateUserRoleInTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRoleInTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleInTeamRequest) ProtoMessage() {}

func (x *UpdateUserRoleInTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleInTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleInTeamRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateUserRoleInTeamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRoleInTeamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserRoleInTeamRequest) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_USER_ROLE_UNSPECIFIED
}

type InviteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email     string  `protobuf:"bytes,100,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string  `protobuf:"bytes,101,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName  *string `protobuf:"bytes,102,opt,name=lastName,proto3,oneof" json:"lastName,omitempty"`
}

func (x *InviteUserRequest) Reset() {
	*x = InviteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserRequest) ProtoMessage() {}

func (x *InviteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserRequest.ProtoReflect.Descriptor instead.
func (*InviteUserRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{8}
}

func (x *InviteUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InviteUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InviteUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *InviteUserRequest) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

type ReinviteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string `protobuf:"bytes,100,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ReinviteUserRequest) Reset() {
	*x = ReinviteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReinviteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinviteUserRequest) ProtoMessage() {}

func (x *ReinviteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinviteUserRequest.ProtoReflect.Descriptor instead.
func (*ReinviteUserRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{9}
}

func (x *ReinviteUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReinviteUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteUserFromTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string `protobuf:"bytes,100,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *DeleteUserFromTeamRequest) Reset() {
	*x = DeleteUserFromTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserFromTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserFromTeamRequest) ProtoMessage() {}

func (x *DeleteUserFromTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserFromTeamRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserFromTeamRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteUserFromTeamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteUserFromTeamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *ActiveTeamUser `protobuf:"bytes,100,opt,name=user,proto3" json:"user,omitempty"`
	Teams       []*TeamResponse `protobuf:"bytes,1000,rep,name=teams,proto3" json:"teams,omitempty"`
	Invitations []*TeamResponse `protobuf:"bytes,1001,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *UserMetaResponse) Reset() {
	*x = UserMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetaResponse) ProtoMessage() {}

func (x *UserMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetaResponse.ProtoReflect.Descriptor instead.
func (*UserMetaResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{11}
}

func (x *UserMetaResponse) GetUser() *ActiveTeamUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserMetaResponse) GetTeams() []*TeamResponse {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *UserMetaResponse) GetInvitations() []*TeamResponse {
	if x != nil {
		return x.Invitations
	}
	return nil
}

type ActiveTeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveTeamId string     `protobuf:"bytes,100,opt,name=activeTeamId,proto3" json:"activeTeamId,omitempty"`
	Role         UserRole   `protobuf:"varint,101,opt,name=role,proto3,enum=crux.UserRole" json:"role,omitempty"`
	Status       UserStatus `protobuf:"varint,102,opt,name=status,proto3,enum=crux.UserStatus" json:"status,omitempty"`
}

func (x *ActiveTeamUser) Reset() {
	*x = ActiveTeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveTeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveTeamUser) ProtoMessage() {}

func (x *ActiveTeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveTeamUser.ProtoReflect.Descriptor instead.
func (*ActiveTeamUser) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{12}
}

func (x *ActiveTeamUser) GetActiveTeamId() string {
	if x != nil {
		return x.ActiveTeamId
	}
	return ""
}

func (x *ActiveTeamUser) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_USER_ROLE_UNSPECIFIED
}

func (x *ActiveTeamUser) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

type TeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TeamResponse) Reset() {
	*x = TeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamResponse) ProtoMessage() {}

func (x *TeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamResponse.ProtoReflect.Descriptor instead.
func (*TeamResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{13}
}

func (x *TeamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ActiveTeamDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string          `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Users []*UserResponse `protobuf:"bytes,1000,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ActiveTeamDetailsResponse) Reset() {
	*x = ActiveTeamDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveTeamDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveTeamDetailsResponse) ProtoMessage() {}

func (x *ActiveTeamDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveTeamDetailsResponse.ProtoReflect.Descriptor instead.
func (*ActiveTeamDetailsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{14}
}

func (x *ActiveTeamDetailsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveTeamDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActiveTeamDetailsResponse) GetUsers() []*UserResponse {
	if x != nil {
		return x.Users
	}
	return nil
}

type TeamStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users       uint32 `protobuf:"varint,100,opt,name=users,proto3" json:"users,omitempty"`
	Products    uint32 `protobuf:"varint,101,opt,name=products,proto3" json:"products,omitempty"`
	Nodes       uint32 `protobuf:"varint,102,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Versions    uint32 `protobuf:"varint,103,opt,name=versions,proto3" json:"versions,omitempty"`
	Deployments uint32 `protobuf:"varint,104,opt,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *TeamStatistics) Reset() {
	*x = TeamStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStatistics) ProtoMessage() {}

func (x *TeamStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStatistics.ProtoReflect.Descriptor instead.
func (*TeamStatistics) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{15}
}

func (x *TeamStatistics) GetUsers() uint32 {
	if x != nil {
		return x.Users
	}
	return 0
}

func (x *TeamStatistics) GetProducts() uint32 {
	if x != nil {
		return x.Products
	}
	return 0
}

func (x *TeamStatistics) GetNodes() uint32 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *TeamStatistics) GetVersions() uint32 {
	if x != nil {
		return x.Versions
	}
	return 0
}

func (x *TeamStatistics) GetDeployments() uint32 {
	if x != nil {
		return x.Deployments
	}
	return 0
}

type TeamWithStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string          `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Statistics *TeamStatistics `protobuf:"bytes,101,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *TeamWithStatsResponse) Reset() {
	*x = TeamWithStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamWithStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamWithStatsResponse) ProtoMessage() {}

func (x *TeamWithStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamWithStatsResponse.ProtoReflect.Descriptor instead.
func (*TeamWithStatsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{16}
}

func (x *TeamWithStatsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamWithStatsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamWithStatsResponse) GetStatistics() *TeamStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type TeamDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string          `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Statistics *TeamStatistics `protobuf:"bytes,101,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Users      []*UserResponse `protobuf:"bytes,1000,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *TeamDetailsResponse) Reset() {
	*x = TeamDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamDetailsResponse) ProtoMessage() {}

func (x *TeamDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamDetailsResponse.ProtoReflect.Descriptor instead.
func (*TeamDetailsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{17}
}

func (x *TeamDetailsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamDetailsResponse) GetStatistics() *TeamStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *TeamDetailsResponse) GetUsers() []*UserResponse {
	if x != nil {
		return x.Users
	}
	return nil
}

type AllTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TeamWithStatsResponse `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AllTeamsResponse) Reset() {
	*x = AllTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTeamsResponse) ProtoMessage() {}

func (x *AllTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTeamsResponse.ProtoReflect.Descriptor instead.
func (*AllTeamsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{18}
}

func (x *AllTeamsResponse) GetData() []*TeamWithStatsResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Email     string                 `protobuf:"bytes,101,opt,name=email,proto3" json:"email,omitempty"`
	Role      UserRole               `protobuf:"varint,102,opt,name=role,proto3,enum=crux.UserRole" json:"role,omitempty"`
	Status    UserStatus             `protobuf:"varint,103,opt,name=status,proto3,enum=crux.UserStatus" json:"status,omitempty"`
	LastLogin *timestamppb.Timestamp `protobuf:"bytes,104,opt,name=lastLogin,proto3,oneof" json:"lastLogin,omitempty"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{19}
}

func (x *UserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserResponse) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_USER_ROLE_UNSPECIFIED
}

func (x *UserResponse) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *UserResponse) GetLastLogin() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLogin
	}
	return nil
}

type VolumeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,102,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *VolumeLink) Reset() {
	*x = VolumeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeLink) ProtoMessage() {}

func (x *VolumeLink) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeLink.ProtoReflect.Descriptor instead.
func (*VolumeLink) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{20}
}

func (x *VolumeLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeLink) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type InitContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string              `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Name            string              `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	Image           string              `protobuf:"bytes,102,opt,name=image,proto3" json:"image,omitempty"`
	UseParentConfig bool                `protobuf:"varint,103,opt,name=useParentConfig,proto3" json:"useParentConfig,omitempty"`
	Volumes         []*VolumeLink       `protobuf:"bytes,1000,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Command         []*common.UniqueKey `protobuf:"bytes,1001,rep,name=command,proto3" json:"command,omitempty"`
	Args            []*common.UniqueKey `protobuf:"bytes,1002,rep,name=args,proto3" json:"args,omitempty"`
	Environment     []*UniqueKeyValue   `protobuf:"bytes,1003,rep,name=environment,proto3" json:"environment,omitempty"`
}

func (x *InitContainer) Reset() {
	*x = InitContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitContainer) ProtoMessage() {}

func (x *InitContainer) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitContainer.ProtoReflect.Descriptor instead.
func (*InitContainer) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{21}
}

func (x *InitContainer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InitContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InitContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *InitContainer) GetUseParentConfig() bool {
	if x != nil {
		return x.UseParentConfig
	}
	return false
}

func (x *InitContainer) GetVolumes() []*VolumeLink {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *InitContainer) GetCommand() []*common.UniqueKey {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *InitContainer) GetArgs() []*common.UniqueKey {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InitContainer) GetEnvironment() []*UniqueKeyValue {
	if x != nil {
		return x.Environment
	}
	return nil
}

type InitContainerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*InitContainer `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InitContainerList) Reset() {
	*x = InitContainerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitContainerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitContainerList) ProtoMessage() {}

func (x *InitContainerList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitContainerList.ProtoReflect.Descriptor instead.
func (*InitContainerList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{22}
}

func (x *InitContainerList) GetData() []*InitContainer {
	if x != nil {
		return x.Data
	}
	return nil
}

type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver  common.DriverType `protobuf:"varint,100,opt,name=driver,proto3,enum=common.DriverType" json:"driver,omitempty"`
	Options []*UniqueKeyValue `protobuf:"bytes,1000,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{23}
}

func (x *LogConfig) GetDriver() common.DriverType {
	if x != nil {
		return x.Driver
	}
	return common.DriverType(0)
}

func (x *LogConfig) GetOptions() []*UniqueKeyValue {
	if x != nil {
		return x.Options
	}
	return nil
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Internal int32  `protobuf:"varint,101,opt,name=internal,proto3" json:"internal,omitempty"`
	External *int32 `protobuf:"varint,102,opt,name=external,proto3,oneof" json:"external,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{24}
}

func (x *Port) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Port) GetInternal() int32 {
	if x != nil {
		return x.Internal
	}
	return 0
}

func (x *Port) GetExternal() int32 {
	if x != nil && x.External != nil {
		return *x.External
	}
	return 0
}

type PortList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Port `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PortList) Reset() {
	*x = PortList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortList) ProtoMessage() {}

func (x *PortList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortList.ProtoReflect.Descriptor instead.
func (*PortList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{25}
}

func (x *PortList) GetData() []*Port {
	if x != nil {
		return x.Data
	}
	return nil
}

type PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From int32 `protobuf:"varint,100,opt,name=from,proto3" json:"from,omitempty"`
	To   int32 `protobuf:"varint,101,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{26}
}

func (x *PortRange) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *PortRange) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

type PortRangeBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string     `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Internal *PortRange `protobuf:"bytes,101,opt,name=internal,proto3" json:"internal,omitempty"`
	External *PortRange `protobuf:"bytes,102,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *PortRangeBinding) Reset() {
	*x = PortRangeBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortRangeBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRangeBinding) ProtoMessage() {}

func (x *PortRangeBinding) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRangeBinding.ProtoReflect.Descriptor instead.
func (*PortRangeBinding) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{27}
}

func (x *PortRangeBinding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PortRangeBinding) GetInternal() *PortRange {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *PortRangeBinding) GetExternal() *PortRange {
	if x != nil {
		return x.External
	}
	return nil
}

type PortRangeBindingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PortRangeBinding `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PortRangeBindingList) Reset() {
	*x = PortRangeBindingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortRangeBindingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRangeBindingList) ProtoMessage() {}

func (x *PortRangeBindingList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRangeBindingList.ProtoReflect.Descriptor instead.
func (*PortRangeBindingList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{28}
}

func (x *PortRangeBindingList) GetData() []*PortRangeBinding {
	if x != nil {
		return x.Data
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string             `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Name  string             `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	Path  string             `protobuf:"bytes,102,opt,name=path,proto3" json:"path,omitempty"`
	Size  *string            `protobuf:"bytes,103,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Type  *common.VolumeType `protobuf:"varint,104,opt,name=type,proto3,enum=common.VolumeType,oneof" json:"type,omitempty"`
	Class *string            `protobuf:"bytes,105,opt,name=class,proto3,oneof" json:"class,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{29}
}

func (x *Volume) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Volume) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *Volume) GetType() common.VolumeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return common.VolumeType(0)
}

func (x *Volume) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

type VolumeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Volume `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *VolumeList) Reset() {
	*x = VolumeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeList) ProtoMessage() {}

func (x *VolumeList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeList.ProtoReflect.Descriptor instead.
func (*VolumeList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{30}
}

func (x *VolumeList) GetData() []*Volume {
	if x != nil {
		return x.Data
	}
	return nil
}

type UniqueKeyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*common.UniqueKey `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UniqueKeyList) Reset() {
	*x = UniqueKeyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueKeyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueKeyList) ProtoMessage() {}

func (x *UniqueKeyList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueKeyList.ProtoReflect.Descriptor instead.
func (*UniqueKeyList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{31}
}

func (x *UniqueKeyList) GetData() []*common.UniqueKey {
	if x != nil {
		return x.Data
	}
	return nil
}

type UniqueKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Key   string `protobuf:"bytes,101,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,102,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UniqueKeyValue) Reset() {
	*x = UniqueKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueKeyValue) ProtoMessage() {}

func (x *UniqueKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueKeyValue.ProtoReflect.Descriptor instead.
func (*UniqueKeyValue) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{32}
}

func (x *UniqueKeyValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniqueKeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UniqueKeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UniqueKeyValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UniqueKeyValue `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UniqueKeyValueList) Reset() {
	*x = UniqueKeyValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueKeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueKeyValueList) ProtoMessage() {}

func (x *UniqueKeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueKeyValueList.ProtoReflect.Descriptor instead.
func (*UniqueKeyValueList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{33}
}

func (x *UniqueKeyValueList) GetData() []*UniqueKeyValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type UniqueSecretKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Key      string `protobuf:"bytes,101,opt,name=key,proto3" json:"key,omitempty"`
	Required bool   `protobuf:"varint,102,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *UniqueSecretKey) Reset() {
	*x = UniqueSecretKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueSecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueSecretKey) ProtoMessage() {}

func (x *UniqueSecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueSecretKey.ProtoReflect.Descriptor instead.
func (*UniqueSecretKey) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{34}
}

func (x *UniqueSecretKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniqueSecretKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UniqueSecretKey) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type UniqueSecretKeyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UniqueSecretKey `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UniqueSecretKeyList) Reset() {
	*x = UniqueSecretKeyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueSecretKeyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueSecretKeyList) ProtoMessage() {}

func (x *UniqueSecretKeyList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueSecretKeyList.ProtoReflect.Descriptor instead.
func (*UniqueSecretKeyList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{35}
}

func (x *UniqueSecretKeyList) GetData() []*UniqueSecretKey {
	if x != nil {
		return x.Data
	}
	return nil
}

type UniqueSecretKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Key       string  `protobuf:"bytes,101,opt,name=key,proto3" json:"key,omitempty"`
	Value     string  `protobuf:"bytes,103,opt,name=value,proto3" json:"value,omitempty"`
	Required  bool    `protobuf:"varint,104,opt,name=required,proto3" json:"required,omitempty"`
	Encrypted bool    `protobuf:"varint,105,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	PublicKey *string `protobuf:"bytes,106,opt,name=publicKey,proto3,oneof" json:"publicKey,omitempty"`
}

func (x *UniqueSecretKeyValue) Reset() {
	*x = UniqueSecretKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueSecretKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueSecretKeyValue) ProtoMessage() {}

func (x *UniqueSecretKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueSecretKeyValue.ProtoReflect.Descriptor instead.
func (*UniqueSecretKeyValue) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{36}
}

func (x *UniqueSecretKeyValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniqueSecretKeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UniqueSecretKeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UniqueSecretKeyValue) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *UniqueSecretKeyValue) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *UniqueSecretKeyValue) GetPublicKey() string {
	if x != nil && x.PublicKey != nil {
		return *x.PublicKey
	}
	return ""
}

type UniqueSecretKeyValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UniqueSecretKeyValue `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UniqueSecretKeyValueList) Reset() {
	*x = UniqueSecretKeyValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueSecretKeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueSecretKeyValueList) ProtoMessage() {}

func (x *UniqueSecretKeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueSecretKeyValueList.ProtoReflect.Descriptor instead.
func (*UniqueSecretKeyValueList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{37}
}

func (x *UniqueSecretKeyValueList) GetData() []*UniqueSecretKeyValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type Marker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment []*UniqueKeyValue `protobuf:"bytes,1000,rep,name=deployment,proto3" json:"deployment,omitempty"`
	Service    []*UniqueKeyValue `protobuf:"bytes,1001,rep,name=service,proto3" json:"service,omitempty"`
	Ingress    []*UniqueKeyValue `protobuf:"bytes,1002,rep,name=ingress,proto3" json:"ingress,omitempty"`
}

func (x *Marker) Reset() {
	*x = Marker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marker) ProtoMessage() {}

func (x *Marker) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marker.ProtoReflect.Descriptor instead.
func (*Marker) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{38}
}

func (x *Marker) GetDeployment() []*UniqueKeyValue {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Marker) GetService() []*UniqueKeyValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Marker) GetIngress() []*UniqueKeyValue {
	if x != nil {
		return x.Ingress
	}
	return nil
}

type ContainerStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageId *string `protobuf:"bytes,100,opt,name=storageId,proto3,oneof" json:"storageId,omitempty"`
	Path      *string `protobuf:"bytes,101,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Bucket    *string `protobuf:"bytes,102,opt,name=bucket,proto3,oneof" json:"bucket,omitempty"`
}

func (x *ContainerStorage) Reset() {
	*x = ContainerStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStorage) ProtoMessage() {}

func (x *ContainerStorage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStorage.ProtoReflect.Descriptor instead.
func (*ContainerStorage) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{39}
}

func (x *ContainerStorage) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

func (x *ContainerStorage) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ContainerStorage) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

type DagentContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogConfig     *LogConfig            `protobuf:"bytes,100,opt,name=logConfig,proto3,oneof" json:"logConfig,omitempty"`
	RestartPolicy *common.RestartPolicy `protobuf:"varint,101,opt,name=restartPolicy,proto3,enum=common.RestartPolicy,oneof" json:"restartPolicy,omitempty"`
	NetworkMode   *common.NetworkMode   `protobuf:"varint,102,opt,name=networkMode,proto3,enum=common.NetworkMode,oneof" json:"networkMode,omitempty"`
	Networks      *UniqueKeyList        `protobuf:"bytes,1000,opt,name=networks,proto3,oneof" json:"networks,omitempty"`
	Labels        *UniqueKeyValueList   `protobuf:"bytes,1001,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
}

func (x *DagentContainerConfig) Reset() {
	*x = DagentContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DagentContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DagentContainerConfig) ProtoMessage() {}

func (x *DagentContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DagentContainerConfig.ProtoReflect.Descriptor instead.
func (*DagentContainerConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{40}
}

func (x *DagentContainerConfig) GetLogConfig() *LogConfig {
	if x != nil {
		return x.LogConfig
	}
	return nil
}

func (x *DagentContainerConfig) GetRestartPolicy() common.RestartPolicy {
	if x != nil && x.RestartPolicy != nil {
		return *x.RestartPolicy
	}
	return common.RestartPolicy(0)
}

func (x *DagentContainerConfig) GetNetworkMode() common.NetworkMode {
	if x != nil && x.NetworkMode != nil {
		return *x.NetworkMode
	}
	return common.NetworkMode(0)
}

func (x *DagentContainerConfig) GetNetworks() *UniqueKeyList {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *DagentContainerConfig) GetLabels() *UniqueKeyValueList {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CraneContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentStatregy *common.DeploymentStrategy `protobuf:"varint,100,opt,name=deploymentStatregy,proto3,enum=common.DeploymentStrategy,oneof" json:"deploymentStatregy,omitempty"`
	HealthCheckConfig  *common.HealthCheckConfig  `protobuf:"bytes,101,opt,name=healthCheckConfig,proto3,oneof" json:"healthCheckConfig,omitempty"`
	ResourceConfig     *common.ResourceConfig     `protobuf:"bytes,102,opt,name=resourceConfig,proto3,oneof" json:"resourceConfig,omitempty"`
	ProxyHeaders       *bool                      `protobuf:"varint,103,opt,name=proxyHeaders,proto3,oneof" json:"proxyHeaders,omitempty"`
	UseLoadBalancer    *bool                      `protobuf:"varint,104,opt,name=useLoadBalancer,proto3,oneof" json:"useLoadBalancer,omitempty"`
	Annotations        *Marker                    `protobuf:"bytes,105,opt,name=annotations,proto3,oneof" json:"annotations,omitempty"`
	Labels             *Marker                    `protobuf:"bytes,106,opt,name=labels,proto3,oneof" json:"labels,omitempty"`
	CustomHeaders      *UniqueKeyList             `protobuf:"bytes,1000,opt,name=customHeaders,proto3,oneof" json:"customHeaders,omitempty"`
	ExtraLBAnnotations *UniqueKeyValueList        `protobuf:"bytes,1001,opt,name=extraLBAnnotations,proto3,oneof" json:"extraLBAnnotations,omitempty"`
}

func (x *CraneContainerConfig) Reset() {
	*x = CraneContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraneContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraneContainerConfig) ProtoMessage() {}

func (x *CraneContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraneContainerConfig.ProtoReflect.Descriptor instead.
func (*CraneContainerConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{41}
}

func (x *CraneContainerConfig) GetDeploymentStatregy() common.DeploymentStrategy {
	if x != nil && x.DeploymentStatregy != nil {
		return *x.DeploymentStatregy
	}
	return common.DeploymentStrategy(0)
}

func (x *CraneContainerConfig) GetHealthCheckConfig() *common.HealthCheckConfig {
	if x != nil {
		return x.HealthCheckConfig
	}
	return nil
}

func (x *CraneContainerConfig) GetResourceConfig() *common.ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *CraneContainerConfig) GetProxyHeaders() bool {
	if x != nil && x.ProxyHeaders != nil {
		return *x.ProxyHeaders
	}
	return false
}

func (x *CraneContainerConfig) GetUseLoadBalancer() bool {
	if x != nil && x.UseLoadBalancer != nil {
		return *x.UseLoadBalancer
	}
	return false
}

func (x *CraneContainerConfig) GetAnnotations() *Marker {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CraneContainerConfig) GetLabels() *Marker {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CraneContainerConfig) GetCustomHeaders() *UniqueKeyList {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *CraneContainerConfig) GetExtraLBAnnotations() *UniqueKeyValueList {
	if x != nil {
		return x.ExtraLBAnnotations
	}
	return nil
}

type CommonContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *string                 `protobuf:"bytes,101,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Expose          *common.ExposeStrategy  `protobuf:"varint,102,opt,name=expose,proto3,enum=common.ExposeStrategy,oneof" json:"expose,omitempty"`
	Ingress         *common.Ingress         `protobuf:"bytes,103,opt,name=ingress,proto3,oneof" json:"ingress,omitempty"`
	ConfigContainer *common.ConfigContainer `protobuf:"bytes,104,opt,name=configContainer,proto3,oneof" json:"configContainer,omitempty"`
	User            *int64                  `protobuf:"varint,105,opt,name=user,proto3,oneof" json:"user,omitempty"`
	TTY             *bool                   `protobuf:"varint,106,opt,name=TTY,proto3,oneof" json:"TTY,omitempty"`
	Storage         *ContainerStorage       `protobuf:"bytes,107,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	Ports           *PortList               `protobuf:"bytes,1000,opt,name=ports,proto3,oneof" json:"ports,omitempty"`
	PortRanges      *PortRangeBindingList   `protobuf:"bytes,1001,opt,name=portRanges,proto3,oneof" json:"portRanges,omitempty"`
	Volumes         *VolumeList             `protobuf:"bytes,1002,opt,name=volumes,proto3,oneof" json:"volumes,omitempty"`
	Commands        *UniqueKeyList          `protobuf:"bytes,1003,opt,name=commands,proto3,oneof" json:"commands,omitempty"`
	Args            *UniqueKeyList          `protobuf:"bytes,1004,opt,name=args,proto3,oneof" json:"args,omitempty"`
	Environment     *UniqueKeyValueList     `protobuf:"bytes,1005,opt,name=environment,proto3,oneof" json:"environment,omitempty"`
	InitContainers  *InitContainerList      `protobuf:"bytes,1006,opt,name=initContainers,proto3,oneof" json:"initContainers,omitempty"`
}

func (x *CommonContainerConfig) Reset() {
	*x = CommonContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonContainerConfig) ProtoMessage() {}

func (x *CommonContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonContainerConfig.ProtoReflect.Descriptor instead.
func (*CommonContainerConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{42}
}

func (x *CommonContainerConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommonContainerConfig) GetExpose() common.ExposeStrategy {
	if x != nil && x.Expose != nil {
		return *x.Expose
	}
	return common.ExposeStrategy(0)
}

func (x *CommonContainerConfig) GetIngress() *common.Ingress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *CommonContainerConfig) GetConfigContainer() *common.ConfigContainer {
	if x != nil {
		return x.ConfigContainer
	}
	return nil
}

func (x *CommonContainerConfig) GetUser() int64 {
	if x != nil && x.User != nil {
		return *x.User
	}
	return 0
}

func (x *CommonContainerConfig) GetTTY() bool {
	if x != nil && x.TTY != nil {
		return *x.TTY
	}
	return false
}

func (x *CommonContainerConfig) GetStorage() *ContainerStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *CommonContainerConfig) GetPorts() *PortList {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *CommonContainerConfig) GetPortRanges() *PortRangeBindingList {
	if x != nil {
		return x.PortRanges
	}
	return nil
}

func (x *CommonContainerConfig) GetVolumes() *VolumeList {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *CommonContainerConfig) GetCommands() *UniqueKeyList {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *CommonContainerConfig) GetArgs() *UniqueKeyList {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CommonContainerConfig) GetEnvironment() *UniqueKeyValueList {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *CommonContainerConfig) GetInitContainers() *InitContainerList {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

type ImageContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *CommonContainerConfig `protobuf:"bytes,100,opt,name=common,proto3,oneof" json:"common,omitempty"`
	Dagent  *DagentContainerConfig `protobuf:"bytes,101,opt,name=dagent,proto3,oneof" json:"dagent,omitempty"`
	Crane   *CraneContainerConfig  `protobuf:"bytes,102,opt,name=crane,proto3,oneof" json:"crane,omitempty"`
	Secrets *UniqueSecretKeyList   `protobuf:"bytes,1000,opt,name=secrets,proto3,oneof" json:"secrets,omitempty"`
}

func (x *ImageContainerConfig) Reset() {
	*x = ImageContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContainerConfig) ProtoMessage() {}

func (x *ImageContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContainerConfig.ProtoReflect.Descriptor instead.
func (*ImageContainerConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{43}
}

func (x *ImageContainerConfig) GetCommon() *CommonContainerConfig {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ImageContainerConfig) GetDagent() *DagentContainerConfig {
	if x != nil {
		return x.Dagent
	}
	return nil
}

func (x *ImageContainerConfig) GetCrane() *CraneContainerConfig {
	if x != nil {
		return x.Crane
	}
	return nil
}

func (x *ImageContainerConfig) GetSecrets() *UniqueSecretKeyList {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type InstanceContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *CommonContainerConfig    `protobuf:"bytes,100,opt,name=common,proto3,oneof" json:"common,omitempty"`
	Dagent  *DagentContainerConfig    `protobuf:"bytes,101,opt,name=dagent,proto3,oneof" json:"dagent,omitempty"`
	Crane   *CraneContainerConfig     `protobuf:"bytes,102,opt,name=crane,proto3,oneof" json:"crane,omitempty"`
	Secrets *UniqueSecretKeyValueList `protobuf:"bytes,1000,opt,name=secrets,proto3,oneof" json:"secrets,omitempty"`
}

func (x *InstanceContainerConfig) Reset() {
	*x = InstanceContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceContainerConfig) ProtoMessage() {}

func (x *InstanceContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceContainerConfig.ProtoReflect.Descriptor instead.
func (*InstanceContainerConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{44}
}

func (x *InstanceContainerConfig) GetCommon() *CommonContainerConfig {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *InstanceContainerConfig) GetDagent() *DagentContainerConfig {
	if x != nil {
		return x.Dagent
	}
	return nil
}

func (x *InstanceContainerConfig) GetCrane() *CraneContainerConfig {
	if x != nil {
		return x.Crane
	}
	return nil
}

func (x *InstanceContainerConfig) GetSecrets() *UniqueSecretKeyValueList {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Tag          string                 `protobuf:"bytes,101,opt,name=tag,proto3" json:"tag,omitempty"`
	Order        uint32                 `protobuf:"varint,102,opt,name=order,proto3" json:"order,omitempty"`
	RegistryId   string                 `protobuf:"bytes,103,opt,name=registryId,proto3" json:"registryId,omitempty"`
	Config       *ImageContainerConfig  `protobuf:"bytes,104,opt,name=config,proto3" json:"config,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RegistryName string                 `protobuf:"bytes,106,opt,name=registryName,proto3" json:"registryName,omitempty"`
	RegistryType RegistryType           `protobuf:"varint,107,opt,name=registryType,proto3,enum=crux.RegistryType" json:"registryType,omitempty"`
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{45}
}

func (x *ImageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageResponse) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageResponse) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ImageResponse) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *ImageResponse) GetConfig() *ImageContainerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ImageResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ImageResponse) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *ImageResponse) GetRegistryType() RegistryType {
	if x != nil {
		return x.RegistryType
	}
	return RegistryType_REGISTRY_TYPE_UNSPECIFIED
}

type NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Audit       *AuditResponse         `protobuf:"bytes,2,opt,name=audit,proto3" json:"audit,omitempty"`
	Name        string                 `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string                `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string                `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Address     *string                `protobuf:"bytes,103,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Status      NodeConnectionStatus   `protobuf:"varint,104,opt,name=status,proto3,enum=crux.NodeConnectionStatus" json:"status,omitempty"`
	ConnectedAt *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=connectedAt,proto3,oneof" json:"connectedAt,omitempty"`
	Version     *string                `protobuf:"bytes,106,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Type        NodeType               `protobuf:"varint,107,opt,name=type,proto3,enum=crux.NodeType" json:"type,omitempty"`
	Updating    bool                   `protobuf:"varint,108,opt,name=updating,proto3" json:"updating,omitempty"`
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{46}
}

func (x *NodeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeResponse) GetAudit() *AuditResponse {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *NodeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NodeResponse) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *NodeResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NodeResponse) GetStatus() NodeConnectionStatus {
	if x != nil {
		return x.Status
	}
	return NodeConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *NodeResponse) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

func (x *NodeResponse) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *NodeResponse) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *NodeResponse) GetUpdating() bool {
	if x != nil {
		return x.Updating
	}
	return false
}

type NodeDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Audit       *AuditResponse         `protobuf:"bytes,2,opt,name=audit,proto3" json:"audit,omitempty"`
	Name        string                 `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string                `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string                `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Address     *string                `protobuf:"bytes,103,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Status      NodeConnectionStatus   `protobuf:"varint,104,opt,name=status,proto3,enum=crux.NodeConnectionStatus" json:"status,omitempty"`
	HasToken    bool                   `protobuf:"varint,105,opt,name=hasToken,proto3" json:"hasToken,omitempty"`
	ConnectedAt *timestamppb.Timestamp `protobuf:"bytes,106,opt,name=connectedAt,proto3,oneof" json:"connectedAt,omitempty"`
	Install     *NodeInstallResponse   `protobuf:"bytes,107,opt,name=install,proto3,oneof" json:"install,omitempty"`
	Script      *NodeScriptResponse    `protobuf:"bytes,108,opt,name=script,proto3,oneof" json:"script,omitempty"`
	Version     *string                `protobuf:"bytes,109,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Type        NodeType               `protobuf:"varint,110,opt,name=type,proto3,enum=crux.NodeType" json:"type,omitempty"`
	Updating    bool                   `protobuf:"varint,111,opt,name=updating,proto3" json:"updating,omitempty"`
}

func (x *NodeDetailsResponse) Reset() {
	*x = NodeDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetailsResponse) ProtoMessage() {}

func (x *NodeDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetailsResponse.ProtoReflect.Descriptor instead.
func (*NodeDetailsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{47}
}

func (x *NodeDetailsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeDetailsResponse) GetAudit() *AuditResponse {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *NodeDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeDetailsResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NodeDetailsResponse) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *NodeDetailsResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NodeDetailsResponse) GetStatus() NodeConnectionStatus {
	if x != nil {
		return x.Status
	}
	return NodeConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *NodeDetailsResponse) GetHasToken() bool {
	if x != nil {
		return x.HasToken
	}
	return false
}

func (x *NodeDetailsResponse) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

func (x *NodeDetailsResponse) GetInstall() *NodeInstallResponse {
	if x != nil {
		return x.Install
	}
	return nil
}

func (x *NodeDetailsResponse) GetScript() *NodeScriptResponse {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *NodeDetailsResponse) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *NodeDetailsResponse) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *NodeDetailsResponse) GetUpdating() bool {
	if x != nil {
		return x.Updating
	}
	return false
}

type NodeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NodeResponse `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NodeListResponse) Reset() {
	*x = NodeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeListResponse) ProtoMessage() {}

func (x *NodeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeListResponse.ProtoReflect.Descriptor instead.
func (*NodeListResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{48}
}

func (x *NodeListResponse) GetData() []*NodeResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{49}
}

func (x *CreateNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateNodeRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

type UpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateNodeRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

type DagentTraefikOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeEmail string `protobuf:"bytes,100,opt,name=acmeEmail,proto3" json:"acmeEmail,omitempty"`
}

func (x *DagentTraefikOptions) Reset() {
	*x = DagentTraefikOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DagentTraefikOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DagentTraefikOptions) ProtoMessage() {}

func (x *DagentTraefikOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DagentTraefikOptions.ProtoReflect.Descriptor instead.
func (*DagentTraefikOptions) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{51}
}

func (x *DagentTraefikOptions) GetAcmeEmail() string {
	if x != nil {
		return x.AcmeEmail
	}
	return ""
}

type GenerateScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          NodeType              `protobuf:"varint,100,opt,name=type,proto3,enum=crux.NodeType" json:"type,omitempty"`
	RootPath      *string               `protobuf:"bytes,101,opt,name=rootPath,proto3,oneof" json:"rootPath,omitempty"`
	ScriptType    NodeScriptType        `protobuf:"varint,102,opt,name=scriptType,proto3,enum=crux.NodeScriptType" json:"scriptType,omitempty"`
	DagentTraefik *DagentTraefikOptions `protobuf:"bytes,103,opt,name=dagentTraefik,proto3,oneof" json:"dagentTraefik,omitempty"`
}

func (x *GenerateScriptRequest) Reset() {
	*x = GenerateScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateScriptRequest) ProtoMessage() {}

func (x *GenerateScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateScriptRequest.ProtoReflect.Descriptor instead.
func (*GenerateScriptRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{52}
}

func (x *GenerateScriptRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenerateScriptRequest) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *GenerateScriptRequest) GetRootPath() string {
	if x != nil && x.RootPath != nil {
		return *x.RootPath
	}
	return ""
}

func (x *GenerateScriptRequest) GetScriptType() NodeScriptType {
	if x != nil {
		return x.ScriptType
	}
	return NodeScriptType_NODE_SCRIPT_TYPE_UNSPECIFIED
}

func (x *GenerateScriptRequest) GetDagentTraefik() *DagentTraefikOptions {
	if x != nil {
		return x.DagentTraefik
	}
	return nil
}

type NodeInstallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command  string                 `protobuf:"bytes,100,opt,name=command,proto3" json:"command,omitempty"`
	ExpireAt *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=expireAt,proto3" json:"expireAt,omitempty"`
}

func (x *NodeInstallResponse) Reset() {
	*x = NodeInstallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInstallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInstallResponse) ProtoMessage() {}

func (x *NodeInstallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInstallResponse.ProtoReflect.Descriptor instead.
func (*NodeInstallResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{53}
}

func (x *NodeInstallResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *NodeInstallResponse) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

type NodeScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,100,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NodeScriptResponse) Reset() {
	*x = NodeScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeScriptResponse) ProtoMessage() {}

func (x *NodeScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeScriptResponse.ProtoReflect.Descriptor instead.
func (*NodeScriptResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{54}
}

func (x *NodeScriptResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type NodeContainerCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command *common.ContainerCommandRequest `protobuf:"bytes,100,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *NodeContainerCommandRequest) Reset() {
	*x = NodeContainerCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeContainerCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeContainerCommandRequest) ProtoMessage() {}

func (x *NodeContainerCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeContainerCommandRequest.ProtoReflect.Descriptor instead.
func (*NodeContainerCommandRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{55}
}

func (x *NodeContainerCommandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeContainerCommandRequest) GetCommand() *common.ContainerCommandRequest {
	if x != nil {
		return x.Command
	}
	return nil
}

type NodeDeleteContainersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Containers *common.DeleteContainersRequest `protobuf:"bytes,100,opt,name=containers,proto3" json:"containers,omitempty"`
}

func (x *NodeDeleteContainersRequest) Reset() {
	*x = NodeDeleteContainersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDeleteContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDeleteContainersRequest) ProtoMessage() {}

func (x *NodeDeleteContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDeleteContainersRequest.ProtoReflect.Descriptor instead.
func (*NodeDeleteContainersRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{56}
}

func (x *NodeDeleteContainersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeDeleteContainersRequest) GetContainers() *common.DeleteContainersRequest {
	if x != nil {
		return x.Containers
	}
	return nil
}

type NodeEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      NodeConnectionStatus   `protobuf:"varint,100,opt,name=status,proto3,enum=crux.NodeConnectionStatus" json:"status,omitempty"`
	Address     *string                `protobuf:"bytes,101,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Version     *string                `protobuf:"bytes,102,opt,name=version,proto3,oneof" json:"version,omitempty"`
	ConnectedAt *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=connectedAt,proto3,oneof" json:"connectedAt,omitempty"`
	Error       *string                `protobuf:"bytes,104,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Updating    *bool                  `protobuf:"varint,105,opt,name=updating,proto3,oneof" json:"updating,omitempty"`
}

func (x *NodeEventMessage) Reset() {
	*x = NodeEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeEventMessage) ProtoMessage() {}

func (x *NodeEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeEventMessage.ProtoReflect.Descriptor instead.
func (*NodeEventMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{57}
}

func (x *NodeEventMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeEventMessage) GetStatus() NodeConnectionStatus {
	if x != nil {
		return x.Status
	}
	return NodeConnectionStatus_CONNECTION_STATUS_UNSPECIFIED
}

func (x *NodeEventMessage) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NodeEventMessage) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *NodeEventMessage) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

func (x *NodeEventMessage) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *NodeEventMessage) GetUpdating() bool {
	if x != nil && x.Updating != nil {
		return *x.Updating
	}
	return false
}

type WatchContainerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string  `protobuf:"bytes,100,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Prefix *string `protobuf:"bytes,101,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *WatchContainerStateRequest) Reset() {
	*x = WatchContainerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchContainerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchContainerStateRequest) ProtoMessage() {}

func (x *WatchContainerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchContainerStateRequest.ProtoReflect.Descriptor instead.
func (*WatchContainerStateRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{58}
}

func (x *WatchContainerStateRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *WatchContainerStateRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type WatchContainerLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    string                      `protobuf:"bytes,100,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Container *common.ContainerIdentifier `protobuf:"bytes,101,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *WatchContainerLogRequest) Reset() {
	*x = WatchContainerLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchContainerLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchContainerLogRequest) ProtoMessage() {}

func (x *WatchContainerLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchContainerLogRequest.ProtoReflect.Descriptor instead.
func (*WatchContainerLogRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{59}
}

func (x *WatchContainerLogRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *WatchContainerLogRequest) GetContainer() *common.ContainerIdentifier {
	if x != nil {
		return x.Container
	}
	return nil
}

type DeploymentProgressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status   *common.DeploymentStatus       `protobuf:"varint,100,opt,name=status,proto3,enum=common.DeploymentStatus,oneof" json:"status,omitempty"`
	Instance *common.InstanceDeploymentItem `protobuf:"bytes,101,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
	Log      []string                       `protobuf:"bytes,1000,rep,name=log,proto3" json:"log,omitempty"`
}

func (x *DeploymentProgressMessage) Reset() {
	*x = DeploymentProgressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentProgressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentProgressMessage) ProtoMessage() {}

func (x *DeploymentProgressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentProgressMessage.ProtoReflect.Descriptor instead.
func (*DeploymentProgressMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{60}
}

func (x *DeploymentProgressMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploymentProgressMessage) GetStatus() common.DeploymentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.DeploymentStatus(0)
}

func (x *DeploymentProgressMessage) GetInstance() *common.InstanceDeploymentItem {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *DeploymentProgressMessage) GetLog() []string {
	if x != nil {
		return x.Log
	}
	return nil
}

type InstancesCreatedEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*InstanceResponse `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InstancesCreatedEventList) Reset() {
	*x = InstancesCreatedEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesCreatedEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesCreatedEventList) ProtoMessage() {}

func (x *InstancesCreatedEventList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesCreatedEventList.ProtoReflect.Descriptor instead.
func (*InstancesCreatedEventList) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{61}
}

func (x *InstancesCreatedEventList) GetData() []*InstanceResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeploymentEditEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*DeploymentEditEventMessage_InstancesCreated
	//	*DeploymentEditEventMessage_ImageIdDeleted
	Data isDeploymentEditEventMessage_Data `protobuf_oneof:"data"`
}

func (x *DeploymentEditEventMessage) Reset() {
	*x = DeploymentEditEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentEditEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentEditEventMessage) ProtoMessage() {}

func (x *DeploymentEditEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentEditEventMessage.ProtoReflect.Descriptor instead.
func (*DeploymentEditEventMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{62}
}

func (m *DeploymentEditEventMessage) GetData() isDeploymentEditEventMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DeploymentEditEventMessage) GetInstancesCreated() *InstancesCreatedEventList {
	if x, ok := x.GetData().(*DeploymentEditEventMessage_InstancesCreated); ok {
		return x.InstancesCreated
	}
	return nil
}

func (x *DeploymentEditEventMessage) GetImageIdDeleted() string {
	if x, ok := x.GetData().(*DeploymentEditEventMessage_ImageIdDeleted); ok {
		return x.ImageIdDeleted
	}
	return ""
}

type isDeploymentEditEventMessage_Data interface {
	isDeploymentEditEventMessage_Data()
}

type DeploymentEditEventMessage_InstancesCreated struct {
	InstancesCreated *InstancesCreatedEventList `protobuf:"bytes,200,opt,name=instancesCreated,proto3,oneof"`
}

type DeploymentEditEventMessage_ImageIdDeleted struct {
	ImageIdDeleted string `protobuf:"bytes,201,opt,name=imageIdDeleted,proto3,oneof"`
}

func (*DeploymentEditEventMessage_InstancesCreated) isDeploymentEditEventMessage_Data() {}

func (*DeploymentEditEventMessage_ImageIdDeleted) isDeploymentEditEventMessage_Data() {}

type InstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Audit  *AuditResponse           `protobuf:"bytes,2,opt,name=audit,proto3" json:"audit,omitempty"`
	Image  *ImageResponse           `protobuf:"bytes,100,opt,name=image,proto3" json:"image,omitempty"`
	State  *common.ContainerState   `protobuf:"varint,101,opt,name=state,proto3,enum=common.ContainerState,oneof" json:"state,omitempty"`
	Config *InstanceContainerConfig `protobuf:"bytes,102,opt,name=config,proto3,oneof" json:"config,omitempty"`
}

func (x *InstanceResponse) Reset() {
	*x = InstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceResponse) ProtoMessage() {}

func (x *InstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceResponse.ProtoReflect.Descriptor instead.
func (*InstanceResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{63}
}

func (x *InstanceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstanceResponse) GetAudit() *AuditResponse {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *InstanceResponse) GetImage() *ImageResponse {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *InstanceResponse) GetState() common.ContainerState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return common.ContainerState(0)
}

func (x *InstanceResponse) GetConfig() *InstanceContainerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type PatchInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config       *InstanceContainerConfig `protobuf:"bytes,100,opt,name=config,proto3,oneof" json:"config,omitempty"`
	ResetSection *string                  `protobuf:"bytes,101,opt,name=resetSection,proto3,oneof" json:"resetSection,omitempty"`
}

func (x *PatchInstanceRequest) Reset() {
	*x = PatchInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInstanceRequest) ProtoMessage() {}

func (x *PatchInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInstanceRequest.ProtoReflect.Descriptor instead.
func (*PatchInstanceRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{64}
}

func (x *PatchInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchInstanceRequest) GetConfig() *InstanceContainerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PatchInstanceRequest) GetResetSection() string {
	if x != nil && x.ResetSection != nil {
		return *x.ResetSection
	}
	return ""
}

type DeploymentEventContainerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	State      common.ContainerState `protobuf:"varint,2,opt,name=state,proto3,enum=common.ContainerState" json:"state,omitempty"`
}

func (x *DeploymentEventContainerState) Reset() {
	*x = DeploymentEventContainerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentEventContainerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentEventContainerState) ProtoMessage() {}

func (x *DeploymentEventContainerState) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentEventContainerState.ProtoReflect.Descriptor instead.
func (*DeploymentEventContainerState) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{65}
}

func (x *DeploymentEventContainerState) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeploymentEventContainerState) GetState() common.ContainerState {
	if x != nil {
		return x.State
	}
	return common.ContainerState(0)
}

type DeploymentEventLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log []string `protobuf:"bytes,1000,rep,name=log,proto3" json:"log,omitempty"`
}

func (x *DeploymentEventLog) Reset() {
	*x = DeploymentEventLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentEventLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentEventLog) ProtoMessage() {}

func (x *DeploymentEventLog) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentEventLog.ProtoReflect.Descriptor instead.
func (*DeploymentEventLog) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{66}
}

func (x *DeploymentEventLog) GetLog() []string {
	if x != nil {
		return x.Log
	}
	return nil
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        ServiceStatus `protobuf:"varint,100,opt,name=status,proto3,enum=crux.ServiceStatus" json:"status,omitempty"`
	CruxVersion   string        `protobuf:"bytes,101,opt,name=cruxVersion,proto3" json:"cruxVersion,omitempty"`
	LastMigration *string       `protobuf:"bytes,102,opt,name=lastMigration,proto3,oneof" json:"lastMigration,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{67}
}

func (x *HealthResponse) GetStatus() ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_SERVICE_STATUS_UNSPECIFIED
}

func (x *HealthResponse) GetCruxVersion() string {
	if x != nil {
		return x.CruxVersion
	}
	return ""
}

func (x *HealthResponse) GetLastMigration() string {
	if x != nil && x.LastMigration != nil {
		return *x.LastMigration
	}
	return ""
}

type StorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Audit       *AuditResponse `protobuf:"bytes,2,opt,name=audit,proto3" json:"audit,omitempty"`
	Name        string         `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string        `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string        `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Url         string         `protobuf:"bytes,103,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *StorageResponse) Reset() {
	*x = StorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageResponse) ProtoMessage() {}

func (x *StorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageResponse.ProtoReflect.Descriptor instead.
func (*StorageResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{68}
}

func (x *StorageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageResponse) GetAudit() *AuditResponse {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *StorageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StorageResponse) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *StorageResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StorageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StorageResponse `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StorageListResponse) Reset() {
	*x = StorageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageListResponse) ProtoMessage() {}

func (x *StorageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageListResponse.ProtoReflect.Descriptor instead.
func (*StorageListResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{69}
}

func (x *StorageListResponse) GetData() []*StorageResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Url         string  `protobuf:"bytes,103,opt,name=url,proto3" json:"url,omitempty"`
	AccessKey   *string `protobuf:"bytes,104,opt,name=accessKey,proto3,oneof" json:"accessKey,omitempty"`
	SecretKey   *string `protobuf:"bytes,105,opt,name=secretKey,proto3,oneof" json:"secretKey,omitempty"`
}

func (x *CreateStorageRequest) Reset() {
	*x = CreateStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStorageRequest) ProtoMessage() {}

func (x *CreateStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStorageRequest.ProtoReflect.Descriptor instead.
func (*CreateStorageRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{70}
}

func (x *CreateStorageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStorageRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateStorageRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CreateStorageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateStorageRequest) GetAccessKey() string {
	if x != nil && x.AccessKey != nil {
		return *x.AccessKey
	}
	return ""
}

func (x *CreateStorageRequest) GetSecretKey() string {
	if x != nil && x.SecretKey != nil {
		return *x.SecretKey
	}
	return ""
}

type UpdateStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Url         string  `protobuf:"bytes,103,opt,name=url,proto3" json:"url,omitempty"`
	AccessKey   *string `protobuf:"bytes,104,opt,name=accessKey,proto3,oneof" json:"accessKey,omitempty"`
	SecretKey   *string `protobuf:"bytes,105,opt,name=secretKey,proto3,oneof" json:"secretKey,omitempty"`
}

func (x *UpdateStorageRequest) Reset() {
	*x = UpdateStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStorageRequest) ProtoMessage() {}

func (x *UpdateStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStorageRequest.ProtoReflect.Descriptor instead.
func (*UpdateStorageRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateStorageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateStorageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStorageRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateStorageRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *UpdateStorageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateStorageRequest) GetAccessKey() string {
	if x != nil && x.AccessKey != nil {
		return *x.AccessKey
	}
	return ""
}

func (x *UpdateStorageRequest) GetSecretKey() string {
	if x != nil && x.SecretKey != nil {
		return *x.SecretKey
	}
	return ""
}

type StorageDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Audit       *AuditResponse `protobuf:"bytes,2,opt,name=audit,proto3" json:"audit,omitempty"`
	Name        string         `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description *string        `protobuf:"bytes,101,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Icon        *string        `protobuf:"bytes,102,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Url         string         `protobuf:"bytes,103,opt,name=url,proto3" json:"url,omitempty"`
	AccessKey   *string        `protobuf:"bytes,104,opt,name=accessKey,proto3,oneof" json:"accessKey,omitempty"`
	SecretKey   *string        `protobuf:"bytes,105,opt,name=secretKey,proto3,oneof" json:"secretKey,omitempty"`
	InUse       bool           `protobuf:"varint,106,opt,name=inUse,proto3" json:"inUse,omitempty"`
}

func (x *StorageDetailsResponse) Reset() {
	*x = StorageDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDetailsResponse) ProtoMessage() {}

func (x *StorageDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDetailsResponse.ProtoReflect.Descriptor instead.
func (*StorageDetailsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{72}
}

func (x *StorageDetailsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageDetailsResponse) GetAudit() *AuditResponse {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *StorageDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageDetailsResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StorageDetailsResponse) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *StorageDetailsResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StorageDetailsResponse) GetAccessKey() string {
	if x != nil && x.AccessKey != nil {
		return *x.AccessKey
	}
	return ""
}

func (x *StorageDetailsResponse) GetSecretKey() string {
	if x != nil && x.SecretKey != nil {
		return *x.SecretKey
	}
	return ""
}

func (x *StorageDetailsResponse) GetInUse() bool {
	if x != nil {
		return x.InUse
	}
	return false
}

type StorageOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StorageOptionResponse) Reset() {
	*x = StorageOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageOptionResponse) ProtoMessage() {}

func (x *StorageOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageOptionResponse.ProtoReflect.Descriptor instead.
func (*StorageOptionResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{73}
}

func (x *StorageOptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageOptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StorageOptionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StorageOptionResponse `protobuf:"bytes,1000,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StorageOptionListResponse) Reset() {
	*x = StorageOptionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_proto_crux_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageOptionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageOptionListResponse) ProtoMessage() {}

func (x *StorageOptionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_proto_crux_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageOptionListResponse.ProtoReflect.Descriptor instead.
func (*StorageOptionListResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_proto_crux_proto_rawDescGZIP(), []int{74}
}

func (x *StorageOptionListResponse) GetData() []*StorageOptionResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_protobuf_proto_crux_proto protoreflect.FileDescriptor

var file_protobuf_proto_crux_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x72, 0x75,
	0x78, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x22, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x27, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x43, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0xe8, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x72,
	0x75, 0x78, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x0c, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x6a, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0e,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x75, 0x78,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x72, 0x75, 0x78,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x22, 0x44, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0xea, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xeb,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x60, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x22, 0x2b, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x2f, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74,
	0x6f, 0x22, 0x7c, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22,
	0x43, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x22, 0x2f, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b,
	0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48,
	0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0f, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x01,
	0x0a, 0x14, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x18, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xea, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72,
	0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x15, 0x44,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78,
	0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x04, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xec, 0x05,
	0x0a, 0x14, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x72, 0x65, 0x67, 0x79, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x72, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52,
	0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x05, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x06, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x07, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x42, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x08, 0x52, 0x12, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x4c, 0x42, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x72, 0x65, 0x67, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c,
	0x42, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x07, 0x0a,
	0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x01, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x54, 0x54, 0x59, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x05, 0x52, 0x03, 0x54, 0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x06, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x07, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0xea, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0a, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78,
	0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0b,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x69,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0xee, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0d, 0x52,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x54, 0x54, 0x59, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0xa8, 0x02, 0x0a, 0x14, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x44, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x01, 0x52, 0x06, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x05, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x05, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0xb0, 0x02, 0x0a,
	0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x44, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x01, 0x52, 0x06, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72,
	0x75, 0x78, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x05, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22,
	0xc5, 0x02, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x04,
	0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x05, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b,
	0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x90,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x65, 0x66,
	0x69, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x6d,
	0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x88, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x65, 0x66, 0x69, 0x6b, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x44, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x65, 0x66, 0x69, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x01, 0x52, 0x0d, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x65, 0x66, 0x69, 0x6b,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x65, 0x66,
	0x69, 0x6b, 0x22, 0x67, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x1b, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x6e, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5c, 0x0a, 0x1a, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x6d, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a,
	0x1d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x12,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x11, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x75, 0x78, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x75, 0x78,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0x87, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xca, 0x02, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x2a, 0x45, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x5f, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x42, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49,
	0x54, 0x4c, 0x41, 0x42, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x59, 0x0a,
	0x14, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x38, 0x53, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x7d,
	0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03, 0x2a, 0x60, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x32,
	0xda, 0x07, 0x0a, 0x08, 0x43, 0x72, 0x75, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x72, 0x75, 0x78,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x72,
	0x75, 0x78, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0f,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x0b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0f, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x48, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12,
	0x5c, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x5d, 0x0a,
	0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x32, 0xc2, 0x01, 0x0a,
	0x0e, 0x43, 0x72, 0x75, 0x78, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x51, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0f,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x30, 0x01, 0x12, 0x5d, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30,
	0x01, 0x32, 0xde, 0x06, 0x0a, 0x08, 0x43, 0x72, 0x75, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x41,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x47, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x52, 0x65, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x19, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x75,
	0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x14,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e,
	0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x63, 0x72,
	0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x63, 0x72, 0x75, 0x78,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x75, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x30, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x92, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x75, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x19, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x63,
	0x72, 0x75, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0f,
	0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x72, 0x75, 0x78, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x79, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x69,
	0x6f, 0x2f, 0x64, 0x79, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x72, 0x75, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_proto_crux_proto_rawDescOnce sync.Once
	file_protobuf_proto_crux_proto_rawDescData = file_protobuf_proto_crux_proto_rawDesc
)

func file_protobuf_proto_crux_proto_rawDescGZIP() []byte {
	file_protobuf_proto_crux_proto_rawDescOnce.Do(func() {
		file_protobuf_proto_crux_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_proto_crux_proto_rawDescData)
	})
	return file_protobuf_proto_crux_proto_rawDescData
}

var file_protobuf_proto_crux_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_protobuf_proto_crux_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_protobuf_proto_crux_proto_goTypes = []interface{}{
	(UserRole)(0),                            // 0: crux.UserRole
	(UserStatus)(0),                          // 1: crux.UserStatus
	(RegistryType)(0),                        // 2: crux.RegistryType
	(NodeConnectionStatus)(0),                // 3: crux.NodeConnectionStatus
	(NodeType)(0),                            // 4: crux.NodeType
	(NodeScriptType)(0),                      // 5: crux.NodeScriptType
	(VersionType)(0),                         // 6: crux.VersionType
	(DeploymentEventType)(0),                 // 7: crux.DeploymentEventType
	(ServiceStatus)(0),                       // 8: crux.ServiceStatus
	(*ServiceIdRequest)(nil),                 // 9: crux.ServiceIdRequest
	(*IdRequest)(nil),                        // 10: crux.IdRequest
	(*AuditResponse)(nil),                    // 11: crux.AuditResponse
	(*CreateEntityResponse)(nil),             // 12: crux.CreateEntityResponse
	(*UpdateEntityResponse)(nil),             // 13: crux.UpdateEntityResponse
	(*CreateTeamRequest)(nil),                // 14: crux.CreateTeamRequest
	(*UpdateTeamRequest)(nil),                // 15: crux.UpdateTeamRequest
	(*UpdateUserRoleInTeamRequest)(nil),      // 16: crux.UpdateUserRoleInTeamRequest
	(*InviteUserRequest)(nil),                // 17: crux.InviteUserRequest
	(*ReinviteUserRequest)(nil),              // 18: crux.ReinviteUserRequest
	(*DeleteUserFromTeamRequest)(nil),        // 19: crux.DeleteUserFromTeamRequest
	(*UserMetaResponse)(nil),                 // 20: crux.UserMetaResponse
	(*ActiveTeamUser)(nil),                   // 21: crux.ActiveTeamUser
	(*TeamResponse)(nil),                     // 22: crux.TeamResponse
	(*ActiveTeamDetailsResponse)(nil),        // 23: crux.ActiveTeamDetailsResponse
	(*TeamStatistics)(nil),                   // 24: crux.TeamStatistics
	(*TeamWithStatsResponse)(nil),            // 25: crux.TeamWithStatsResponse
	(*TeamDetailsResponse)(nil),              // 26: crux.TeamDetailsResponse
	(*AllTeamsResponse)(nil),                 // 27: crux.AllTeamsResponse
	(*UserResponse)(nil),                     // 28: crux.UserResponse
	(*VolumeLink)(nil),                       // 29: crux.VolumeLink
	(*InitContainer)(nil),                    // 30: crux.InitContainer
	(*InitContainerList)(nil),                // 31: crux.InitContainerList
	(*LogConfig)(nil),                        // 32: crux.LogConfig
	(*Port)(nil),                             // 33: crux.Port
	(*PortList)(nil),                         // 34: crux.PortList
	(*PortRange)(nil),                        // 35: crux.PortRange
	(*PortRangeBinding)(nil),                 // 36: crux.PortRangeBinding
	(*PortRangeBindingList)(nil),             // 37: crux.PortRangeBindingList
	(*Volume)(nil),                           // 38: crux.Volume
	(*VolumeList)(nil),                       // 39: crux.VolumeList
	(*UniqueKeyList)(nil),                    // 40: crux.UniqueKeyList
	(*UniqueKeyValue)(nil),                   // 41: crux.UniqueKeyValue
	(*UniqueKeyValueList)(nil),               // 42: crux.UniqueKeyValueList
	(*UniqueSecretKey)(nil),                  // 43: crux.UniqueSecretKey
	(*UniqueSecretKeyList)(nil),              // 44: crux.UniqueSecretKeyList
	(*UniqueSecretKeyValue)(nil),             // 45: crux.UniqueSecretKeyValue
	(*UniqueSecretKeyValueList)(nil),         // 46: crux.UniqueSecretKeyValueList
	(*Marker)(nil),                           // 47: crux.Marker
	(*ContainerStorage)(nil),                 // 48: crux.ContainerStorage
	(*DagentContainerConfig)(nil),            // 49: crux.DagentContainerConfig
	(*CraneContainerConfig)(nil),             // 50: crux.CraneContainerConfig
	(*CommonContainerConfig)(nil),            // 51: crux.CommonContainerConfig
	(*ImageContainerConfig)(nil),             // 52: crux.ImageContainerConfig
	(*InstanceContainerConfig)(nil),          // 53: crux.InstanceContainerConfig
	(*ImageResponse)(nil),                    // 54: crux.ImageResponse
	(*NodeResponse)(nil),                     // 55: crux.NodeResponse
	(*NodeDetailsResponse)(nil),              // 56: crux.NodeDetailsResponse
	(*NodeListResponse)(nil),                 // 57: crux.NodeListResponse
	(*CreateNodeRequest)(nil),                // 58: crux.CreateNodeRequest
	(*UpdateNodeRequest)(nil),                // 59: crux.UpdateNodeRequest
	(*DagentTraefikOptions)(nil),             // 60: crux.DagentTraefikOptions
	(*GenerateScriptRequest)(nil),            // 61: crux.GenerateScriptRequest
	(*NodeInstallResponse)(nil),              // 62: crux.NodeInstallResponse
	(*NodeScriptResponse)(nil),               // 63: crux.NodeScriptResponse
	(*NodeContainerCommandRequest)(nil),      // 64: crux.NodeContainerCommandRequest
	(*NodeDeleteContainersRequest)(nil),      // 65: crux.NodeDeleteContainersRequest
	(*NodeEventMessage)(nil),                 // 66: crux.NodeEventMessage
	(*WatchContainerStateRequest)(nil),       // 67: crux.WatchContainerStateRequest
	(*WatchContainerLogRequest)(nil),         // 68: crux.WatchContainerLogRequest
	(*DeploymentProgressMessage)(nil),        // 69: crux.DeploymentProgressMessage
	(*InstancesCreatedEventList)(nil),        // 70: crux.InstancesCreatedEventList
	(*DeploymentEditEventMessage)(nil),       // 71: crux.DeploymentEditEventMessage
	(*InstanceResponse)(nil),                 // 72: crux.InstanceResponse
	(*PatchInstanceRequest)(nil),             // 73: crux.PatchInstanceRequest
	(*DeploymentEventContainerState)(nil),    // 74: crux.DeploymentEventContainerState
	(*DeploymentEventLog)(nil),               // 75: crux.DeploymentEventLog
	(*HealthResponse)(nil),                   // 76: crux.HealthResponse
	(*StorageResponse)(nil),                  // 77: crux.StorageResponse
	(*StorageListResponse)(nil),              // 78: crux.StorageListResponse
	(*CreateStorageRequest)(nil),             // 79: crux.CreateStorageRequest
	(*UpdateStorageRequest)(nil),             // 80: crux.UpdateStorageRequest
	(*StorageDetailsResponse)(nil),           // 81: crux.StorageDetailsResponse
	(*StorageOptionResponse)(nil),            // 82: crux.StorageOptionResponse
	(*StorageOptionListResponse)(nil),        // 83: crux.StorageOptionListResponse
	(*timestamppb.Timestamp)(nil),            // 84: google.protobuf.Timestamp
	(*common.UniqueKey)(nil),                 // 85: common.UniqueKey
	(common.DriverType)(0),                   // 86: common.DriverType
	(common.VolumeType)(0),                   // 87: common.VolumeType
	(common.RestartPolicy)(0),                // 88: common.RestartPolicy
	(common.NetworkMode)(0),                  // 89: common.NetworkMode
	(common.DeploymentStrategy)(0),           // 90: common.DeploymentStrategy
	(*common.HealthCheckConfig)(nil),         // 91: common.HealthCheckConfig
	(*common.ResourceConfig)(nil),            // 92: common.ResourceConfig
	(common.ExposeStrategy)(0),               // 93: common.ExposeStrategy
	(*common.Ingress)(nil),                   // 94: common.Ingress
	(*common.ConfigContainer)(nil),           // 95: common.ConfigContainer
	(*common.ContainerCommandRequest)(nil),   // 96: common.ContainerCommandRequest
	(*common.DeleteContainersRequest)(nil),   // 97: common.DeleteContainersRequest
	(*common.ContainerIdentifier)(nil),       // 98: common.ContainerIdentifier
	(common.DeploymentStatus)(0),             // 99: common.DeploymentStatus
	(*common.InstanceDeploymentItem)(nil),    // 100: common.InstanceDeploymentItem
	(common.ContainerState)(0),               // 101: common.ContainerState
	(*common.Empty)(nil),                     // 102: common.Empty
	(*common.ContainerStateListMessage)(nil), // 103: common.ContainerStateListMessage
	(*common.ContainerLogMessage)(nil),       // 104: common.ContainerLogMessage
}
var file_protobuf_proto_crux_proto_depIdxs = []int32{
	84,  // 0: crux.AuditResponse.createdAt:type_name -> google.protobuf.Timestamp
	84,  // 1: crux.AuditResponse.updatedAt:type_name -> google.protobuf.Timestamp
	84,  // 2: crux.CreateEntityResponse.createdAt:type_name -> google.protobuf.Timestamp
	84,  // 3: crux.UpdateEntityResponse.updatedAt:type_name -> google.protobuf.Timestamp
	0,   // 4: crux.UpdateUserRoleInTeamRequest.role:type_name -> crux.UserRole
	21,  // 5: crux.UserMetaResponse.user:type_name -> crux.ActiveTeamUser
	22,  // 6: crux.UserMetaResponse.teams:type_name -> crux.TeamResponse
	22,  // 7: crux.UserMetaResponse.invitations:type_name -> crux.TeamResponse
	0,   // 8: crux.ActiveTeamUser.role:type_name -> crux.UserRole
	1,   // 9: crux.ActiveTeamUser.status:type_name -> crux.UserStatus
	28,  // 10: crux.ActiveTeamDetailsResponse.users:type_name -> crux.UserResponse
	24,  // 11: crux.TeamWithStatsResponse.statistics:type_name -> crux.TeamStatistics
	24,  // 12: crux.TeamDetailsResponse.statistics:type_name -> crux.TeamStatistics
	28,  // 13: crux.TeamDetailsResponse.users:type_name -> crux.UserResponse
	25,  // 14: crux.AllTeamsResponse.data:type_name -> crux.TeamWithStatsResponse
	0,   // 15: crux.UserResponse.role:type_name -> crux.UserRole
	1,   // 16: crux.UserResponse.status:type_name -> crux.UserStatus
	84,  // 17: crux.UserResponse.lastLogin:type_name -> google.protobuf.Timestamp
	29,  // 18: crux.InitContainer.volumes:type_name -> crux.VolumeLink
	85,  // 19: crux.InitContainer.command:type_name -> common.UniqueKey
	85,  // 20: crux.InitContainer.args:type_name -> common.UniqueKey
	41,  // 21: crux.InitContainer.environment:type_name -> crux.UniqueKeyValue
	30,  // 22: crux.InitContainerList.data:type_name -> crux.InitContainer
	86,  // 23: crux.LogConfig.driver:type_name -> common.DriverType
	41,  // 24: crux.LogConfig.options:type_name -> crux.UniqueKeyValue
	33,  // 25: crux.PortList.data:type_name -> crux.Port
	35,  // 26: crux.PortRangeBinding.internal:type_name -> crux.PortRange
	35,  // 27: crux.PortRangeBinding.external:type_name -> crux.PortRange
	36,  // 28: crux.PortRangeBindingList.data:type_name -> crux.PortRangeBinding
	87,  // 29: crux.Volume.type:type_name -> common.VolumeType
	38,  // 30: crux.VolumeList.data:type_name -> crux.Volume
	85,  // 31: crux.UniqueKeyList.data:type_name -> common.UniqueKey
	41,  // 32: crux.UniqueKeyValueList.data:type_name -> crux.UniqueKeyValue
	43,  // 33: crux.UniqueSecretKeyList.data:type_name -> crux.UniqueSecretKey
	45,  // 34: crux.UniqueSecretKeyValueList.data:type_name -> crux.UniqueSecretKeyValue
	41,  // 35: crux.Marker.deployment:type_name -> crux.UniqueKeyValue
	41,  // 36: crux.Marker.service:type_name -> crux.UniqueKeyValue
	41,  // 37: crux.Marker.ingress:type_name -> crux.UniqueKeyValue
	32,  // 38: crux.DagentContainerConfig.logConfig:type_name -> crux.LogConfig
	88,  // 39: crux.DagentContainerConfig.restartPolicy:type_name -> common.RestartPolicy
	89,  // 40: crux.DagentContainerConfig.networkMode:type_name -> common.NetworkMode
	40,  // 41: crux.DagentContainerConfig.networks:type_name -> crux.UniqueKeyList
	42,  // 42: crux.DagentContainerConfig.labels:type_name -> crux.UniqueKeyValueList
	90,  // 43: crux.CraneContainerConfig.deploymentStatregy:type_name -> common.DeploymentStrategy
	91,  // 44: crux.CraneContainerConfig.healthCheckConfig:type_name -> common.HealthCheckConfig
	92,  // 45: crux.CraneContainerConfig.resourceConfig:type_name -> common.ResourceConfig
	47,  // 46: crux.CraneContainerConfig.annotations:type_name -> crux.Marker
	47,  // 47: crux.CraneContainerConfig.labels:type_name -> crux.Marker
	40,  // 48: crux.CraneContainerConfig.customHeaders:type_name -> crux.UniqueKeyList
	42,  // 49: crux.CraneContainerConfig.extraLBAnnotations:type_name -> crux.UniqueKeyValueList
	93,  // 50: crux.CommonContainerConfig.expose:type_name -> common.ExposeStrategy
	94,  // 51: crux.CommonContainerConfig.ingress:type_name -> common.Ingress
	95,  // 52: crux.CommonContainerConfig.configContainer:type_name -> common.ConfigContainer
	48,  // 53: crux.CommonContainerConfig.storage:type_name -> crux.ContainerStorage
	34,  // 54: crux.CommonContainerConfig.ports:type_name -> crux.PortList
	37,  // 55: crux.CommonContainerConfig.portRanges:type_name -> crux.PortRangeBindingList
	39,  // 56: crux.CommonContainerConfig.volumes:type_name -> crux.VolumeList
	40,  // 57: crux.CommonContainerConfig.commands:type_name -> crux.UniqueKeyList
	40,  // 58: crux.CommonContainerConfig.args:type_name -> crux.UniqueKeyList
	42,  // 59: crux.CommonContainerConfig.environment:type_name -> crux.UniqueKeyValueList
	31,  // 60: crux.CommonContainerConfig.initContainers:type_name -> crux.InitContainerList
	51,  // 61: crux.ImageContainerConfig.common:type_name -> crux.CommonContainerConfig
	49,  // 62: crux.ImageContainerConfig.dagent:type_name -> crux.DagentContainerConfig
	50,  // 63: crux.ImageContainerConfig.crane:type_name -> crux.CraneContainerConfig
	44,  // 64: crux.ImageContainerConfig.secrets:type_name -> crux.UniqueSecretKeyList
	51,  // 65: crux.InstanceContainerConfig.common:type_name -> crux.CommonContainerConfig
	49,  // 66: crux.InstanceContainerConfig.dagent:type_name -> crux.DagentContainerConfig
	50,  // 67: crux.InstanceContainerConfig.crane:type_name -> crux.CraneContainerConfig
	46,  // 68: crux.InstanceContainerConfig.secrets:type_name -> crux.UniqueSecretKeyValueList
	52,  // 69: crux.ImageResponse.config:type_name -> crux.ImageContainerConfig
	84,  // 70: crux.ImageResponse.createdAt:type_name -> google.protobuf.Timestamp
	2,   // 71: crux.ImageResponse.registryType:type_name -> crux.RegistryType
	11,  // 72: crux.NodeResponse.audit:type_name -> crux.AuditResponse
	3,   // 73: crux.NodeResponse.status:type_name -> crux.NodeConnectionStatus
	84,  // 74: crux.NodeResponse.connectedAt:type_name -> google.protobuf.Timestamp
	4,   // 75: crux.NodeResponse.type:type_name -> crux.NodeType
	11,  // 76: crux.NodeDetailsResponse.audit:type_name -> crux.AuditResponse
	3,   // 77: crux.NodeDetailsResponse.status:type_name -> crux.NodeConnectionStatus
	84,  // 78: crux.NodeDetailsResponse.connectedAt:type_name -> google.protobuf.Timestamp
	62,  // 79: crux.NodeDetailsResponse.install:type_name -> crux.NodeInstallResponse
	63,  // 80: crux.NodeDetailsResponse.script:type_name -> crux.NodeScriptResponse
	4,   // 81: crux.NodeDetailsResponse.type:type_name -> crux.NodeType
	55,  // 82: crux.NodeListResponse.data:type_name -> crux.NodeResponse
	4,   // 83: crux.GenerateScriptRequest.type:type_name -> crux.NodeType
	5,   // 84: crux.GenerateScriptRequest.scriptType:type_name -> crux.NodeScriptType
	60,  // 85: crux.GenerateScriptRequest.dagentTraefik:type_name -> crux.DagentTraefikOptions
	84,  // 86: crux.NodeInstallResponse.expireAt:type_name -> google.protobuf.Timestamp
	96,  // 87: crux.NodeContainerCommandRequest.command:type_name -> common.ContainerCommandRequest
	97,  // 88: crux.NodeDeleteContainersRequest.containers:type_name -> common.DeleteContainersRequest
	3,   // 89: crux.NodeEventMessage.status:type_name -> crux.NodeConnectionStatus
	84,  // 90: crux.NodeEventMessage.connectedAt:type_name -> google.protobuf.Timestamp
	98,  // 91: crux.WatchContainerLogRequest.container:type_name -> common.ContainerIdentifier
	99,  // 92: crux.DeploymentProgressMessage.status:type_name -> common.DeploymentStatus
	100, // 93: crux.DeploymentProgressMessage.instance:type_name -> common.InstanceDeploymentItem
	72,  // 94: crux.InstancesCreatedEventList.data:type_name -> crux.InstanceResponse
	70,  // 95: crux.DeploymentEditEventMessage.instancesCreated:type_name -> crux.InstancesCreatedEventList
	11,  // 96: crux.InstanceResponse.audit:type_name -> crux.AuditResponse
	54,  // 97: crux.InstanceResponse.image:type_name -> crux.ImageResponse
	101, // 98: crux.InstanceResponse.state:type_name -> common.ContainerState
	53,  // 99: crux.InstanceResponse.config:type_name -> crux.InstanceContainerConfig
	53,  // 100: crux.PatchInstanceRequest.config:type_name -> crux.InstanceContainerConfig
	101, // 101: crux.DeploymentEventContainerState.state:type_name -> common.ContainerState
	8,   // 102: crux.HealthResponse.status:type_name -> crux.ServiceStatus
	11,  // 103: crux.StorageResponse.audit:type_name -> crux.AuditResponse
	77,  // 104: crux.StorageListResponse.data:type_name -> crux.StorageResponse
	11,  // 105: crux.StorageDetailsResponse.audit:type_name -> crux.AuditResponse
	82,  // 106: crux.StorageOptionListResponse.data:type_name -> crux.StorageOptionResponse
	102, // 107: crux.CruxNode.GetNodes:input_type -> common.Empty
	58,  // 108: crux.CruxNode.CreateNode:input_type -> crux.CreateNodeRequest
	59,  // 109: crux.CruxNode.UpdateNode:input_type -> crux.UpdateNodeRequest
	10,  // 110: crux.CruxNode.DeleteNode:input_type -> crux.IdRequest
	10,  // 111: crux.CruxNode.GetNodeDetails:input_type -> crux.IdRequest
	61,  // 112: crux.CruxNode.GenerateScript:input_type -> crux.GenerateScriptRequest
	9,   // 113: crux.CruxNode.GetScript:input_type -> crux.ServiceIdRequest
	10,  // 114: crux.CruxNode.DiscardScript:input_type -> crux.IdRequest
	10,  // 115: crux.CruxNode.RevokeToken:input_type -> crux.IdRequest
	10,  // 116: crux.CruxNode.UpdateNodeAgent:input_type -> crux.IdRequest
	64,  // 117: crux.CruxNode.SendContainerCommand:input_type -> crux.NodeContainerCommandRequest
	65,  // 118: crux.CruxNode.DeleteContainers:input_type -> crux.NodeDeleteContainersRequest
	9,   // 119: crux.CruxNode.SubscribeNodeEventChannel:input_type -> crux.ServiceIdRequest
	67,  // 120: crux.CruxNode.WatchContainerState:input_type -> crux.WatchContainerStateRequest
	68,  // 121: crux.CruxNode.SubscribeContainerLogChannel:input_type -> crux.WatchContainerLogRequest
	10,  // 122: crux.CruxDeployment.SubscribeToDeploymentEvents:input_type -> crux.IdRequest
	9,   // 123: crux.CruxDeployment.SubscribeToDeploymentEditEvents:input_type -> crux.ServiceIdRequest
	14,  // 124: crux.CruxTeam.CreateTeam:input_type -> crux.CreateTeamRequest
	102, // 125: crux.CruxTeam.GetActiveTeamByUser:input_type -> common.Empty
	15,  // 126: crux.CruxTeam.UpdateTeam:input_type -> crux.UpdateTeamRequest
	10,  // 127: crux.CruxTeam.DeleteTeam:input_type -> crux.IdRequest
	16,  // 128: crux.CruxTeam.UpdateUserRole:input_type -> crux.UpdateUserRoleInTeamRequest
	17,  // 129: crux.CruxTeam.InviteUserToTeam:input_type -> crux.InviteUserRequest
	18,  // 130: crux.CruxTeam.ReinviteUserToTeam:input_type -> crux.ReinviteUserRequest
	19,  // 131: crux.CruxTeam.DeleteUserFromTeam:input_type -> crux.DeleteUserFromTeamRequest
	10,  // 132: crux.CruxTeam.AcceptTeamInvitation:input_type -> crux.IdRequest
	10,  // 133: crux.CruxTeam.DeclineTeamInvitation:input_type -> crux.IdRequest
	10,  // 134: crux.CruxTeam.SelectTeam:input_type -> crux.IdRequest
	102, // 135: crux.CruxTeam.GetUserMeta:input_type -> common.Empty
	102, // 136: crux.CruxTeam.GetAllTeams:input_type -> common.Empty
	10,  // 137: crux.CruxTeam.GetTeamById:input_type -> crux.IdRequest
	102, // 138: crux.CruxHealth.getHealth:input_type -> common.Empty
	102, // 139: crux.CruxStorage.GetStorages:input_type -> common.Empty
	79,  // 140: crux.CruxStorage.CreateStorage:input_type -> crux.CreateStorageRequest
	80,  // 141: crux.CruxStorage.UpdateStorage:input_type -> crux.UpdateStorageRequest
	10,  // 142: crux.CruxStorage.DeleteStorage:input_type -> crux.IdRequest
	10,  // 143: crux.CruxStorage.GetStorageDetails:input_type -> crux.IdRequest
	102, // 144: crux.CruxStorage.GetStorageOptions:input_type -> common.Empty
	57,  // 145: crux.CruxNode.GetNodes:output_type -> crux.NodeListResponse
	12,  // 146: crux.CruxNode.CreateNode:output_type -> crux.CreateEntityResponse
	102, // 147: crux.CruxNode.UpdateNode:output_type -> common.Empty
	102, // 148: crux.CruxNode.DeleteNode:output_type -> common.Empty
	56,  // 149: crux.CruxNode.GetNodeDetails:output_type -> crux.NodeDetailsResponse
	62,  // 150: crux.CruxNode.GenerateScript:output_type -> crux.NodeInstallResponse
	63,  // 151: crux.CruxNode.GetScript:output_type -> crux.NodeScriptResponse
	102, // 152: crux.CruxNode.DiscardScript:output_type -> common.Empty
	102, // 153: crux.CruxNode.RevokeToken:output_type -> common.Empty
	102, // 154: crux.CruxNode.UpdateNodeAgent:output_type -> common.Empty
	102, // 155: crux.CruxNode.SendContainerCommand:output_type -> common.Empty
	102, // 156: crux.CruxNode.DeleteContainers:output_type -> common.Empty
	66,  // 157: crux.CruxNode.SubscribeNodeEventChannel:output_type -> crux.NodeEventMessage
	103, // 158: crux.CruxNode.WatchContainerState:output_type -> common.ContainerStateListMessage
	104, // 159: crux.CruxNode.SubscribeContainerLogChannel:output_type -> common.ContainerLogMessage
	69,  // 160: crux.CruxDeployment.SubscribeToDeploymentEvents:output_type -> crux.DeploymentProgressMessage
	71,  // 161: crux.CruxDeployment.SubscribeToDeploymentEditEvents:output_type -> crux.DeploymentEditEventMessage
	12,  // 162: crux.CruxTeam.CreateTeam:output_type -> crux.CreateEntityResponse
	23,  // 163: crux.CruxTeam.GetActiveTeamByUser:output_type -> crux.ActiveTeamDetailsResponse
	102, // 164: crux.CruxTeam.UpdateTeam:output_type -> common.Empty
	102, // 165: crux.CruxTeam.DeleteTeam:output_type -> common.Empty
	102, // 166: crux.CruxTeam.UpdateUserRole:output_type -> common.Empty
	12,  // 167: crux.CruxTeam.InviteUserToTeam:output_type -> crux.CreateEntityResponse
	12,  // 168: crux.CruxTeam.ReinviteUserToTeam:output_type -> crux.CreateEntityResponse
	102, // 169: crux.CruxTeam.DeleteUserFromTeam:output_type -> common.Empty
	102, // 170: crux.CruxTeam.AcceptTeamInvitation:output_type -> common.Empty
	102, // 171: crux.CruxTeam.DeclineTeamInvitation:output_type -> common.Empty
	102, // 172: crux.CruxTeam.SelectTeam:output_type -> common.Empty
	20,  // 173: crux.CruxTeam.GetUserMeta:output_type -> crux.UserMetaResponse
	27,  // 174: crux.CruxTeam.GetAllTeams:output_type -> crux.AllTeamsResponse
	26,  // 175: crux.CruxTeam.GetTeamById:output_type -> crux.TeamDetailsResponse
	76,  // 176: crux.CruxHealth.getHealth:output_type -> crux.HealthResponse
	78,  // 177: crux.CruxStorage.GetStorages:output_type -> crux.StorageListResponse
	12,  // 178: crux.CruxStorage.CreateStorage:output_type -> crux.CreateEntityResponse
	13,  // 179: crux.CruxStorage.UpdateStorage:output_type -> crux.UpdateEntityResponse
	102, // 180: crux.CruxStorage.DeleteStorage:output_type -> common.Empty
	81,  // 181: crux.CruxStorage.GetStorageDetails:output_type -> crux.StorageDetailsResponse
	83,  // 182: crux.CruxStorage.GetStorageOptions:output_type -> crux.StorageOptionListResponse
	145, // [145:183] is the sub-list for method output_type
	107, // [107:145] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_protobuf_proto_crux_proto_init() }
func file_protobuf_proto_crux_proto_init() {
	if File_protobuf_proto_crux_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_proto_crux_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRoleInTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReinviteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserFromTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveTeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveTeamDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamWithStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitContainerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortRangeBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortRangeBindingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueKeyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueKeyValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueSecretKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueSecretKeyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueSecretKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueSecretKeyValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Marker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DagentContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraneContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DagentTraefikOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInstallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeContainerCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDeleteContainersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchContainerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchContainerLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentProgressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesCreatedEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentEditEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentEventContainerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentEventLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_proto_crux_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageOptionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_proto_crux_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*DeploymentEditEventMessage_InstancesCreated)(nil),
		(*DeploymentEditEventMessage_ImageIdDeleted)(nil),
	}
	file_protobuf_proto_crux_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_protobuf_proto_crux_proto_msgTypes[72].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_proto_crux_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_protobuf_proto_crux_proto_goTypes,
		DependencyIndexes: file_protobuf_proto_crux_proto_depIdxs,
		EnumInfos:         file_protobuf_proto_crux_proto_enumTypes,
		MessageInfos:      file_protobuf_proto_crux_proto_msgTypes,
	}.Build()
	File_protobuf_proto_crux_proto = out.File
	file_protobuf_proto_crux_proto_rawDesc = nil
	file_protobuf_proto_crux_proto_goTypes = nil
	file_protobuf_proto_crux_proto_depIdxs = nil
}
