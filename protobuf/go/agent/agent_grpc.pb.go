// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protobuf/proto/agent.proto

package agent

import (
	context "context"
	common "github.com/dyrector-io/dyrectorio/protobuf/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// *
	// Subscribe with pre-assigned AgentID, waiting for incoming
	// deploy requests and prefix status requests.
	// In both cases, separate, shorter-living channels are opened.
	// For deployment status reports, closed when ended.
	// For prefix state reports, should be closed by the server.
	Connect(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (Agent_ConnectClient, error)
	DeploymentStatus(ctx context.Context, opts ...grpc.CallOption) (Agent_DeploymentStatusClient, error)
	ContainerState(ctx context.Context, opts ...grpc.CallOption) (Agent_ContainerStateClient, error)
	SecretList(ctx context.Context, in *common.ListSecretsResponse, opts ...grpc.CallOption) (*common.Empty, error)
	AbortUpdate(ctx context.Context, in *AgentAbortUpdate, opts ...grpc.CallOption) (*common.Empty, error)
	DeleteContainers(ctx context.Context, in *common.DeleteContainersRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ContainerLog(ctx context.Context, opts ...grpc.CallOption) (Agent_ContainerLogClient, error)
	TokenReplaced(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Connect(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (Agent_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/agent.Agent/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ConnectClient interface {
	Recv() (*AgentCommand, error)
	grpc.ClientStream
}

type agentConnectClient struct {
	grpc.ClientStream
}

func (x *agentConnectClient) Recv() (*AgentCommand, error) {
	m := new(AgentCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) DeploymentStatus(ctx context.Context, opts ...grpc.CallOption) (Agent_DeploymentStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/agent.Agent/DeploymentStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentDeploymentStatusClient{stream}
	return x, nil
}

type Agent_DeploymentStatusClient interface {
	Send(*common.DeploymentStatusMessage) error
	CloseAndRecv() (*common.Empty, error)
	grpc.ClientStream
}

type agentDeploymentStatusClient struct {
	grpc.ClientStream
}

func (x *agentDeploymentStatusClient) Send(m *common.DeploymentStatusMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentDeploymentStatusClient) CloseAndRecv() (*common.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ContainerState(ctx context.Context, opts ...grpc.CallOption) (Agent_ContainerStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[2], "/agent.Agent/ContainerState", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentContainerStateClient{stream}
	return x, nil
}

type Agent_ContainerStateClient interface {
	Send(*common.ContainerStateListMessage) error
	CloseAndRecv() (*common.Empty, error)
	grpc.ClientStream
}

type agentContainerStateClient struct {
	grpc.ClientStream
}

func (x *agentContainerStateClient) Send(m *common.ContainerStateListMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentContainerStateClient) CloseAndRecv() (*common.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) SecretList(ctx context.Context, in *common.ListSecretsResponse, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/agent.Agent/SecretList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AbortUpdate(ctx context.Context, in *AgentAbortUpdate, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/agent.Agent/AbortUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteContainers(ctx context.Context, in *common.DeleteContainersRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/agent.Agent/DeleteContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ContainerLog(ctx context.Context, opts ...grpc.CallOption) (Agent_ContainerLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[3], "/agent.Agent/ContainerLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentContainerLogClient{stream}
	return x, nil
}

type Agent_ContainerLogClient interface {
	Send(*common.ContainerLogMessage) error
	CloseAndRecv() (*common.Empty, error)
	grpc.ClientStream
}

type agentContainerLogClient struct {
	grpc.ClientStream
}

func (x *agentContainerLogClient) Send(m *common.ContainerLogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentContainerLogClient) CloseAndRecv() (*common.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) TokenReplaced(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/agent.Agent/TokenReplaced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// *
	// Subscribe with pre-assigned AgentID, waiting for incoming
	// deploy requests and prefix status requests.
	// In both cases, separate, shorter-living channels are opened.
	// For deployment status reports, closed when ended.
	// For prefix state reports, should be closed by the server.
	Connect(*AgentInfo, Agent_ConnectServer) error
	DeploymentStatus(Agent_DeploymentStatusServer) error
	ContainerState(Agent_ContainerStateServer) error
	SecretList(context.Context, *common.ListSecretsResponse) (*common.Empty, error)
	AbortUpdate(context.Context, *AgentAbortUpdate) (*common.Empty, error)
	DeleteContainers(context.Context, *common.DeleteContainersRequest) (*common.Empty, error)
	ContainerLog(Agent_ContainerLogServer) error
	TokenReplaced(context.Context, *common.Empty) (*common.Empty, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Connect(*AgentInfo, Agent_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAgentServer) DeploymentStatus(Agent_DeploymentStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method DeploymentStatus not implemented")
}
func (UnimplementedAgentServer) ContainerState(Agent_ContainerStateServer) error {
	return status.Errorf(codes.Unimplemented, "method ContainerState not implemented")
}
func (UnimplementedAgentServer) SecretList(context.Context, *common.ListSecretsResponse) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretList not implemented")
}
func (UnimplementedAgentServer) AbortUpdate(context.Context, *AgentAbortUpdate) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortUpdate not implemented")
}
func (UnimplementedAgentServer) DeleteContainers(context.Context, *common.DeleteContainersRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainers not implemented")
}
func (UnimplementedAgentServer) ContainerLog(Agent_ContainerLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ContainerLog not implemented")
}
func (UnimplementedAgentServer) TokenReplaced(context.Context, *common.Empty) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenReplaced not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).Connect(m, &agentConnectServer{stream})
}

type Agent_ConnectServer interface {
	Send(*AgentCommand) error
	grpc.ServerStream
}

type agentConnectServer struct {
	grpc.ServerStream
}

func (x *agentConnectServer) Send(m *AgentCommand) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_DeploymentStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).DeploymentStatus(&agentDeploymentStatusServer{stream})
}

type Agent_DeploymentStatusServer interface {
	SendAndClose(*common.Empty) error
	Recv() (*common.DeploymentStatusMessage, error)
	grpc.ServerStream
}

type agentDeploymentStatusServer struct {
	grpc.ServerStream
}

func (x *agentDeploymentStatusServer) SendAndClose(m *common.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentDeploymentStatusServer) Recv() (*common.DeploymentStatusMessage, error) {
	m := new(common.DeploymentStatusMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_ContainerState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).ContainerState(&agentContainerStateServer{stream})
}

type Agent_ContainerStateServer interface {
	SendAndClose(*common.Empty) error
	Recv() (*common.ContainerStateListMessage, error)
	grpc.ServerStream
}

type agentContainerStateServer struct {
	grpc.ServerStream
}

func (x *agentContainerStateServer) SendAndClose(m *common.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentContainerStateServer) Recv() (*common.ContainerStateListMessage, error) {
	m := new(common.ContainerStateListMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_SecretList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSecretsResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SecretList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/SecretList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SecretList(ctx, req.(*common.ListSecretsResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AbortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentAbortUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AbortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/AbortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AbortUpdate(ctx, req.(*AgentAbortUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DeleteContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/DeleteContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteContainers(ctx, req.(*common.DeleteContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ContainerLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).ContainerLog(&agentContainerLogServer{stream})
}

type Agent_ContainerLogServer interface {
	SendAndClose(*common.Empty) error
	Recv() (*common.ContainerLogMessage, error)
	grpc.ServerStream
}

type agentContainerLogServer struct {
	grpc.ServerStream
}

func (x *agentContainerLogServer) SendAndClose(m *common.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentContainerLogServer) Recv() (*common.ContainerLogMessage, error) {
	m := new(common.ContainerLogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_TokenReplaced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TokenReplaced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/TokenReplaced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TokenReplaced(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecretList",
			Handler:    _Agent_SecretList_Handler,
		},
		{
			MethodName: "AbortUpdate",
			Handler:    _Agent_AbortUpdate_Handler,
		},
		{
			MethodName: "DeleteContainers",
			Handler:    _Agent_DeleteContainers_Handler,
		},
		{
			MethodName: "TokenReplaced",
			Handler:    _Agent_TokenReplaced_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Agent_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeploymentStatus",
			Handler:       _Agent_DeploymentStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ContainerState",
			Handler:       _Agent_ContainerState_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ContainerLog",
			Handler:       _Agent_ContainerLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/proto/agent.proto",
}
