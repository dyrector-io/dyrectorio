/**
 * CRUX Protobuf definitions
 *
 */
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "protobuf/proto/common.proto";

package crux;
option go_package = "github.com/dyrector-io/dyrectorio/protobuf/go/crux";

/**
 *
 * Services
 *
 */
service CruxProduct {
  // CRUD
  rpc GetProducts(AccessRequest) returns (ProductListResponse);
  rpc CreateProduct(CreateProductRequest) returns (CreateEntityResponse);
  rpc UpdateProduct(UpdateProductRequest) returns (UpdateEntityResponse);
  rpc DeleteProduct(IdRequest) returns (common.Empty);
  rpc GetProductDetails(IdRequest) returns (ProductDetailsReponse);
}

service CruxRegistry {
  // CRUD
  rpc GetRegistries(AccessRequest) returns (RegistryListResponse);
  rpc CreateRegistry(CreateRegistryRequest) returns (CreateEntityResponse);
  rpc UpdateRegistry(UpdateRegistryRequest) returns (UpdateEntityResponse);
  rpc DeleteRegistry(IdRequest) returns (common.Empty);
  rpc GetRegistryDetails(IdRequest) returns (RegistryDetailsResponse);
}

service CruxNode {
  // CRUD
  rpc GetNodes(AccessRequest) returns (NodeListResponse);
  rpc CreateNode(CreateNodeRequest) returns (CreateEntityResponse);
  rpc UpdateNode(UpdateNodeRequest) returns (common.Empty);
  rpc DeleteNode(IdRequest) returns (common.Empty);
  rpc GetNodeDetails(IdRequest) returns (NodeDetailsResponse);
  rpc GenerateScript(GenerateScriptRequest) returns (NodeInstallResponse);
  rpc GetScript(ServiceIdRequest) returns (NodeScriptResponse);
  rpc DiscardScript(IdRequest) returns (common.Empty);
  rpc RevokeToken(IdRequest) returns (common.Empty);

  rpc SubscribeNodeEventChannel(ServiceIdRequest)
      returns (stream NodeEventMessage);
  rpc WatchContainerState(WatchContainerStateRequest)
      returns (stream common.ContainerStateListMessage);
}

service CruxProductVersion {
  rpc GetVersionsByProductId(IdRequest) returns (VersionListResponse);
  rpc CreateVersion(CreateVersionRequest) returns (CreateEntityResponse);
  rpc UpdateVersion(UpdateVersionRequest) returns (UpdateEntityResponse);
  rpc DeleteVersion(IdRequest) returns (common.Empty);
  rpc SetDefaultVersion(IdRequest) returns (common.Empty);
  rpc GetVersionDetails(IdRequest) returns (VersionDetailsResponse);
  rpc IncreaseVersion(IncreaseVersionRequest) returns (CreateEntityResponse);
}

service CruxImage {
  rpc GetImagesByVersionId(IdRequest) returns (ImageListResponse);
  rpc AddImagesToVersion(AddImagesToVersionRequest) returns (ImageListResponse);
  rpc OrderImages(OrderVersionImagesRequest) returns (common.Empty);
  rpc PatchImage(PatchImageRequest) returns (common.Empty);
  rpc DeleteImage(IdRequest) returns (common.Empty);
  rpc GetImageDetails(IdRequest) returns (ImageResponse);
}

service CruxDeployment {
  rpc GetDeploymentsByVersionId(IdRequest)
      returns (DeploymentListByVersionResponse);
  rpc CreateDeployment(CreateDeploymentRequest) returns (CreateEntityResponse);
  rpc UpdateDeployment(UpdateDeploymentRequest) returns (UpdateEntityResponse);
  rpc PatchDeployment(PatchDeploymentRequest) returns (UpdateEntityResponse);
  rpc DeleteDeployment(IdRequest) returns (common.Empty);
  rpc GetDeploymentDetails(IdRequest) returns (DeploymentDetailsResponse);
  rpc GetDeploymentEvents(IdRequest) returns (DeploymentEventListResponse);
  rpc GetDeploymentList(AccessRequest) returns (DeploymentListResponse);
  rpc GetDeploymentSecrets(DeploymentListSecretsRequest) returns (common.ListSecretsResponse);
  rpc CopyDeploymentSafe(IdRequest) returns (CreateEntityResponse);
  rpc CopyDeploymentUnsafe(IdRequest) returns (CreateEntityResponse);

  rpc StartDeployment(IdRequest) returns (stream DeploymentProgressMessage);
  rpc SubscribeToDeploymentEditEvents(ServiceIdRequest)
      returns (stream DeploymentEditEventMessage);
}

service CruxTeam {
  rpc CreateTeam(CreateTeamRequest) returns (CreateEntityResponse);
  rpc GetActiveTeamByUser(AccessRequest) returns (ActiveTeamDetailsResponse);
  rpc UpdateTeam(UpdateTeamRequest) returns (common.Empty);
  rpc DeleteTeam(IdRequest) returns (common.Empty);
  rpc UpdateUserRole(UpdateUserRoleInTeamRequest) returns (common.Empty);

  rpc InviteUserToTeam(InviteUserRequest) returns (CreateEntityResponse);
  rpc DeleteUserFromTeam(DeleteUserFromTeamRequest) returns (common.Empty);
  rpc AcceptTeamInvite(IdRequest) returns (common.Empty);
  rpc SelectTeam(IdRequest) returns (common.Empty);

  rpc GetUserMeta(AccessRequest) returns (UserMetaResponse);
  rpc GetAllTeams(AccessRequest) returns (AllTeamsResponse);
  rpc GetTeamById(IdRequest) returns (TeamDetailsResponse);
}

service CruxNotification {
  rpc CreateNotification(CreateNotificationRequest)
      returns (CreateNotificationResponse);
  rpc UpdateNotification(UpdateNotificationRequest)
      returns (UpdateEntityResponse);
  rpc DeleteNotification(IdRequest) returns (common.Empty);
  rpc GetNotificationList(AccessRequest) returns (NotificationListResponse);
  rpc GetNotificationDetails(IdRequest) returns (NotificationDetailsResponse);
  rpc TestNotification(IdRequest) returns (common.Empty);
}

service CruxAudit {
  rpc GetAuditLog(AuditLogListRequest) returns (AuditLogListResponse);
  rpc GetAuditLogListCount(AuditLogListRequest) returns (AuditLogListCountResponse);
}

service CruxHealth { rpc getHealth(common.Empty) returns (HealthResponse); }

service CruxTemplate {
  rpc GetTemplates(AccessRequest) returns (TemplateListResponse);
  rpc CreateProductFromTemplate(CreateProductFromTemplateRequest) returns (CreateEntityResponse);
}

/**
 *
 * Common messages
 *
 */

message ServiceIdRequest { string id = 1; }

message IdRequest {
  string id = 1;
  string accessedBy = 2;
}

message AuditResponse {
  string createdBy = 100;
  google.protobuf.Timestamp createdAt = 101;
  optional string updatedBy = 102;
  optional google.protobuf.Timestamp updatedAt = 103;
}

message CreateEntityResponse {
  string id = 1;

  google.protobuf.Timestamp createdAt = 100;
}

message UpdateEntityResponse { google.protobuf.Timestamp updatedAt = 100; }

/*
 *
 * Custom messages, please use comment if you add a new entity
 *
 */

// AUDIT
message AuditLogListRequest {
  string accessedBy = 100;
  uint32 pageSize = 101;
  uint32 pageNumber = 102;
  optional string keyword = 103;
  optional google.protobuf.Timestamp createdFrom = 104;
  google.protobuf.Timestamp createdTo = 105;
}

message AuditLogListCountResponse {
  uint32 count = 100;
}

message AuditLogResponse {
  google.protobuf.Timestamp createdAt = 100;
  string userId = 101;
  string identityEmail = 102;
  string serviceCall = 103;
  optional string data = 104;
}

message AuditLogListResponse { repeated AuditLogResponse data = 1000; }

// TEAM
message CreateTeamRequest {
  string accessedBy = 2;

  string name = 100;
}

message UpdateTeamRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
}

message UpdateUserRoleInTeamRequest {
  string id = 1;
  string accessedBy = 2;

  string userId = 100;
  UserRole role = 101;
}

message InviteUserRequest {
  string id = 1;
  string accessedBy = 2;

  string email = 100;
}

message DeleteUserFromTeamRequest {
  string id = 1;
  string accessedBy = 2;

  string userId = 100;
}

message AccessRequest { string accessedBy = 2; }

message UserMetaResponse {
  ActiveTeamUser user = 100;

  repeated TeamResponse teams = 1000;
  repeated TeamResponse invitations = 1001;
}

message ActiveTeamUser {
  string activeTeamId = 100;
  UserRole role = 101;
  UserStatus status = 102;
}

message TeamResponse {
  string id = 1;

  string name = 100;
}

message ActiveTeamDetailsResponse {
  string id = 1;

  string name = 100;

  repeated UserResponse users = 1000;
}

message TeamStatistics {
  uint32 users = 100;
  uint32 products = 101;
  uint32 nodes = 102;
  uint32 versions = 103;
  uint32 deployments = 104;
}

message TeamWithStatsResponse {
  string id = 1;

  string name = 100;
  TeamStatistics statistics = 101;
}

message TeamDetailsResponse {
  string id = 1;

  string name = 100;
  TeamStatistics statistics = 101;

  repeated UserResponse users = 1000;
}

message AllTeamsResponse { repeated TeamWithStatsResponse data = 1000; }

enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;
  USER = 1;
  OWNER = 2;
  ADMIN = 3;
}

enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  PENDING = 1;
  VERIFIED = 2;
}

message UserResponse {
  string id = 1;

  string name = 100;
  string email = 101;
  UserRole role = 102;
  UserStatus status = 103;
  optional google.protobuf.Timestamp lastLogin = 104;
}

// PRODUCT
enum ProductType {
  PRODUCT_TYPE_UNSPECIFIED = 0;
  SIMPLE = 1;
  COMPLEX = 2;
}

enum VersionType {
  VERSION_TYPE_UNSPECIFIED = 0;
  INCREMENTAL = 1;
  ROLLING = 2;
}

message ProductDetailsReponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  ProductType type = 102;

  repeated VersionResponse versions = 1000;
}

message ProductReponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  ProductType type = 102;
  uint32 versionCount = 103;
}

message ProductListResponse { repeated ProductReponse data = 1000; }

message CreateProductRequest {
  string accessedBy = 2;

  string name = 100;
  optional string description = 101;
  ProductType type = 102;
}

message UpdateProductRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  optional string description = 101;
  optional string changelog = 102;
}

// REGISTRY

message RegistryResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
  string url = 103;
  RegistryType type = 104;
}

message RegistryListResponse { repeated RegistryResponse data = 1000; }

message HubRegistryDetails { 
  string imageNamePrefix = 100;
}

message V2RegistryDetails {
  string url = 100;
  optional string user = 101;
  optional string token = 102;
}

message GitlabRegistryDetails {
  string user = 100;
  string token = 101;
  string imageNamePrefix = 102;
  optional string url = 103;
  optional string apiUrl = 104;
  RegistryNamespace namespace = 105;
}

message GithubRegistryDetails {
  string user = 100;
  string token = 101;
  string imageNamePrefix = 102;
  RegistryNamespace namespace = 103;
}

message GoogleRegistryDetails {
  string url = 100;
  optional string user = 101;
  optional string token = 102;
  string imageNamePrefix = 103;
}

message CreateRegistryRequest {
  string accessedBy = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;

  oneof details {
    HubRegistryDetails hub = 200;
    V2RegistryDetails v2 = 201;
    GitlabRegistryDetails gitlab = 202;
    GithubRegistryDetails github = 203;
    GoogleRegistryDetails google = 204;
  }
}

message UpdateRegistryRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;

  oneof details {
    HubRegistryDetails hub = 200;
    V2RegistryDetails v2 = 201;
    GitlabRegistryDetails gitlab = 202;
    GithubRegistryDetails github = 203;
    GoogleRegistryDetails google = 204;
  }
}

message RegistryDetailsResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;

  oneof details {
    HubRegistryDetails hub = 200;
    V2RegistryDetails v2 = 201;
    GitlabRegistryDetails gitlab = 202;
    GithubRegistryDetails github = 203;
    GoogleRegistryDetails google = 204;
  }
}

enum RegistryType {
  REGISTRY_TYPE_UNSPECIFIED = 0;
  V2 = 1;
  HUB = 2;
  GITLAB = 3;
  GITHUB = 4;
  GOOGLE = 5;
}

enum RegistryNamespace {
  REGISTRY_NAMESPACE_UNSPECIFIED = 0;
  RNS_ORGANIZATION = 1;
  RNS_USER = 2;
  RNS_GROUP = 3;
  RNS_PROJECT = 4;
}

// VERSION

message CreateVersionRequest {
  string accessedBy = 2;

  string productId = 100;
  string name = 101;
  optional string changelog = 102;
  VersionType type = 104;
}

message UpdateVersionRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  optional string changelog = 101;
}

message VersionResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  string changelog = 101;
  bool default = 102;
  VersionType type = 103;
  bool increasable = 104;
}

message VersionListResponse { repeated VersionResponse data = 1000; }

message VersionDetailsResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  string changelog = 101;
  bool default = 102;
  VersionType type = 103;
  bool mutable = 104;
  bool increasable = 105;

  repeated ImageResponse images = 1000;
  repeated DeploymentByVersionResponse deployments = 1001;
}

message IncreaseVersionRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  optional string changelog = 101;
}

// Container 

message VolumeLink {
  string id = 100;
  string name = 101;
  string path = 102;
}

message InitContainer {
  string id = 100;
  string name = 101;
  string image = 102;
  optional bool useParentConfig = 103;

  repeated VolumeLink volumes = 1000;
  repeated common.UniqueKey command = 1001;
  repeated common.UniqueKey args = 1002;
  repeated UniqueKeyValue environment = 1003;
}

message ImportContainer {
  string volume = 100;
  string command = 101;

  repeated UniqueKeyValue environment = 1000;
}

message LogConfig {
  common.DriverType driver = 100;
  repeated UniqueKeyValue options = 1000;
}


message Port {
  string id = 100;
  int32 internal = 101;
  int32 external = 102;
}

message PortRange {
  int32 from = 100;
  int32 to = 101;
}

message PortRangeBinding {
  string id = 100;
  PortRange internal = 101;
  PortRange external = 102;
}

message Volume {
  string id = 100;
  string name = 101;
  string path = 102;
  optional string size = 103;
  optional common.VolumeType type = 104;
  optional string class = 105;
}

message KeyList { repeated common.UniqueKey data = 1000; }

message UniqueKeyValue {
  string id = 100;
  string key = 101;
  string value = 102;
}

message UniqueSecretKeyValue {
  string id = 100;
  string key = 101;
  string value = 103;
  bool required = 104;
  optional bool encrypted = 105;
}

message KeyValueList { repeated UniqueKeyValue data = 1000; }

message DagentContainerConfig {
  optional LogConfig logConfig = 100;
  optional common.RestartPolicy restartPolicy = 101;
  optional common.NetworkMode networkMode = 102;

  repeated common.UniqueKey networks = 1000;
}

message CraneContainerConfig {
  optional common.DeploymentStrategy deploymentStatregy = 100;
  optional common.HealthCheckConfig healthCheckConfig = 101;
  optional common.ResourceConfig resourceConfig = 102;
  optional bool proxyHeaders = 103;
  optional bool useLoadBalancer = 104;

  repeated common.UniqueKey customHeaders = 1000;
  repeated UniqueKeyValue extraLBAnnotations = 1001;
}

message CommonContainerConfig {
  string name = 101;
  optional common.ExposeStrategy expose = 102;
  optional common.Ingress ingress = 103;
  optional common.ConfigContainer configContainer = 104;
  optional ImportContainer importContainer = 105;
  optional int64 user = 106;
  optional bool TTY = 107;

  repeated Port ports = 1000;
  repeated PortRangeBinding portRanges = 1001;
  repeated Volume volumes = 1002;
  repeated common.UniqueKey commands = 1003;
  repeated common.UniqueKey args = 1004;
  repeated UniqueKeyValue environment = 1005;
  repeated UniqueSecretKeyValue secrets = 1006;
  repeated InitContainer initContainers = 1007;
}

message ContainerConfig {
  optional CommonContainerConfig common = 100;
  optional DagentContainerConfig dagent = 101;
  optional CraneContainerConfig crane = 102;

  repeated UniqueKeyValue capabilities = 1000;
}

message ImageResponse {
  string id = 1;

  string name = 100;
  string tag = 101;
  uint32 order = 102;
  string registryId = 103;
  ContainerConfig config = 104;
  google.protobuf.Timestamp createdAt = 105;
  string registryName = 106;
}

message ImageListResponse { repeated ImageResponse data = 100; }

message OrderVersionImagesRequest {
  string accessedBy = 2;

  string versionId = 100;
  repeated string imageIds = 101;
}

message RegistryImages {
  string registryId = 100;
  repeated string imageNames = 101;
}

message AddImagesToVersionRequest {
  string accessedBy = 2;

  string versionId = 100;
  repeated RegistryImages images = 101;
}

message PatchImageRequest {
  string id = 1;
  string accessedBy = 2;

  optional string tag = 101;
  optional ContainerConfig config = 102;
}

// NODE

message NodeResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
  optional string address = 103;
  NodeConnectionStatus status = 104;
  optional google.protobuf.Timestamp connectedAt = 105;
  optional string version = 106;
  NodeType type = 107;
}

message NodeDetailsResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
  optional string address = 103;
  NodeConnectionStatus status = 104;
  bool hasToken = 105;
  optional google.protobuf.Timestamp connectedAt = 106;
  optional NodeInstallResponse install = 107;
  optional NodeScriptResponse script = 108;
  optional string version = 109;
  NodeType type = 110;
}

message NodeListResponse { repeated NodeResponse data = 1000; }

message CreateNodeRequest {
  string accessedBy = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
}

message UpdateNodeRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  optional string description = 101;
  optional string icon = 102;
}

message GenerateScriptRequest {
  string id = 1;
  string accessedBy = 2;
  NodeType type = 100;
  optional string rootPath = 101;
}

message NodeInstallResponse {
  string command = 100;
  google.protobuf.Timestamp expireAt = 101;
}

message NodeScriptResponse { string content = 100; }

/*
Lifecycle:
When a node connection is alive, the status is CONNECTED.
If it disconnects, the status will be UNREACHABLE.
When a node created, it is UNREACHEABLE until the user completes
the install process.
*/
enum NodeConnectionStatus {
  CONNECTION_STATUS_UNSPECIFIED = 0;
  // Node was not yet connected or became unreachable
  UNREACHABLE = 1;
  // Node is running and connected
  CONNECTED = 2;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  DOCKER = 1;
  K8S = 2;
}

message NodeEventMessage {
  string id = 1;
  NodeConnectionStatus status = 100;
  optional string address = 101;
  optional string version = 102;
  optional google.protobuf.Timestamp connectedAt = 103;
}

message WatchContainerStateRequest {
  string accessedBy = 2;

  string nodeId = 100;
  optional string prefix = 101;
}

// DEPLOYMENT

message DeploymentProgressMessage {
  string id = 1;

  optional common.DeploymentStatus status = 100;
  optional common.InstanceDeploymentItem instance = 101;

  repeated string log = 1000;
}

message InstancesCreatedEventList { repeated InstanceResponse data = 1000; }

message DeploymentEditEventMessage {
  oneof data {
    InstancesCreatedEventList instancesCreated = 200;
    string imageIdDeleted = 201;
  }
}

message CreateDeploymentRequest {
  string accessedBy = 2;

  string versionId = 100;
  string nodeId = 101;
  optional string note = 102;
  string prefix = 103;
}

message UpdateDeploymentRequest {
  string id = 1;
  string accessedBy = 2;

  optional string note = 100;
  string prefix = 101;
}

message PatchDeploymentRequest {
  string id = 1;
  string accessedBy = 2;

  optional KeyValueList environment = 100;
  optional PatchInstanceRequest instance = 1001;
}

message InstanceResponse {
  string id = 1;
  AuditResponse audit = 2;

  ImageResponse image = 100;
  optional common.ContainerState state = 101;
  optional ContainerConfig config = 102;
}

message PatchInstanceRequest {
  string id = 1;
  string accessedBy = 2;
  
  optional ContainerConfig config = 102;
}

message DeploymentListResponse { repeated DeploymentResponse data = 1000; }

message DeploymentResponse {
  string id = 1;

  string product = 100;
  string productId = 101;
  string version = 102;
  string versionId = 103;
  string node = 104;
  common.DeploymentStatus status = 105;
  string nodeId = 106;
  optional string note = 107;
  string prefix = 108;
  optional google.protobuf.Timestamp updatedAt = 109;
}

message DeploymentListByVersionResponse {
  repeated DeploymentByVersionResponse data = 1000;
}

message DeploymentByVersionResponse {
  string id = 1;
  AuditResponse audit = 2;

  string prefix = 100;
  string nodeId = 101;
  string nodeName = 102;
  common.DeploymentStatus status = 103;
  NodeConnectionStatus nodeStatus = 104;
  optional string note = 105;
}

message DeploymentDetailsResponse {
  string id = 1;
  AuditResponse audit = 2;

  string productVersionId = 100;
  string nodeId = 101;
  optional string note = 102;
  string prefix = 103;
  repeated UniqueKeyValue environment = 104;
  common.DeploymentStatus status = 105;
  optional string publicKey = 106;

  repeated InstanceResponse instances = 1000;
}

enum DeploymentEventType {
  DEPLOYMENT_EVENT_TYPE_UNSPECIFIED = 0;
  DEPLOYMENT_LOG = 1;
  DEPLOYMENT_STATUS = 2;
  CONTAINER_STATUS = 3;
}

message DeploymentEventContainerState {
  string instanceId = 1;
  common.ContainerState state = 2;
}

message DeploymentEventLog { repeated string log = 1000; }

message DeploymentEventResponse {
  DeploymentEventType type = 100;
  google.protobuf.Timestamp createdAt = 101;
  oneof details {
    DeploymentEventLog log = 200;
    common.DeploymentStatus deploymentStatus = 201;
    DeploymentEventContainerState containerStatus = 202;
  }
}

message DeploymentEventListResponse {
  repeated DeploymentEventResponse data = 1000;
}

message DeploymentListSecretsRequest {
  string id = 1;
  string accessedBy = 2;
  string instanceId = 3;
}

// NOTIFICATION

enum NotificationType {
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  DISCORD = 1;
  SLACK = 2;
  TEAMS = 3;
}

enum NotificationEventType {
  NOTIFICATION_EVENT_TYPE_UNSPECIFIED = 0;
  DEPLOYMENT_CREATED = 1;
  VERSION_CREATED = 2;
  NODE_ADDED = 3;
  USER_INVITED = 4;
}

message CreateNotificationRequest {
  string accessedBy = 2;

  string name = 100;
  string url = 101;
  NotificationType type = 102;
  bool active = 103;

  repeated NotificationEventType events = 1000;
}

message CreateNotificationResponse {
  string id = 1;

  string creator = 100;
}

message UpdateNotificationRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  string url = 101;
  NotificationType type = 102;
  bool active = 103;
  
  repeated NotificationEventType events = 1000; 
}

message NotificationDetailsResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  string url = 101;
  NotificationType type = 102;
  bool active = 103;

  repeated NotificationEventType events = 1000; 
}

message NotificationResponse {
  string id = 1;
  AuditResponse audit = 2;

  string name = 100;
  string url = 101;
  NotificationType type = 103;
  bool active = 104;

  repeated NotificationEventType events = 1000; 
}

message NotificationListResponse { repeated NotificationResponse data = 1000; }

// HEALTH

enum ServiceStatus {
  SERVICE_STATUS_UNSPECIFIED = 0;
  UNAVAILABLE = 1;
  DISRUPTED = 2;
  OPERATIONAL = 3;
}

message HealthResponse {
  ServiceStatus status = 100;
  string cruxVersion = 101;
  optional string lastMigration = 102;
}

// TEMPLATE
message TemplateResponse {
  string id = 1;

  string name = 100;
  string description = 101;
}

message TemplateListResponse {
  repeated TemplateResponse data = 1000;
}

message CreateProductFromTemplateRequest {
  string id = 1;
  string accessedBy = 2;

  string name = 100;
  string description = 101;
  ProductType type = 102;
}
